<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>35.32</title>
  
  <subtitle>这些表象就是崇高和滑稽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="httpsp://yoursite.com/"/>
  <updated>2019-01-16T02:00:45.429Z</updated>
  <id>httpsp://yoursite.com/</id>
  
  <author>
    <name>槨冧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>那些改不掉的病</title>
    <link href="httpsp://yoursite.com/2019/01/16/%E5%8E%9F%E8%B0%85%E6%88%91%E4%B8%8D%E6%98%8E%E7%99%BD%E4%BD%A0%E7%9A%84%E6%82%B2%E4%BC%A4/"/>
    <id>httpsp://yoursite.com/2019/01/16/原谅我不明白你的悲伤/</id>
    <published>2019-01-16T02:00:45.429Z</published>
    <updated>2019-01-16T02:00:45.429Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p> 原谅我不明白你的悲伤</p><p>我感到</p><p>在人群中看到你时，带给我的，夜的宁静</p><p>但我随即又看不到你背影</p><p>我痛苦的承认，我只能够看到，人群</p><p>抱歉，亲爱的</p><p>我不想将你遗忘</p><p>而你常在人群之中吗</p><p>亲爱的</p><p>我很抱歉</p><p>只因我在人群中</p><p>我便只能</p><p>怀念你的背影</p><p>忍受着</p><p>逐渐消失的世界</p><p>对于我的感觉</p><p>亲爱的</p><p>请原谅我不明白你的悲伤</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; 原谅我不明白你的悲伤&lt;/p&gt;
&lt;p&gt;我感到&lt;/p&gt;
&lt;p&gt;在人群中看到你时，带给我的，夜的宁静&lt;/p&gt;
&lt;p&gt;但我随即又看不到你背影&lt;/p&gt;
&lt;p&gt;我痛苦的承认，我只能够看到，人群&lt;/p&gt;
&lt;p&gt;抱歉，亲爱的&lt;/p&gt;
&lt;p&gt;我不想将你遗
      
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>机器学习日记_2</title>
    <link href="httpsp://yoursite.com/2019/01/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0_2/"/>
    <id>httpsp://yoursite.com/2019/01/16/机器学习日记_2/</id>
    <published>2019-01-16T02:00:39.439Z</published>
    <updated>2019-01-16T02:00:39.442Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg" alt=""></p><a id="more"></a><hr><h1 id="第一个机器学习算法"><a href="#第一个机器学习算法" class="headerlink" title="第一个机器学习算法"></a>第一个机器学习算法</h1><font color="blue" size="5">Linear regression with one variable</font>【一元线性回归】<br><br><br><br>什么是一元变量线性回归？<br><br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回归分析只涉及到两个变量的，称一元回归分析。一元回归的主要任务是从两个相关变量中的一个变量去估计另一个变量，被估计的变量，称因变量，可设为<span class="keyword">Y</span>；估计出的变量，称自变量，设为<span class="keyword">X</span>。回归分析就是要找出一个数学模型<span class="keyword">Y</span>=f(<span class="keyword">X</span>)，使得从<span class="keyword">X</span>估计<span class="keyword">Y</span>可以用一个函数式去计算。当<span class="keyword">Y</span>=f(<span class="keyword">X</span>)的形式是一个直线方程时，称为一元线性回归。这个方程一般可表示为<span class="keyword">Y</span>=A+BX。根据最小平方法或其他方法，可以从样本数据确定常数项A与回归系数B的值。A、B确定后，有一个<span class="keyword">X</span>的观测值，就可得到一个<span class="keyword">Y</span>的估计值。回归方程是否可靠，估计的误差有多大，都还应经过显著性检验和误差计算。有无显著的相关关系以及样本的大小等等，是影响回归方程可靠性的因素</span><br></pre></td></tr></table></figure><br><br><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fxk18qppzkj30px0ds4hf.jpg" alt="1543107453608"><br><br><br><br>举个例子来说，上面的坐标图，横轴代表房屋的面积，纵轴表示可以卖到的价钱，小王手里有一个1250单位大小的房子，他想知道这间房子可以卖多少钱？<br><br>___<br><br>为了解决这个问题，我们<code>拟合</code>这些数据，就是把这些离散的数据近似成为一条连续的曲线，但是你可以看到，我们通过直线拟合或二次函数拟合，这两种情况下的结果显然是不同的，那么，我们该怎样选择呢？<br><br>此时此刻，我们正在解决一个<code>Regression problem</code>(回归问题)，意思就是我们想预测连续的数据输出，也就是价格。<br><br><br><img src="C:\Users\35.32\AppData\Roaming\Typora\typora-user-images\1543333273119.png" alt="1543333273119"><br><br><img src="C:\Users\35.32\AppData\Roaming\Typora\typora-user-images\1543333559831.png" alt="1543333559831"><br><br><font color="red"> 解释: </font><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">其实很简单</span><br><span class="line"></span><br><span class="line">traing <span class="keyword">set</span> : 是训练集，也就是你为了训练机器学习，而传入的样本数据集合</span><br><span class="line">m <span class="comment">:</span> 是数据的个数</span><br><span class="line">x ：是输入</span><br><span class="line">y ：是输出  //他俩右上角其实是个<span class="comment">index</span>索引而已，不是啥数学运算</span><br><span class="line">hypothesis ： 假设函数 // 就是我们假设存在一个函数<span class="comment">h</span>，输入个<span class="comment">x</span>，输出个<span class="comment">y</span></span><br><span class="line">Hθ(x) = θ1X <span class="comment">+</span> θ<span class="comment">0 :</span> 是假设的函数，是个看起来吓人实际上就是个线性函数，θ<span class="comment">1</span>是斜率，θ<span class="comment">0</span>是截距</span><br></pre></td></tr></table></figure><p>未完待续…    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="httpsp://yoursite.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Java备忘录</title>
    <link href="httpsp://yoursite.com/2019/01/16/Java%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>httpsp://yoursite.com/2019/01/16/Java备忘录/</id>
    <published>2019-01-15T16:06:29.998Z</published>
    <updated>2019-02-02T02:39:34.793Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EMP</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EMP</span><span class="params">(<span class="keyword">int</span> a,String n,<span class="keyword">double</span> s)</span></span>&#123; </span><br><span class="line">age =a;</span><br><span class="line">name=n;</span><br><span class="line">salary=s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123; </span><br><span class="line">age=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">name=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> s)</span></span>&#123;</span><br><span class="line">salary = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"NAME IS:"</span>+name+<span class="string">"\n"</span>+<span class="string">"AGE IS:"</span>+age+<span class="string">"\n"</span>+<span class="string">"SALARY IS:"</span>+salary+<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">empdemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">EMP e=<span class="keyword">new</span> EMP(<span class="number">1132</span>,<span class="string">"Mr.k"</span>,<span class="number">1.0</span>);</span><br><span class="line">System.out.println(e.getInfo());</span><br><span class="line">e.setName(<span class="string">"Mike"</span>);</span><br><span class="line">System.out.println(e.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr> <font color="green" size="30">Java命名规范</font><ul><li>类名称:  每个单词首字母大写   如<code>StudentInfo</code></li><li>属性名称: 第一个单词首字母大写，其余小写 如 <code>Studentname</code></li><li>方法名称: 第一个单词之外的单词首字母大写 如 <code>getName()</code></li><li>常量名称: 全部大写 如<code>MSG</code></li><li>包名称: 全部小写 如<code>no1.no2.XXX</code></li></ul><hr><font color="blue" size="55">String初始化方法</font><p>关于字符串的比较，我们必须明确</p><p><code>=等号 只能用于数值比较</code></p><p><code>非要让String对象用等号进行的话，比较的双方只会比较地址</code></p><p>我们声明一个String对象，常用两种方法</p><p>第一： <font color="RED">  String  str= “test”</font></p><p>第二：   <font color="red">String  str= new String(“test”)</font></p><p>我们必须知道</p><font color="blue">第一种</font>是匿明声明，<code>test</code>此时在堆内存当中，只有一个，你仔细观察下面的<em>str1</em>和<em>str4</em>，它俩都指向了堆里面的一个匿名对象，无论有成千上万个str，只要它们都采用不加new的第一种声明方式，那么它们仅仅都是指向了同一个字符串而已，它们的地址一样，它们的内容一样，因为它们没有用new声明，堆里面，只有一个”test”而已<br><br> <font color="blue">第二种</font>声明，和上面的匿名声明对比，意味着，每次声明都会在堆内存中，新创建一个崭新的字符串，看对比<br><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> str1=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"test1"</span>);</span><br><span class="line"><span class="keyword">String</span> str2=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"test1"</span>);</span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(str1==str2);  <span class="comment">//结果是 false</span></span><br></pre></td></tr></table></figure><br><br>结果是false意味着，即使内容不同，因为这两个对象都是用的new来创建的，所以，它们分居在堆内存的不同位置，有成千上万个new对象，堆内存中就有成千上万个字符串。<br><br><br><br>* 总的来说<br><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> str1=<span class="string">"test1"</span>;</span><br><span class="line"><span class="keyword">String</span> str2=<span class="string">"test1"</span>;</span><br><span class="line"><span class="keyword">String</span> str3=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"test1"</span>);</span><br><span class="line"><span class="keyword">String</span> str4=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"test1"</span>);</span><br><span class="line"><span class="keyword">String</span> str5=str2;</span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(str1==str2);    <span class="comment">//true因为匿名声明，指向一模一样的地址  </span></span><br><span class="line">System.out.<span class="built_in">println</span>(str3==str2);<span class="comment">//false 因为两者地址不同</span></span><br><span class="line">System.out.<span class="built_in">println</span>(str1.equals(str2));  <span class="comment">//true 因为内容相同</span></span><br><span class="line">System.out.<span class="built_in">println</span>(str2.equals(str3));<span class="comment">//true 因为内容相同</span></span><br><span class="line">System.out.<span class="built_in">println</span>(str3==str4);<span class="comment">//false 因为地址不同</span></span><br><span class="line">System.out.<span class="built_in">println</span>(str3.equals(str4));<span class="comment">//true 因为内容相同</span></span><br><span class="line">System.out.<span class="built_in">println</span>(str5==str2);<span class="comment">//true 因为复制操作，str5和str2指向一处</span></span><br></pre></td></tr></table></figure><br><br>—<br><br><font color="purple" size="40">String 的构造方法</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">String() </span><br><span class="line">          初始化一个新创建的 String 对象，使其表示一个空字符序列。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes) </span><br><span class="line">          通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, Charset charset)   </span><br><span class="line">          通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] ascii, <span class="keyword">int</span> hibyte) </span><br><span class="line">          已过时。 该方法无法将字节正确地转换为字符。从 JDK <span class="number">1.1</span> 开始，完成该转换的首选方法是使用带有 Charset、字符集名称，或使用平台默认字符集的 String 构造方法。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length) </span><br><span class="line">          通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset) </span><br><span class="line">          通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] ascii, <span class="keyword">int</span> hibyte, <span class="keyword">int</span> offset, <span class="keyword">int</span> count) </span><br><span class="line">          已过时。 该方法无法将字节正确地转换为字符。从 JDK <span class="number">1.1</span> 开始，完成该转换的首选方法是使用带有 Charset、字符集名称，或使用平台默认字符集的 String 构造方法。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName) </span><br><span class="line">          通过使用指定的字符集解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, String charsetName) </span><br><span class="line">          通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">char</span>[] value) </span><br><span class="line">          分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">char</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> count) </span><br><span class="line">          分配一个新的 String，它包含取自字符数组参数一个子数组的字符。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count) </span><br><span class="line">          分配一个新的 String，它包含 Unicode 代码点数组参数一个子数组的字符。</span><br><span class="line">          </span><br><span class="line">String(String original) </span><br><span class="line">          初始化一个新创建的 String 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。</span><br><span class="line">          </span><br><span class="line">String(StringBuffer buffer) </span><br><span class="line">          分配一个新的字符串，它包含字符串缓冲区参数中当前包含的字符序列。</span><br><span class="line">          </span><br><span class="line">String(StringBuilder builder) </span><br><span class="line">          分配一个新的字符串，它包含字符串生成器参数中当前包含的字符序列。</span><br></pre></td></tr></table></figure><p>​    </p><hr><p>String 之中我们常用的函数方法</p><p><strong>str.toCharArray( )</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">String</span> str1=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"DoASYouSaid"</span>);</span><br><span class="line"><span class="keyword">char</span>[] b = str1.toCharArray();</span><br></pre></td></tr></table></figure><p><strong>String str1 = new String(str)</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> str1 = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"OkMan."</span>);</span><br><span class="line"><span class="keyword">String</span> temp = <span class="keyword">new</span> <span class="keyword">String</span>(str1);</span><br><span class="line">System.out.<span class="built_in">println</span>(temp);</span><br><span class="line">-&gt; OkMan</span><br></pre></td></tr></table></figure><hr><font color="red" size="50">类的传递</font>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(<span class="keyword">int</span> age,String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setcar</span><span class="params">(Car car)</span></span>&#123; <span class="comment">//一个人有车,人里面必须有设置车的信息</span></span><br><span class="line"><span class="keyword">this</span>.car=car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getcar</span><span class="params">()</span></span>&#123; <span class="comment">//从人获得车信息</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getinfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="string">"Info is:"</span>+<span class="keyword">this</span>.age+<span class="string">" "</span>+<span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String carname;</span><br><span class="line"><span class="keyword">private</span> Human h;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String carname)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.carname = carname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sethuman</span><span class="params">(Human h)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.h=h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  Human <span class="title">gethuman</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getinfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Info is: "</span>+<span class="keyword">this</span>.carname;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">ChuanDi</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Human h =<span class="keyword">new</span> Human(<span class="number">23</span>,<span class="string">"boom"</span>);</span><br><span class="line">Car c = <span class="keyword">new</span> Car(<span class="string">"McLaRen"</span>);</span><br><span class="line">h.setcar(c);</span><br><span class="line"> System.out.println( h.getcar().getinfo() );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="green" size="45"> 重写和重载</font><br><br><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fzeasxqwcjj30qx0pkqea.jpg" alt=""><br><br>&gt; 这也就是说，重写体现了子类和父类之间多态的体现<br>&gt;<br>&gt; 重载是类之中的多态性的体现<br><br><br><br><br><br><font color="red" font="30"> 继承中容易的犯错 </font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"///"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"***"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jicheng</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A(); <span class="comment">//1</span></span><br><span class="line">B b = (B)  a;  <span class="comment">//2</span></span><br><span class="line">b.print();<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">B b2= <span class="keyword">new</span> B();<span class="comment">//4</span></span><br><span class="line">A a2 = (A) b2;<span class="comment">//5</span></span><br><span class="line">a2.print();<span class="comment">//6</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个很简单直白的代码，B继承了A，并且对于A中的print()方法进行了覆写.</p><p>我们的问题是:</p><blockquote><p>只有 1 2 3 行执行时，什么结果</p><p>只有 4 5 6 行执行时，什么结果</p></blockquote><p>答案是:</p><blockquote><p>一，执行错误：Exception in thread “main” java.lang.ClassCastException: A cannot be cast to B<br>​                 </p><p>二，成功执行输出 ***</p></blockquote><p>原因是：</p><blockquote><p> 让 a 向下转型，转型为B类 。这个时候报错，A并不知道自己的子类是什么，从上到下，无法向下转型</p><p>而向上转型可成功执行</p></blockquote><font color="blue" size="40"> Usb接口简单实现</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Usb</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">Usb</span></span>&#123;            <span class="comment">//继承Usb接口以覆写方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Flash start!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Flash stop!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">Usb</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Printer start!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Printer stop!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">computer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(Usb usb)</span></span>&#123; <span class="comment">//computer只能看得到Usb</span></span><br><span class="line">usb.start();</span><br><span class="line">usb.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Usbinterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">computer c1 = <span class="keyword">new</span> computer();</span><br><span class="line">c1.work(<span class="keyword">new</span> Flash());</span><br><span class="line">c1.work(<span class="keyword">new</span> Printer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="30"> 工厂设计模式</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Eating Apples!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Eating Orange!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">chose</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"Apple"</span>.equals(s))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"Orange"</span>.equals(s))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Orange();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory_test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Fruit f =  Factory.chose(<span class="string">"Orange"</span>);</span><br><span class="line">f.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="30"> 代理设计模式</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Subject</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fooing"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> RealSubject subject;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(RealSubject realsubject)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subject = realsubject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Beforefoo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Before fooing!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.Beforefoo();</span><br><span class="line"><span class="keyword">this</span>.subject.foo();</span><br><span class="line"><span class="keyword">this</span>.Afterfoo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Afterfoo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"After fooing"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Subject s = <span class="keyword">new</span> ProxySubject(<span class="keyword">new</span> RealSubject());</span><br><span class="line">s.foo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><font color="blue" size="30"> Object类</font><p><code>object</code>类是所有类的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;&#125; <span class="comment">// 继承Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object_class</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Object obja = <span class="keyword">new</span> Book(); <span class="comment">// 向上转型</span></span><br><span class="line">Object objb = <span class="string">"This is  a String"</span>; <span class="comment">//向上转型,Object 也是 String 的父类</span></span><br><span class="line">Book b =(Book) obja; <span class="comment">//向下转型</span></span><br><span class="line">String s = (String) objb; <span class="comment">//向下转型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red" size="3"> Object 之toString() 方法</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String bookname=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String author = <span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bookname,String author)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookname = bookname;</span><br><span class="line"><span class="keyword">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.author+<span class="string">","</span>+<span class="keyword">this</span>.bookname);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2</span></span>&#123;                       <span class="comment">//Book2没有重写从 Object 那继承来的 toString()方法</span></span><br><span class="line"><span class="keyword">private</span> String bookname=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String author = <span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book2</span><span class="params">(String bookname,String author)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookname = bookname;</span><br><span class="line"><span class="keyword">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object_toString</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Book b = <span class="keyword">new</span> Book(<span class="string">"道德的谱系"</span>,<span class="string">"尼采"</span>);</span><br><span class="line">Book2 b2 = <span class="keyword">new</span> Book2(<span class="string">"悲剧的诞生"</span>,<span class="string">"尼采"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(b2); <span class="comment">//因为Book2 没有重写toString(),所以打印出了地址</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">尼采,道德的谱系</span></span><br><span class="line"><span class="comment">Book2@6d06d69c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><font color="red" size="3"> Object 之 equals() 方法</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String author=<span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">Book</span><span class="params">(String title,String author)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line"><span class="keyword">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;  <span class="comment">//以下为对从Object中继承的equals()的重写</span></span><br><span class="line"><span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Book))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Book b = (Book) obj; <span class="comment">//关键,缺少这一步必定报错。因为 title,author 是下层的属性, Object 向下转型才能取得这类特殊属性。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.title.equals(b.title) &amp;&amp; <span class="keyword">this</span>.author.equals(b.author) ) </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object_equals</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Book b1 = <span class="keyword">new</span> Book(<span class="string">"兄弟"</span>,<span class="string">"余华"</span>);</span><br><span class="line">Book b2 = <span class="keyword">new</span> Book(<span class="string">"基督山伯爵"</span>,<span class="string">"大仲马"</span>);</span><br><span class="line">System.out.println(b1.equals(b2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">尼采,道德的谱系</span></span><br><span class="line"><span class="comment">Book2@6d06d69c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><font color="blue" size="30"> 包装数据类型</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">baozhuanglei</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">String s1=<span class="string">"1532"</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">144</span>;</span><br><span class="line"></span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">//直接通过构造函数的方式进行声明</span></span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="number">1</span>;  <span class="comment">//把 1 自动装箱成一个Integer类</span></span><br><span class="line"><span class="keyword">int</span> i4 = i3; <span class="comment">//自动拆箱</span></span><br><span class="line">      Integer i5 =i3; <span class="comment">//类复制</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//以下说明类不能直接比较 i2 i3 i5 都是类，除非这俩类是同一个类，比如 i3 和 i5</span></span><br><span class="line">System.out.println(i2==i3); <span class="comment">// false </span></span><br><span class="line">System.out.println(i3==i4);<span class="comment">// true</span></span><br><span class="line">System.out.println(i2==i4);<span class="comment">// true </span></span><br><span class="line">System.out.println(i2==i5);<span class="comment">// false</span></span><br><span class="line">System.out.println(i4==i5);  <span class="comment">// true </span></span><br><span class="line">System.out.println(i3==i5);  <span class="comment">// true 为啥这俩类比较是相等的呢?因为这俩类实际就是一个类</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="comment">//从代表X数据类型的字符串，转换为X,使用类似 X.parseX 的方法。</span></span><br><span class="line">System.out.println(Integer.parseInt(s1));</span><br><span class="line"><span class="comment">//从某种数据类型转化为字符串，使用String.valueof()方法。</span></span><br><span class="line">        System.out.println(String.valueOf(i1));   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="blue" size="30"> 单例设计模式</font></p><blockquote><p>如果想控制一个类中实例化对象的个数    //比如我想让我定义的类无论声明几次都只有一个实例</p><p>需要锁定构造法方法      //在构造方法上加一个private</p><p>因为新对象必须要依靠构造方法，锁了构造方法意味着锁了对象</p><p>又因为既然只需要一个实例化对象，可以在类的内部使用 static 的方法来定义一个公共对象</p><p>每次 static 构造方法返回一个唯一的对象，这样外部不管有多少次调用，最终一个类只产生一个唯一的对象。</p></blockquote><p>例程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no21;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//final 保证了INSTANCE的值不会再改变</span></span><br><span class="line">    <span class="comment">//paivate 保证了 这是个私有对象， 但外部可以通过getter方法得到</span></span><br><span class="line">    <span class="comment">//static 保证了 外界每次得到的都是同一个公共的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton(); <span class="comment">//私有化静态内部变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//构造方法私有化,保证外界不能直接实例化对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;<span class="comment">//getter方法，保证外界可以实例化</span></span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Singleton  s =<span class="keyword">null</span>; <span class="comment">//声明对象</span></span><br><span class="line">s =  Singleton.getInstance();</span><br><span class="line">s.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码稍加改进:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no21;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span> )&#123;           <span class="comment">//不同</span></span><br><span class="line">INSTANCE = <span class="keyword">new</span> Singleton(); <span class="comment">//不同</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Singleton  s =<span class="keyword">null</span>; </span><br><span class="line">s =  Singleton.getInstance();</span><br><span class="line">s.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="30"> 多例设计模式</font><blockquote><p>多例也必须 构造方法私有化</p><p>但是一个类 可以提供多个实例化对象</p></blockquote><p>例程: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sex</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  Sex MALE = <span class="keyword">new</span> Sex(<span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  Sex FEMALE = <span class="keyword">new</span> Sex(<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Sex</span><span class="params">(String s)</span></span>&#123;<span class="comment">//构造方法私有化</span></span><br><span class="line"><span class="keyword">this</span>.title = s;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="comment">//重写 toString方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sex <span class="title">getSex</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;  <span class="comment">//让外部选择，从有限个静态对象中选择</span></span><br><span class="line"><span class="keyword">switch</span>(i)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> MALE;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> FEMALE;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiton</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argg[])</span></span>&#123;</span><br><span class="line">Sex  sex = Sex.getSex(<span class="number">1</span>);</span><br><span class="line">System.out.println(sex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
    
      <category term="Java" scheme="httpsp://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Lisp扫盲</title>
    <link href="httpsp://yoursite.com/2018/12/31/Lisp%E6%89%AB%E7%9B%B2/"/>
    <id>httpsp://yoursite.com/2018/12/31/Lisp扫盲/</id>
    <published>2018-12-31T03:31:57.968Z</published>
    <updated>2018-12-31T15:52:14.190Z</updated>
    
    <content type="html"><![CDATA[<p>通过例子了解lisp的特点</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p><a href="https://zh.wikipedia.org/wiki/LISP" target="_blank" rel="noopener">lisp是什么，我们为什么要用lisp</a></p><p>推荐使用<font color="blackgreen" size="5"> <a href="https://sourceforge.net/projects/clisp/" target="_blank" rel="noopener">CLISP</a></font> 进行clisp的练习</p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p>​     Lisp拥有<font color="red">  7</font> 个基本的 运算符,大可放心,并且都易理解。</p><p>​     他们是 </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quote  atom  eq  car cdr  cons cond</span><br></pre></td></tr></table></figure><p>​    在详细介绍这七个运算符之前，我们先介绍list的几个小的特点</p><h2 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h2><p>​    lisp 不区分大小写,但 Lisp 会尽可能地，把小写转化为大写</p><p>​    lisp使用前缀表达式进行表达式的运算，这是我们并不陌生的形式</p> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; (+ <span class="number">2</span>)   <span class="comment">// [ + - * / ] 四个运算要求 参与运算的数 至少有一个 </span></span><br><span class="line">      <span class="number">2</span></span><br><span class="line">&gt; (+ <span class="number">1</span> <span class="number">2</span> (+ <span class="number">2</span> <span class="number">3</span>))      <span class="comment">//朴素的嵌套</span></span><br><span class="line">   <span class="number">8</span></span><br><span class="line">   &gt; (* <span class="number">3</span> <span class="number">6</span> <span class="number">2</span>)</span><br><span class="line">      <span class="number">36</span></span><br><span class="line">   &gt; (* <span class="number">3.0</span> <span class="number">6</span> <span class="number">2</span>)</span><br><span class="line">      <span class="number">36.0</span></span><br><span class="line">&gt; (/ <span class="number">8</span> <span class="number">4</span>)</span><br><span class="line">      <span class="number">2</span></span><br><span class="line">   &gt; (/ <span class="number">5</span> <span class="number">10</span>)</span><br><span class="line">      <span class="number">1</span>/<span class="number">2</span>       <span class="comment">//请注意，如果你没有显式的告诉lisp你用的是浮点数，它不算小数只算分数</span></span><br><span class="line">   &gt; (/ <span class="number">9</span> <span class="number">5.4</span>)</span><br><span class="line">      <span class="number">1.6666666</span>  <span class="comment">//这样结果是小数</span></span><br><span class="line">   &gt; (* <span class="number">4</span> <span class="number">3</span> (+ <span class="number">2</span> <span class="number">3</span>(* <span class="number">23</span> <span class="number">4</span>)))</span><br><span class="line">      <span class="number">1164</span></span><br></pre></td></tr></table></figure><p>​      这一特色，这导致了Lisp所有表达式的统一性 ，只不过，有些时候我们需要认清括号的匹配。</p><h2 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h2><p>​     我们先了解几种 Lisp 的数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1 </span><br><span class="line">  1    //数字</span><br><span class="line"></span><br><span class="line">&gt; &quot;___ok/&apos;hello* &quot;</span><br><span class="line">  &quot;___ok/&apos;hello* &quot;    // 字符串，双引号为字符串的一部分</span><br><span class="line"></span><br><span class="line">&gt; &apos;(* 2 3)232323abc </span><br><span class="line">   (* 2 3)232323ABC        //引用,出现在 &apos; 后面的都被当作引用，这点很关键,我们后面专门介绍</span><br><span class="line"></span><br><span class="line">&gt; (list &apos;(* 2 3) 2 (* 2 3)) </span><br><span class="line">   ((* 2 3)26)                //list生成表，qoute引用 也就是 [ &apos; ], 阻止了(* 2 3) 的运算</span><br></pre></td></tr></table></figure><h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h2><p>​    有了上面的准备，接下来我们来看六个基本运算符.</p><p>​     <strong>2.3.1</strong> <font color="red">  quote </font> 的用法 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &gt;(quote x) </span><br><span class="line">   X  </span><br><span class="line"></span><br><span class="line">&gt;(quote (a b c)) </span><br><span class="line">   (A B C) </span><br><span class="line"> </span><br><span class="line">&gt;&apos;(+ 1 2) </span><br><span class="line">   (+ 1 2)</span><br><span class="line"> </span><br><span class="line">&gt;&apos;(a b c) </span><br><span class="line">   (A B C)</span><br><span class="line"></span><br><span class="line">&gt; (list 2 3 )</span><br><span class="line">   (2 3)</span><br><span class="line"></span><br><span class="line">&gt; &apos;(list 2 3)</span><br><span class="line">   (list 2 3)</span><br></pre></td></tr></table></figure><p>​      <code>quote</code> 等于 <code>&#39;</code></p><p>​      我们看到，quote的鲜明求值规则是，<strong>什么也不做</strong>, 跟在quote后面的东西，注定被保护，无论是想用list构造表，还是做加减乘除，只要在 <code>’</code> 之后，都会被视为一句话，而不求值.</p><p>   <strong>2.3.2</strong>  <font color="red">atom </font>的用法</p><p>​    atom用于判断对象是否是<code>原子</code>或<code>空表</code> ,仅有这两种是原子的</p><p>​        T为真，NIL为假</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">atom</span> ‘a) </span><br><span class="line">T </span><br><span class="line">&gt;  (<span class="name">atom</span> ()) </span><br><span class="line">T </span><br><span class="line">&gt;  (<span class="name">atom</span> ()) </span><br><span class="line">T </span><br><span class="line">&gt;  (<span class="name">atom</span> '(a b c)) </span><br><span class="line">NIL</span><br></pre></td></tr></table></figure><p><strong>2.3.3</strong> <font color="red"> eq</font>的用法</p><p>​    (eq x y ) 如果 x 和 y 的值是<code>同一个原子</code>或`都为空表 返回 T，否则返回 () 即NIL </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> (eq <span class="string">'a '</span>a) </span></span><br><span class="line">t </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> (eq <span class="string">'a '</span>b) </span></span><br><span class="line">nil </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> (eq <span class="string">'() '</span>()) </span></span><br><span class="line">t </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> (eq  <span class="string">'(a b) '</span>(a b))    </span></span><br><span class="line">NIL                     //返回 nil，因为 ’(a b)不是 原子 。</span><br></pre></td></tr></table></figure><p><strong>2.3.4</strong> <font color="red"> car 和 cdr </font> 的用法</p><p>​    car( x )  和 cdr( x )  都要求 x 是一个表，不同在于</p><p>​     <code>car() 返回表的第一个元素,cdr()返回表除第一个剩下所有元素，如果可以以list形式返回</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;(car (1 2 3))</span><br><span class="line">  报错</span><br><span class="line"></span><br><span class="line">&gt;(car &apos;(1 2 3)) </span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line">&gt;(cdr &apos;(1 2 3))</span><br><span class="line">  (2 3)</span><br><span class="line"></span><br><span class="line">&gt;(cdr (list 1 2 3))</span><br><span class="line">  (2 3)</span><br><span class="line">&gt;(cdr &apos;(list 1 2 3))</span><br><span class="line">  (1 2 3)</span><br><span class="line"> </span><br><span class="line">&gt;(car (cdr ‘(a b c))) </span><br><span class="line">   b</span><br></pre></td></tr></table></figure><p><strong>2.3.5</strong> <font color="red"> cons </font>的用法    </p><p>​    cons( x y ) 要求 y 是一个表，它返回一个由 x 和 y 连接的新表 请注意，我们要求 y 必须是一个表，但我们并没有要求 x 一定要是一个 原子或者是表.   </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;(<span class="name">cons</span>  <span class="number">1</span> (<span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">  报错             //一定记住，一旦没有引用，Lisp就会尝试 计算这个表达式，显然它计算不出来，于是报错</span><br><span class="line">&gt;(<span class="name">cons</span> '<span class="number">1</span> '<span class="number">2</span>) </span><br><span class="line">  (<span class="number">1</span> <span class="number">2</span>)</span><br><span class="line">&gt;(<span class="name">cons</span> '<span class="number">1</span> '(<span class="number">1</span> <span class="number">2</span>))</span><br><span class="line">  (<span class="number">1</span> <span class="number">1</span> <span class="number">2</span>)</span><br><span class="line">&gt;(<span class="name">cons</span> '(<span class="number">2</span> <span class="number">3</span>) '<span class="number">1</span>)</span><br><span class="line">  (<span class="number">2</span> <span class="number">3</span> <span class="number">1</span>)</span><br><span class="line">&gt;()</span><br></pre></td></tr></table></figure><p><strong>2.3.6</strong> <font color="red"> cond</font>的用法</p><p>​    cond的基本形式是  <code>(cond (p1 e1) (p2 e2) ... (pn en))</code></p><p>​    其中 p1 到 pn 是条件，e1到 en 是结果，cond 会依次对p1到pn进行求值，直到找到第一个值为<code>原子t</code> 的p           ，那么把他对应的 e 返回.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">cond</span></span><br><span class="line">    ( (<span class="name">eq</span> 'a 'b) 'first)        //p1为NIL</span><br><span class="line">        ((<span class="name">atom</span> 'a) 'second)       //p2为T</span><br><span class="line">((<span class="name">&gt;</span> <span class="number">4</span> <span class="number">6</span>) (<span class="name">+</span> (<span class="name">*</span> <span class="number">2</span> <span class="number">3</span>) <span class="number">7</span>))   //p3为NIL</span><br><span class="line">  ) </span><br><span class="line">        </span><br><span class="line">  second</span><br></pre></td></tr></table></figure><hr><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p>​    接下来是<em>变量和赋值</em></p><pre><code>**3.1**</code></pre><p>​    首先可以用 <font color="red">let</font> 进行<code>局部变量</code>的定义</p><p>​    let的一般形式是  <strong>let(  ( (a 1 )(b 2)(c 3))    (exps1)(exps2)…(expsn))</strong></p><p>​    仔细看并不复杂，括号内分为两部分</p><p>​    第一部分是多个赋值括号，全部执行;</p><p>​     第二部分是多个处理语句，但只执行最后一个即expsn</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">let</span>((<span class="name">a</span> <span class="number">1</span>) (<span class="name">b</span> <span class="number">2</span>) (<span class="name">c</span> <span class="number">3</span> ) ) (<span class="name">-</span> <span class="number">2</span> <span class="number">3</span>)(<span class="name">+</span> <span class="number">23</span> <span class="number">3</span>)(<span class="name">+</span> a <span class="number">23323</span>))</span><br><span class="line"><span class="number">23324</span></span><br></pre></td></tr></table></figure><pre><code>**3.2**</code></pre><p>​    可以用<font color="red">defparameter</font>和<font color="red">defconstant</font>定义全局变量和全局常数</p><p>​    请注意，这里的 var左右的<em>，是完全可以不加的，但习惯上全局变量的名字以 </em> 开始和结束，习惯而已</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;(defparameter *<span class="built_in">var</span>* <span class="number">13</span>)                //(defparameter <span class="built_in">var</span> <span class="number">13</span>) 也完全正确</span><br><span class="line">*<span class="built_in">var</span>*                    // *<span class="built_in">var</span>* 值为<span class="number">12</span></span><br><span class="line">&gt;(defparameter *<span class="built_in">var1</span>*(+ *<span class="built_in">var</span>* <span class="number">11.1</span>))</span><br><span class="line">*VAR1*</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过例子了解lisp的特点&lt;/p&gt;
    
    </summary>
    
    
      <category term="lisp" scheme="httpsp://yoursite.com/tags/lisp/"/>
    
  </entry>
  
  <entry>
    <title>机器学习日记_2</title>
    <link href="httpsp://yoursite.com/2018/11/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0(%E4%BA%8C)/"/>
    <id>httpsp://yoursite.com/2018/11/25/机器学习日记(二)/</id>
    <published>2018-11-25T01:56:58.841Z</published>
    <updated>2018-11-28T16:26:09.415Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg" alt=""></p><a id="more"></a><hr><h1 id="第一个机器学习算法"><a href="#第一个机器学习算法" class="headerlink" title="第一个机器学习算法"></a>第一个机器学习算法</h1><font color="blue" size="5">Linear regression with one variable</font>【一元线性回归】<br><br><br><br>什么是一元变量线性回归？<br><br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回归分析只涉及到两个变量的，称一元回归分析。一元回归的主要任务是从两个相关变量中的一个变量去估计另一个变量，被估计的变量，称因变量，可设为<span class="keyword">Y</span>；估计出的变量，称自变量，设为<span class="keyword">X</span>。回归分析就是要找出一个数学模型<span class="keyword">Y</span>=f(<span class="keyword">X</span>)，使得从<span class="keyword">X</span>估计<span class="keyword">Y</span>可以用一个函数式去计算。当<span class="keyword">Y</span>=f(<span class="keyword">X</span>)的形式是一个直线方程时，称为一元线性回归。这个方程一般可表示为<span class="keyword">Y</span>=A+BX。根据最小平方法或其他方法，可以从样本数据确定常数项A与回归系数B的值。A、B确定后，有一个<span class="keyword">X</span>的观测值，就可得到一个<span class="keyword">Y</span>的估计值。回归方程是否可靠，估计的误差有多大，都还应经过显著性检验和误差计算。有无显著的相关关系以及样本的大小等等，是影响回归方程可靠性的因素</span><br></pre></td></tr></table></figure><br><br><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fxk18qppzkj30px0ds4hf.jpg" alt="1543107453608"><br><br><br><br>举个例子来说，上面的坐标图，横轴代表房屋的面积，纵轴表示可以卖到的价钱，小王手里有一个1250单位大小的房子，他想知道这间房子可以卖多少钱？<br><br>___<br><br>为了解决这个问题，我们<code>拟合</code>这些数据，就是把这些离散的数据近似成为一条连续的曲线，但是你可以看到，我们通过直线拟合或二次函数拟合，这两种情况下的结果显然是不同的，那么，我们该怎样选择呢？<br><br>此时此刻，我们正在解决一个<code>Regression problem</code>(回归问题)，意思就是我们想预测连续的数据输出，也就是价格。<br><br><br><img src="C:\Users\35.32\AppData\Roaming\Typora\typora-user-images\1543333273119.png" alt="1543333273119"><br><br><img src="C:\Users\35.32\AppData\Roaming\Typora\typora-user-images\1543333559831.png" alt="1543333559831"><br><br><font color="red"> 解释: </font><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">其实很简单</span><br><span class="line"></span><br><span class="line">traing <span class="keyword">set</span> : 是训练集，也就是你为了训练机器学习，而传入的样本数据集合</span><br><span class="line">m <span class="comment">:</span> 是数据的个数</span><br><span class="line">x ：是输入</span><br><span class="line">y ：是输出  //他俩右上角其实是个<span class="comment">index</span>索引而已，不是啥数学运算</span><br><span class="line">hypothesis ： 假设函数 // 就是我们假设存在一个函数<span class="comment">h</span>，输入个<span class="comment">x</span>，输出个<span class="comment">y</span></span><br><span class="line">Hθ(x) = θ1X <span class="comment">+</span> θ<span class="comment">0 :</span> 是假设的函数，是个看起来吓人实际上就是个线性函数，θ<span class="comment">1</span>是斜率，θ<span class="comment">0</span>是截距</span><br></pre></td></tr></table></figure><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="httpsp://yoursite.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习日记_1</title>
    <link href="httpsp://yoursite.com/2018/11/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0(%E4%B8%80)/"/>
    <id>httpsp://yoursite.com/2018/11/24/机器学习日记(一)/</id>
    <published>2018-11-24T15:26:33.255Z</published>
    <updated>2018-11-27T15:39:39.300Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx1.sinaimg.cn/mw690/74cae32aly1fxbe1216zoj20u011ihdu.jpg" alt=""></p><a id="more"></a><p><strong>机器学习的定义:</strong> </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tom Mitchell (<span class="number">1998</span>) Well-posed Learning Problem:</span><br><span class="line">A computer program <span class="keyword">is</span> said <span class="keyword">to</span> learn <span class="keyword">from</span> experience E <span class="keyword">with</span> respect <span class="keyword">to</span> <span class="keyword">some</span> task T <span class="keyword">and</span> <span class="keyword">some</span> performance measure P, <span class="keyword">if</span> <span class="keyword">its</span> performance <span class="keyword">on</span> T, <span class="keyword">as</span> measured <span class="keyword">by</span> P, improves <span class="keyword">with</span> experience E.</span><br></pre></td></tr></table></figure><p><code>一个计算机程序从经验E中学习一些任务T和一些性能度量P，它在T上的性能，用P度量，将随着经验E的提高而提高。</code></p><p>比如我问你一个问题：</p><p>Suppose your email program watches which emails you do or do not mark as spam, and based on that learns how to better filter spam.  What is the task T in this setting? </p><p><code>假设您的电子邮件程序监视您标记哪些电子邮件为垃圾邮件，并在此基础上学习如何更好地过滤垃圾邮件。在这种情况下，任务T是什么?</code></p><p>​     A.  Classifying emails as spam or not spam. </p><p>​     B. Watching you label emails as spam or not spam. </p><p>​     C. The number (or fraction) of emails correctly classified as spam/not spam. </p><p>​     D. None of the above—this is not a machine learning problem.</p><p>答案是<code>A</code></p><p>A选项意思是<code>判别一封邮件是不是垃圾邮件</code>，这对应着我们的我们的<code>任务T</code></p><p>B选项意思是<code>看你把电子邮件标记为垃圾邮件或非垃圾邮件</code>这对应着<code>经验E</code></p><p>C选项意思是 <code>正确分类为垃圾邮件/非垃圾邮件的邮件数量(或比例)</code>显然这是效率<code>P</code></p><p>D选项意思是<code>以上全错</code></p><hr><h2 id="机器学习主要算法分类"><a href="#机器学习主要算法分类" class="headerlink" title="机器学习主要算法分类"></a>机器学习主要算法分类</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Machine learning algorithms:</span><br><span class="line"></span><br><span class="line">-Supervised learning    <span class="params">(监督学习)</span></span><br><span class="line"></span><br><span class="line">-Unsupervised learning  <span class="params">(无监督学习)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Reinforcement learning, recommender systems<span class="params">(强化学习，推荐系统)</span></span><br><span class="line">Also talk about: Practical advice for applying learning algorithms<span class="params">(实用的应用学习算法建议)</span></span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">监督学习算法:</span></span><br><span class="line">    我们给定了一个数据集，里面都是正确的数据，supervisedlearning的目的就是，依赖这些有限的数据，给出更多的正确数据，从而完成我们估价的目的。</span><br></pre></td></tr></table></figure><p>例如: 给了过去十年的所有肾病的病人的肾的大小，然后预测某一个大小的肾患病的几率是多大<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">无监督学习算法:</span></span><br><span class="line">    无监督学习是指从不需要人为注释的样本的分布中抽取信息</span><br></pre></td></tr></table></figure></p><p>例如: 噪音分离</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/74cae32aly1fxbe1216zoj20u011ihdu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="httpsp://yoursite.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="httpsp://yoursite.com/2018/11/11/Re-NFA-DFA-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%BB%A3%E7%A0%81/"/>
    <id>httpsp://yoursite.com/2018/11/11/Re-NFA-DFA-词法分析器代码/</id>
    <published>2018-11-11T08:44:11.810Z</published>
    <updated>2018-11-25T00:51:09.542Z</updated>
    
    <content type="html"><![CDATA[<p>Re-&gt;NFA-&gt;DFA-&gt;词法分析器代码</p><p>thompson算法</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基于对re结构做优化(数学归纳法)</span><br><span class="line"> <span class="number">1.</span>基本的re直接构造</span><br><span class="line"> <span class="number">2.</span>复合的re递归构造</span><br><span class="line">递归算法，容易实现</span><br></pre></td></tr></table></figure><p>子集构造算法</p><p>hopcroft最小优化算法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Re-&amp;gt;NFA-&amp;gt;DFA-&amp;gt;词法分析器代码&lt;/p&gt;
&lt;p&gt;thompson算法&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
      <category term="complier" scheme="httpsp://yoursite.com/tags/complier/"/>
    
  </entry>
  
  <entry>
    <title>特殊的dp</title>
    <link href="httpsp://yoursite.com/2018/11/10/%E7%89%B9%E6%AE%8A%E7%9A%84dp/"/>
    <id>httpsp://yoursite.com/2018/11/10/特殊的dp/</id>
    <published>2018-11-10T08:24:47.165Z</published>
    <updated>2018-11-10T08:25:44.349Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>已经学过了动归的我，面对一些复杂dp题目，却仍然感觉到，无从下手。</p><p>我必须深刻知道，我所理解的只是皮毛罢了。</p><p>针对于这个题目来讲 #<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1421" target="_blank" rel="noopener">搬寝室</a></p><p>我被弄得很糊涂，自己只是掌握了一个空架子，几句话，几行代码，而真正的思想，可以说是根本没有触及到的。</p><p>分析这个问题，题目给定了<code>n个物品的重量</code>,并提出了这样一个要求</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给你k次<span class="comment">(k正确)</span>，你一次挑选两个，一次挑选两个，一共挑k次。</span><br><span class="line">要求最后，你挑的俩数差的绝对值，最后一共k个绝对值是吧，要求这些绝对值的总和最小。</span><br></pre></td></tr></table></figure><p>怎么办？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每次的抉择，必定会对以后的抉择产生影响</span><br></pre></td></tr></table></figure><p>如果是动态规划，要怎样想呢？</p><ol><li>把所有物品排序</li><li>只选一对，从1到n的最小dp组构建出来</li><li>选两对，建立在上一步的基础上, 帅气的一个转移，我是选择这对呢，还是不选呢</li><li>以此类推</li></ol><p>这个思路的梳理，真的使人头痛，真的好菜，多做吧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a[maxn];me(dp,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            </span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>); <span class="comment">//sort(a+1,a+n+1)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>*i&lt;=j)</span><br><span class="line">                    dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j<span class="number">-2</span>]+(a[j]-a[j<span class="number">-1</span>])*(a[j]-a[j<span class="number">-1</span>]));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j]=inf;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[k][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱到无力。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="httpsp://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>仓库</title>
    <link href="httpsp://yoursite.com/2018/11/10/%E4%BB%93%E5%BA%93/"/>
    <id>httpsp://yoursite.com/2018/11/10/仓库/</id>
    <published>2018-11-10T08:00:32.955Z</published>
    <updated>2018-12-03T12:28:52.442Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> maxn=<span class="number">2e3</span>+<span class="number">5</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> <span class="built_in">mod</span>=<span class="number">1e9</span>+<span class="number">7</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> inf=<span class="number">1e9</span><span class="comment">;</span></span><br><span class="line"><span class="meta">#define me(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line">typedef long long ll<span class="comment">;</span></span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line"><span class="built_in">int</span> dp[maxn][maxn]<span class="comment">;</span></span><br></pre></td></tr></table></figure><hr><p>LCA离线</p><p>LCA: Lowest Common Ancestors)即最近公共祖先,是指在有根树中,找出某两个结点u和v最近的公共祖先</p><p><a href="https://blog.csdn.net/lw277232240/article/details/77017517" target="_blank" rel="noopener">演练及解释</a> </p><p>我们以  <font color="blue">poj1470Closest Common Ancestors </font>为例，结合上面的解释，进行代码展示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">905</span>;</span><br><span class="line"><span class="keyword">int</span> father[MAXN],ancestor[MAXN];</span><br><span class="line"><span class="keyword">bool</span> visit[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">map</span>[MAXN];<span class="comment">//save the tree</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; query[MAXN];<span class="comment">//save the query</span></span><br><span class="line"><span class="keyword">int</span> n,t,root;</span><br><span class="line"><span class="keyword">bool</span> indegree[MAXN];<span class="comment">//the indegree to find the root</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//路径压缩</span></span><br><span class="line">    <span class="keyword">if</span>(father[v]==v)<span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">return</span> father[v]=getfather(father[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aunion</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//连接两个树</span></span><br><span class="line">    <span class="keyword">int</span> fv=getfather(v),fu=getfather(u);</span><br><span class="line">    father[fv]=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">map</span>[id].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> son=<span class="built_in">map</span>[id][i];</span><br><span class="line">        LCA(son);</span><br><span class="line">        aunion(id,son);</span><br><span class="line">    &#125;</span><br><span class="line">    visit[id]=<span class="number">1</span>;</span><br><span class="line">    len=query[id].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> son=query[id][i];</span><br><span class="line">        <span class="keyword">if</span>(visit[son])</span><br><span class="line">            ans[father[getfather(son)]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">map</span>[i].clear();</span><br><span class="line">        query[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="built_in">memset</span>(indegree,<span class="number">0</span>,<span class="keyword">sizeof</span>(indegree));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)father[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:(%d)"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;y;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">            indegree[z]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">map</span>[x].push_back(z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;<span class="comment">//this method of the init is really clever</span></span><br><span class="line">        <span class="keyword">while</span>(getchar()!=<span class="string">'('</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        query[x].push_back(y);</span><br><span class="line">        query[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">')'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!indegree[i])root=i;<span class="comment">//find the root;warning:the 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span>,i,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        init();</span><br><span class="line">        LCA(root);</span><br><span class="line">        output();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 迪杰斯特拉算法 ://我这相当于又复习一遍，有什么用呢？我不知道，只是感觉很有意思//</p><p>我劝我自己先把这个视频看一遍再分析—-<a href="https://www.youtube.com/watch?v=RFEqcXSo_Zg" target="_blank" rel="noopener">迪杰斯特拉演示</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt;pii;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dist[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cost[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> graph[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> price[maxn][maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt;&gt;Q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dist[i]=inf;</span><br><span class="line">cost[i]=inf;</span><br><span class="line">&#125;</span><br><span class="line">dist[start]=<span class="number">0</span>;</span><br><span class="line">cost[start]=<span class="number">0</span>;</span><br><span class="line">Q.push(make_pair(<span class="number">0</span>,start));</span><br><span class="line"><span class="comment">//循环开始 </span></span><br><span class="line"><span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=Q.top().second;  </span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[v]&gt;dist[u]+graph[v][u] ||(dist[v]==dist[u]+graph[v][u] &amp;&amp; cost[v]&gt;cost[u]+price[v][u]) )&#123;</span><br><span class="line">dist[v]=dist[u]+graph[v][u];</span><br><span class="line">    cost[v]=cost[u]+price[v][u];</span><br><span class="line">    Q.push(make_pair(dist[v],v)); <span class="comment">//可知道，一次循环可能不止向Q内加入一对数据，但是优先队列总是能够让找到顶部那个距离属性最小的 </span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dist[v]==dist[u]+graph[v][u] &amp;&amp; cost[v]&gt;cost[u]+price[v][u])&#123;</span><br><span class="line">cost[v]=cost[u]+price[v][u];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,a,b,c,d;</span><br><span class="line"><span class="keyword">int</span> begin , end;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)&amp;&amp; n)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">graph[i][j] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line"><span class="keyword">if</span> (graph[a][b] == inf ||   (graph[a][b] != inf &amp;&amp; (graph[a][b] &gt; c || (graph[a][b] == c &amp;&amp; price[a][b] &gt; d))))&#123;</span><br><span class="line">price[a][b] = d;</span><br><span class="line">price[b][a] = d;</span><br><span class="line">graph[a][b] = c;</span><br><span class="line">graph[b][a] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;begin,&amp;end);</span><br><span class="line">Dijkstra(begin);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, dist[end], cost[end]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="httpsp://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>三类背包</title>
    <link href="httpsp://yoursite.com/2018/11/09/%E4%B8%89%E7%B1%BB%E8%83%8C%E5%8C%85/"/>
    <id>httpsp://yoursite.com/2018/11/09/三类背包/</id>
    <published>2018-11-09T15:40:06.650Z</published>
    <updated>2018-11-26T16:25:32.030Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 01 背包，很直接很简单</span></span><br><span class="line"><span class="comment">//背包容量一定，一堆物品的 重量--价值 也知道了， 一个一个看，我是选还是不选呢？</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)  <span class="comment">//每次 考虑一个商品的时候，咱都要从 m 再开始 </span></span><br><span class="line">         <span class="keyword">if</span>(j&gt;=wet[i])</span><br><span class="line">         dp[j]=max(dp[j-wet[i]]+val[i],dp[j]);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[m];     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完全背包，你去看看01背包，完全背包和那个的唯一差别是 这里的物品是无限的 </span></span><br><span class="line"><span class="comment">// 这个完全背包 写起来 还是比 01背包简单点 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=wet[i];j&lt;=m;j++)</span><br><span class="line">      dp[j]=max( dp[j-wet[i]]+val[i] , dp[j]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多重背包 是啥呢， 就是 其他和01 背包一样，就是这物品数量，既不是一个，也不是无限个，是 不定数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">int</span> amt[n+<span class="number">5</span>];<span class="comment">//记录 每个物品的数量 </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i]&gt;&gt;amt[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;amt[i];j++) <span class="comment">//商品数目</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k=m;k&gt;=wet[i];k--)</span><br><span class="line">            dp[k]=max(dp[k-wet[i]]+val[i],dp[k]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m];     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>恶心</title>
    <link href="httpsp://yoursite.com/2018/11/09/%E6%81%B6%E5%BF%83/"/>
    <id>httpsp://yoursite.com/2018/11/09/恶心/</id>
    <published>2018-11-09T14:24:00.491Z</published>
    <updated>2018-11-09T14:24:00.495Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>这清楚地被人看到，A先生独自一个人在屋顶打转，他低着头看着自己的脚尖，他越走越快，地上被他用皮鞋明显地划出了一个圆，A先生甚至觉得，自己也跟不上自己。</p><p>A先生是一个陀螺。</p><p>我想解救A先生出来，我想让这个不停打转的A先生，停下来。</p><p>您可能会问，问我为什么，劝我不要这样做。</p><p>您对我讲，这个世界上有一条道理，就是千万不要碰一个，原地打转的陀螺。</p><p>但我要这样做，因为，我也是个陀螺。</p><p>只有我旋转到一个特定的角度里，我才用眼睛看见，和我一样打转的A先生。</p><p>“你好啊! “我边旋转边向A先生打招呼。</p><p>但这位A先生，似乎不情愿我这样做，我见他低着头，脚步规整。</p><p>于是我加速旋转，这下子啊，A先生的轮廓，就完完整整地呈现在了，我的眼珠里面。</p><p>“你为什么旋转呢?”我问A先生。</p><p>“为什么?”他轻声说。</p><p>“什么为什么?” 我回答他。</p><p>“为什么你看得见我?”  他的脸扭到了一团  “我却看不见自己?”</p><p>我笑着对他说，”哈哈，A先生，我们怎么可能看的到自己呢?” </p><p>”你” 他接着说道 “也是我的剥夺者之一，你属于，地狱，对，你是我的地狱，你看到我，但我却看不到我自己，我将存在于被存在之中，你无疑，是我的恶魔，我并不能时时刻刻都认识到这处，我已经受损。“ </p><p>听到这里，我立即恶心起来。</p><p>”先生！我怎么可能属于，地狱，这种词汇？ 您如果想看清自己，您想这样做的话，您完全不必旋转，您必须停下来!”</p><p>“ 那你呢? “ 他问我。</p><p>A先生是个陀螺，旋转的陀螺。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>基础:从数独看Dfs</title>
    <link href="httpsp://yoursite.com/2018/11/08/%E5%9F%BA%E7%A1%80%E4%BB%8E%E6%95%B0%E7%8B%AC%E7%9C%8BDfs/"/>
    <id>httpsp://yoursite.com/2018/11/08/基础从数独看Dfs/</id>
    <published>2018-11-08T14:12:12.396Z</published>
    <updated>2018-11-08T14:16:19.732Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>题目大意是:<br>玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个同色九宫内的数字均含1-9，不重复，输入如</p><p><code>005300000800000020070010500400005300010070006003200080060500009004000030000009700</code></p><p>要求输出</p><p><code>145327698839654127672918543496185372218473956753296481367542819984761235521839764</code></p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>1： 九宫格的规则我们直到，同行，同列，同宫，必须是不以一样的，所以筛选方向就有三个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_row_col_exist</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123; <span class="comment">//筛选同行同列，看看有没有一样的，否则返回1成功</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[row][i] == num)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[i][col] == num)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_part</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123;<span class="comment">//筛选同宫，看看传入的 num 在不在(row,col)所处的宫里面，不在的话返回1</span></span><br><span class="line"><span class="keyword">int</span> partx = (row<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> party = (col<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x= (partx)*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = party*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">    <span class="built_in">map</span>[x][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x][y+<span class="number">2</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y+<span class="number">2</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y+<span class="number">2</span>] == num||</span><br><span class="line">)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，基本上，上面就解决了我们过滤的问题，接下里是<code>Dfs</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x.<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(row &gt; <span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[x][y] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(is_row_col_exist(x,y,i) &amp;&amp;  check_part(x,y,i) ) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y]=i;</span><br><span class="line">Dfs(x+(y+<span class="number">1</span>)/<span class="number">10</span>,(y+<span class="number">1</span>)%<span class="number">10</span>);</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Dfs(x+(y+<span class="number">1</span>)/<span class="number">10</span>,(y+<span class="number">1</span>)%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>第一问题·</em>： <strong>搜索搜索，从哪里开始呢？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是的，我们首先要找到一个入口，这个入口一般是什么？</span><br><span class="line">是矩阵的最边缘，是一个可以有能力通过循环跑遍所有情况的位置。</span><br></pre></td></tr></table></figure><p><em>第二问题</em>： <strong>回溯的必要性</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">倘若没有回溯条件，必定爆栈</span><br><span class="line">而往往回溯条件不是那么的容易找到<span class="comment">(至少对于我来讲是这样的)</span></span><br><span class="line">这个数独题存在：    Dfs<span class="comment">(x+(y+1)</span>/<span class="number">10</span>,<span class="comment">(y+1)</span><span class="meta">%</span><span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">一号位参数 和 二号位参数 是存在递增的，但我们的<span class="number">9</span>X<span class="number">9</span>,所以条件就是： 行数不能超过了最大<span class="comment">(我觉得不容易找到)</span></span><br></pre></td></tr></table></figure><p><em>第三问题</em> ： <strong>dfs的基本形状</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dfs&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*跳出条件&#123;</span></span><br><span class="line"><span class="comment">        成功了</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    终止条件&#123;</span><br><span class="line">       不用再进行了，已经失败了</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">   循环&#123; </span><br><span class="line">    是符合条件的&#123;</span><br><span class="line">        信息改变</span><br><span class="line">        dfs(下一位) <span class="comment">//向深处进行</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;   </span><br><span class="line">   信息恢复   <span class="comment">//为什么呢？？ 因为这里的信息受到改变，且肯定是不满足条件的，那么为了使接下来的程序顺利执行，必须信息恢复，否则这个信息的影响会贯穿下去。这会让深度搜索进行不下去。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//存储数字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_row_col_repeat</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123;<span class="comment">//判断行列是否重复</span></span><br><span class="line">    <span class="comment">//判断行是否重复</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[row][i]==num) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//行重复，返回0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断列是否重复</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i][col]==num) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//列重复，返回0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//行列不重复，返回1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_row_range</span><span class="params">(<span class="keyword">int</span> row)</span></span>&#123;<span class="comment">//判断行的范围</span></span><br><span class="line">    <span class="keyword">if</span> (row&gt;=<span class="number">1</span> &amp;&amp; row&lt;=<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(row&gt;=<span class="number">4</span>&amp;&amp;row&lt;=<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_col_range</span><span class="params">(<span class="keyword">int</span> col)</span></span>&#123;<span class="comment">//判断列的范围</span></span><br><span class="line">    <span class="keyword">if</span>(col&gt;=<span class="number">1</span>&amp;&amp;col&lt;=<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (col&gt;=<span class="number">4</span>&amp;&amp;col&lt;=<span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_block_repeat</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123;<span class="comment">//判断同色九宫格是否重复</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    x=check_row_range(row);</span><br><span class="line">    y=check_col_range(col);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=x+<span class="number">2</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=y;j&lt;=y+<span class="number">2</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j]==num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//重复，返回0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//不重复，返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (row&gt;<span class="number">9</span>) &#123;<span class="comment">//如果行超出9行，直接输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a[row][col]==<span class="number">0</span>) &#123;<span class="comment">//如果没有填数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_row_col_repeat(row, col, i) &amp;&amp; is_block_repeat(row, col, i)) &#123;<span class="comment">//如果行列九宫格不重复</span></span><br><span class="line">                a[row][col]=i;<span class="comment">//填充数字</span></span><br><span class="line">                dfs(row+(col+<span class="number">1</span>)/<span class="number">10</span>, (col+<span class="number">1</span>)%<span class="number">10</span>);<span class="comment">//继续搜索</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[row][col]=<span class="number">0</span>;<span class="comment">//重新置为0</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果已经填了，继续搜索</span></span><br><span class="line">        dfs(row+(col+<span class="number">1</span>)/<span class="number">10</span>, (col+<span class="number">1</span>)%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;<span class="comment">//输入字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ss=s.at(j<span class="number">-1</span>);<span class="comment">//取s的第j-1的字符</span></span><br><span class="line">            a[i][j]=ss-<span class="string">'0'</span>;<span class="comment">//将ss转化为整数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Berlekamp-Massey算法</title>
    <link href="httpsp://yoursite.com/2018/11/08/Berlekamp-Massey%E7%AE%97%E6%B3%95/"/>
    <id>httpsp://yoursite.com/2018/11/08/Berlekamp-Massey算法/</id>
    <published>2018-11-07T16:17:23.132Z</published>
    <updated>2018-11-07T16:17:23.134Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>坑在这</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速幂&amp;矩阵快速幂</title>
    <link href="httpsp://yoursite.com/2018/11/07/%E5%BF%AB%E9%80%9F%E5%B9%82&amp;%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>httpsp://yoursite.com/2018/11/07/快速幂&amp;矩阵快速幂/</id>
    <published>2018-11-07T15:42:47.605Z</published>
    <updated>2018-11-08T04:49:04.014Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>计算关于: p^n 问题，带入实例最易理解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">lli <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n )</span></span>&#123;  <span class="comment">//x^</span></span><br><span class="line">    lli snowball = x;</span><br><span class="line">lli ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans *=snowball;</span><br><span class="line">&#125;</span><br><span class="line">snowball*=snowball;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>矩阵快速幂是快速幂在矩阵连乘上的应用，快速幂是种思想，而矩阵快速幂指某算法在它内部可能有一部分是矩阵连乘，然后使用的了快速幂的模板，以此类推，我们可以有很多种的快速幂了。</p><p>也就是上面的代码。</p><p>针对这个问题</p><p><a href="http://poj.org/problem?id=3070" target="_blank" rel="noopener">Poj——-Fibonacci</a></p><p>我觉得这个题的精髓不在快速幂，而在从斐波那契数列 到 矩阵连乘的转化。四个字:  <strong>化加为乘</strong> ，使得我们能用快速幂。</p><p>图示如下：</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwzy5ggbiqj31hc140jw0.jpg" alt=""></p><p>存个模板先</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">multi</span><span class="params">(node s, node b)</span></span>&#123;</span><br><span class="line">    node temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">temp.a[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)&#123;</span><br><span class="line">temp.a[i][j]=(temp.a[i][j]+(s.a[i][k]*b.a[k][j]))%<span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">martix_quick</span><span class="params">(node snowball,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    snowball.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    node b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            b.a[i][j]=(i==j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">b=multi(b,snowball);</span><br><span class="line">&#125;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">snowball=multi(snowball,snowball);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b.a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/cmmdc/p/6936196.html" target="_blank" rel="noopener">解释好文</a></p><p><a href="https://paste.ubuntu.com/p/Fqkr3xV5NS/" target="_blank" rel="noopener">poj我的码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Kmp字符串匹配算法</title>
    <link href="httpsp://yoursite.com/2018/11/05/Kmp/"/>
    <id>httpsp://yoursite.com/2018/11/05/Kmp/</id>
    <published>2018-11-05T13:06:10.649Z</published>
    <updated>2018-11-05T13:11:00.091Z</updated>
    
    <content type="html"><![CDATA[<p>无参考意义</p><a id="more"></a><p>S: 等待被匹配的字符串     <code>abcabcabccabcd</code></p><p>C: 匹配字符串                    <code>abcc</code></p><hr><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>next 数组下标从<code>0</code>开始，<code>next[0] = -1</code>,</p><p>下标  1，2，3，4 · · · 代表:  <code>C这个字符串，长度到1,2,3,4··· 位置时候，我们究竟能够能找到多长的对称前后缀</code></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">比如对于这个<span class="keyword">next</span>:</span><br><span class="line"><span class="keyword">next</span>[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line"><span class="keyword">next</span>[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">next</span>[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">next</span>[<span class="number">3</span>] = <span class="number">0</span> </span><br><span class="line"><span class="keyword">next</span>[<span class="number">4</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>代码实现：(不理解的时候，用笔写出来)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;      </span><br><span class="line"><span class="keyword">while</span>(j&lt;c_len)&#123;                        <span class="meta">#j代表着我们已经完成了几个</span></span><br><span class="line"><span class="keyword">if</span>( k==<span class="number">-1</span> || next[k]==next[j])&#123;   </span><br><span class="line">k+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">k=next[k];    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><hr><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int Kmp(char <span class="number">*c</span>,char *s)&#123;</span><br><span class="line">int <span class="attribute">i</span>=0;</span><br><span class="line">int <span class="attribute">j</span>=0;</span><br><span class="line">int <span class="attribute">sum</span>=0;</span><br><span class="line">get_next();</span><br><span class="line"><span class="keyword">while</span>(i &lt; s_len)&#123;  #大的串，不要越界了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="attribute">j</span>==-1 || c[j]==s[i])&#123;  #核心</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="attribute">j</span>=next[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="attribute">j</span>==c_len)&#123;  #匹配完成了啊，就记录一个，j重新开始</span><br><span class="line">sum++;</span><br><span class="line">    <span class="attribute">j</span>=0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxn 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>  c[maxn];</span><br><span class="line"><span class="keyword">char</span>  s[maxn];</span><br><span class="line"><span class="keyword">int</span>   next[maxn];</span><br><span class="line"><span class="keyword">int</span>  c_len,s_len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;c_len)&#123;</span><br><span class="line"><span class="keyword">if</span>( k==<span class="number">-1</span> || next[k]==next[j])&#123;</span><br><span class="line">k+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">k=next[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kmp</span><span class="params">(<span class="keyword">char</span> *c,<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">get_next();</span><br><span class="line"><span class="keyword">while</span>(i &lt; s_len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">-1</span> || c[j]==s[i])&#123;</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==c_len)&#123;</span><br><span class="line">sum++;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入待比较字符串:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入比较字符串:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">c_len = <span class="built_in">strlen</span>(c);<span class="comment">//sizeof(c)/sizeof(char);</span></span><br><span class="line">s_len = <span class="built_in">strlen</span>(s);<span class="comment">//sizeof(s)/sizeof(char);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,Kmp(c,s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无参考意义&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>红龙</title>
    <link href="httpsp://yoursite.com/2018/11/05/%E7%BA%A2%E9%BE%99/"/>
    <id>httpsp://yoursite.com/2018/11/05/红龙/</id>
    <published>2018-11-04T16:23:49.354Z</published>
    <updated>2018-11-04T16:29:43.125Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>每当我认为，自己清醒的认识到，它的起因，经过，和结果时，我却无法集中注意力，我无权，站在这样一个高地。</p><p>我审视着它，我看到它吟唱出刺耳的密密麻麻的语句，我感觉得到它们融化，汇合，变为正常，变为我身边的椅子，水杯，台灯，我眼前的手掌的毛孔。</p><p>亲爱的，我不得不这样讲，我已由它组成，我不知该怎样做，因为，我已由它组成。</p><p>它是红龙，善良而邪恶的无形体现，黑色和白色融合，于我体内而逃于我身，赐予我悲伤和快乐的一切情绪，施加于我痛苦和狂热的次次混乱。</p><p>我望着红龙。</p><p>请你告诉我，为什么，我目光下的极限，仅仅是一个可笑无比的紫色的巨大矛盾体。</p><p>红龙，你是诱因，你早已彻彻底底的，屈服于这片土地和星辰，在这使人厌恶的距离里，无休止地接受我的祈祷。</p><p>它将会绽放出鲜艳的赤红色的花，它紧闭的嘴中必将发出人类一样的叫声，我已感受的到，红龙之下一切的复苏，</p><p>切断一切灌输后的大地，将会彻底区分于你的肌肤。</p><p>我必定要杀死它。</p><p>红龙。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>有限状态自动机</title>
    <link href="httpsp://yoursite.com/2018/11/04/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>httpsp://yoursite.com/2018/11/04/有限状态自动机/</id>
    <published>2018-11-04T08:59:36.185Z</published>
    <updated>2018-11-04T10:17:32.002Z</updated>
    
    <content type="html"><![CDATA[<p>总结</p><a id="more"></a><p>举例子如图:</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww66hr1b9j30vz0mytbc.jpg" alt=""></p><p>如图 <code>(q0,a)-&gt;q1,(q0,b)-&gt;q0</code> 这就叫做状态转移函数，咋解释呢？ </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">黄色圆形代表一个一个状态，内部数字就是状态对应的编号</span><br><span class="line">q0 接受 <span class="selector-tag">a</span> 到达 q1 </span><br><span class="line">q0 接受 <span class="selector-tag">b</span> 到达 q0</span><br><span class="line">. . .</span><br></pre></td></tr></table></figure><p>然后就像你看到的，把这些状态(<code>小括号包括住的</code>)积攒在一起，就是我们的图1的 <code>S</code>也叫<code>状态集</code></p><p>这些  <code>从某个状态到达另外一个状态</code> 的过程，本身可以称作一个函数，这些函数的集合叫做，转移函数集合。</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww682bj7lj30w00ka40t.jpg" alt=""></p><p><code>有限状态自动机：</code></p><ol><li>非确定有限状态自动机(NFA)</li><li>确定的有限状态自动机(DFA)</li></ol><p>我们第一个图就是个确定的，来看看一个不确定的:</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww6kumrtij30u00n5dhr.jpg" alt=""></p><p>这个为什么叫不确定的状态自动机？  你看看， 加入我们给 <code>q0 传递 a</code>  ,你能知道 q0到q0，还是q0到q1？？ 你是不确定的，所以含有这种构造的自动机就叫<code>NFA</code></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>问？在NFA中，我们在初始状态为 <code>q0</code> 时，传入 字符串s=<code>&quot;a&quot;</code>,请问对于NFA，它可以接受吗？</p><p>答：可以，尽管q0 有可能接受 <code>a</code>后还是状态本身，但只要有一条路可转移走，NFA在经过<code>遍历</code> 后，就可以找到了！</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>我们该怎样把这么一个抽象的自动机通过代码实现呢？</p><p>我们其中一个办法就是，图的邻接矩阵实现。</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww6umswk8j30sq0nnwg3.jpg" alt=""></p><p>解释：0接受a变为1；0接受b变成0 以此类推</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="complier" scheme="httpsp://yoursite.com/tags/complier/"/>
    
  </entry>
  
  <entry>
    <title>从微博spider详解Scrapy</title>
    <link href="httpsp://yoursite.com/2018/11/03/%E4%BB%8E%E5%BE%AE%E5%8D%9Aspider%E8%AF%A6%E8%A7%A3Scrapy/"/>
    <id>httpsp://yoursite.com/2018/11/03/从微博spider详解Scrapy/</id>
    <published>2018-11-03T13:25:57.811Z</published>
    <updated>2018-11-03T13:25:57.818Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在彻底剖析Scrapy爬虫框架</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>针对: <code>https://m.weibo.cn</code> 爬取新浪微博用户的公开基本信息，如用户昵称、头像、用户的关注、粉丝列表以 及发布的微博等，这些信息抓取之后保存至 MongoDB。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>情确保前文所讲的代理池、 Cookies 池已经实现并可以正常运行，安装 Scrapy、 PyMongo 库，如 没有安装可以参考前文内容</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>针对请求解析不再过多阐述， </p><p>从XHR分析可知，请求类型为Get ,因此，模仿创造请求。</p><p><code>https://m.weibo.cn/api/container/getlndex?contaiaerid= 231 051二followers-_1916655407 &amp;luicode= I 00000 l l&amp;lfid= I 005051916655407 &amp;featurecode=20000320&amp;type =uid&amp;value= 1916655407 &amp;page=2</code></p><p>其中最主要的参数就是 containerid 和 page。 有了这两个参数，我们同样可以获取请求结果。 我 们可以将接口精简为  <a href="https://m.weibo.cn/api/container/getIndex?containerid=231051-_followers-_1916655407&amp;page=2" target="_blank" rel="noopener">https://m.weibo.cn/api/container/getIndex?containerid=231051-_followers-_1916655407&amp;page=2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在彻底剖析Scrapy爬虫框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>C++ template —— 模板基础（一）</title>
    <link href="httpsp://yoursite.com/2018/11/01/C++-template-%E2%80%94%E2%80%94-%E6%A8%A1%E6%9D%BF%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>httpsp://yoursite.com/2018/11/01/C++-template-——-模板基础（一）/</id>
    <published>2018-11-01T03:33:01.175Z</published>
    <updated>2018-11-01T03:48:52.276Z</updated>
    
    <content type="html"><![CDATA[<p>C++的魅力，实在使人难以忘却。</p><a id="more"></a><p><a href="https://www.cnblogs.com/yyxt/category/772515.html" target="_blank" rel="noopener">拜读</a></p><p>本文转载于: <a href="https://www.cnblogs.com/yyxt/" target="_blank" rel="noopener">博客园_小天</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++的魅力，实在使人难以忘却。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="httpsp://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>完美哈希</title>
    <link href="httpsp://yoursite.com/2018/10/31/Scrapy%E6%A1%86%E6%9E%B6%E9%80%9A%E7%94%A8%E7%88%AC%E8%99%AB/"/>
    <id>httpsp://yoursite.com/2018/10/31/Scrapy框架通用爬虫/</id>
    <published>2018-10-31T01:53:27.982Z</published>
    <updated>2018-11-01T16:15:39.315Z</updated>
    
    <content type="html"><![CDATA[<p>通过构造完美哈希，可以在O(1)时间内实现关键字的查询。</p><p> 关键字表算法: 通过构造完美哈希，可以在O(1)时间内实现关键字的查询.</p><a id="more"></a><p><a href="https://www.cnblogs.com/gaochundong/p/hashtable_and_perfect_hashing.html" target="_blank" rel="noopener">哈希综述</a> </p><p><a href="https://www.ibm.com/developerworks/cn/linux/l-gperf.html" target="_blank" rel="noopener">gperf算法</a></p><p>PHF(<em>Perfect Hash Function</em>)和MPHF(<em>Minimal Perfect Hash Function</em>)生成算法：</p><p>  <a href="http://homepages.dcc.ufmg.br/~nivio/papers/wea05.pdf" target="_blank" rel="noopener">A Practical Minimal Perfect Hashing Method</a></p><p>  <a href="http://homepages.dcc.ufmg.br/~nivio/papers/tr06.pdf" target="_blank" rel="noopener">An Approach for Minimal Perfect Hash Functions for Very Large Databases</a></p><p>  <a href="http://homepages.dcc.ufmg.br/~nivio/papers/tr004_04.ps" target="_blank" rel="noopener">A New algorithm for constructing minimal perfect hash functions</a></p><p>  <a href="http://citeseer.ist.psu.edu/czech92optimal.html" target="_blank" rel="noopener">A optimal algorithm to generating minimal perfect hash function</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过构造完美哈希，可以在O(1)时间内实现关键字的查询。&lt;/p&gt;
&lt;p&gt; 关键字表算法: 通过构造完美哈希，可以在O(1)时间内实现关键字的查询.&lt;/p&gt;
    
    </summary>
    
    
      <category term="complier" scheme="httpsp://yoursite.com/tags/complier/"/>
    
  </entry>
  
</feed>
