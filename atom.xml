<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>35.32</title>
  
  <subtitle>这些表象就是崇高和滑稽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="httpsp://yoursite.com/"/>
  <updated>2018-11-25T01:56:58.843Z</updated>
  <id>httpsp://yoursite.com/</id>
  
  <author>
    <name>槨冧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习日记_2</title>
    <link href="httpsp://yoursite.com/2018/11/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0_2/"/>
    <id>httpsp://yoursite.com/2018/11/25/机器学习日记_2/</id>
    <published>2018-11-25T01:56:58.841Z</published>
    <updated>2018-11-25T01:56:58.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg" alt=""></p><a id="more"></a><h1 id="Linear-regression-with-one-variable"><a href="#Linear-regression-with-one-variable" class="headerlink" title="Linear regression with one variable"></a>Linear regression with one variable</h1><p>什么是一元变量线性回归？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回归分析只涉及到两个变量的，称一元回归分析。一元回归的主要任务是从两个相关变量中的一个变量去估计另一个变量，被估计的变量，称因变量，可设为Y；估计出的变量，称自变量，设为X。回归分析就是要找出一个数学模型Y=f(X)，使得从X估计Y可以用一个函数式去计算。当Y=f(X)的形式是一个直线方程时，称为一元线性回归。这个方程一般可表示为Y=A+BX。根据最小平方法或其他方法，可以从样本数据确定常数项A与回归系数B的值。A、B确定后，有一个X的观测值，就可得到一个Y的估计值。回归方程是否可靠，估计的误差有多大，都还应经过显著性检验和误差计算。有无显著的相关关系以及样本的大小等等，是影响回归方程可靠性的因素</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fxk18qppzkj30px0ds4hf.jpg" alt="1543107453608"></p><p>举个例子来说，上面的坐标图，横轴代表房屋的面积，纵轴表示可以卖到的价钱，小王手里有一个1250单位大小的房子，他想知道这间房子可以卖多少钱？</p><hr><p>为了解决这个问题，我们<code>拟合</code>这些数据，就是把这些离散的数据近似成为一条连续的曲线，但是你可以看到，我们通过直线拟合或二次函数拟合，这两种情况下的结果显然是不同的，那么，我们该怎样选择呢？</p><p>我们引入了 <code>Supervised Learning</code>(监督学习算法) 这个概念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">监督学习算法:</span><br><span class="line">    我们给定了一个数据集，里面都是正确的数据，supervisedlearning的目的就是，依赖这些有限的数据，给出更多的正确数据，从而完成我们估价的目的。</span><br></pre></td></tr></table></figure><p>此时此刻，我们正在解决一个<code>Regression problem</code>(回归问题)，意思就是我们想预测连续的数据输出，也就是价格。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="httpsp://yoursite.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习日记</title>
    <link href="httpsp://yoursite.com/2018/11/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0_1/"/>
    <id>httpsp://yoursite.com/2018/11/24/机器学习日记_1/</id>
    <published>2018-11-24T15:26:33.255Z</published>
    <updated>2018-11-24T15:37:33.479Z</updated>
    
    <content type="html"><![CDATA[<p>同步教程视频进行个人总结</p><a id="more"></a><p><strong>机器学习的定义:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tom Mitchell (1998) Well-posed Learning Problem:</span><br><span class="line">A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</span><br></pre></td></tr></table></figure><p><code>一个计算机程序从经验E中学习一些任务T和一些性能度量P，它在T上的性能，用P度量，将随着经验E的提高而提高。</code></p><p>比如我问你一个问题：</p><p>Suppose your email program watches which emails you do or do not mark as spam, and based on that learns how to better filter spam.  What is the task T in this setting? </p><p><code>假设您的电子邮件程序监视您标记哪些电子邮件为垃圾邮件，并在此基础上学习如何更好地过滤垃圾邮件。在这种情况下，任务T是什么?</code></p><p>​     A.  Classifying emails as spam or not spam. </p><p>​     B. Watching you label emails as spam or not spam. </p><p>​     C. The number (or fraction) of emails correctly classified as spam/not spam. </p><p>​     D. None of the above—this is not a machine learning problem.</p><p>答案是<code>A</code></p><p>A选项意思是<code>判别一封邮件是不是垃圾邮件</code>，这对应着我们的我们的<code>任务T</code></p><p>B选项意思是<code>看你把电子邮件标记为垃圾邮件或非垃圾邮件</code>这对应着<code>经验E</code></p><p>C选项意思是 <code>正确分类为垃圾邮件/非垃圾邮件的邮件数量(或比例)</code>显然这是效率<code>P</code></p><p>D选项意思是<code>以上全错</code></p><hr><h2 id="机器学习主要算法分类"><a href="#机器学习主要算法分类" class="headerlink" title="机器学习主要算法分类"></a>机器学习主要算法分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Machine learning algorithms:</span><br><span class="line"></span><br><span class="line">-Supervised learning    (监督学习)</span><br><span class="line"></span><br><span class="line">-Unsupervised learning  (无监督学习)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Reinforcement learning, recommender systems(强化学习，推荐系统)</span><br><span class="line">Also talk about: Practical advice for applying learning algorithms(实用的应用学习算法建议)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同步教程视频进行个人总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="httpsp://yoursite.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="httpsp://yoursite.com/2018/11/11/Re-NFA-DFA-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%BB%A3%E7%A0%81/"/>
    <id>httpsp://yoursite.com/2018/11/11/Re-NFA-DFA-词法分析器代码/</id>
    <published>2018-11-11T08:44:11.810Z</published>
    <updated>2018-11-25T00:51:09.542Z</updated>
    
    <content type="html"><![CDATA[<p>Re-&gt;NFA-&gt;DFA-&gt;词法分析器代码</p><p>thompson算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基于对re结构做优化(数学归纳法)</span><br><span class="line"> 1.基本的re直接构造</span><br><span class="line"> 2.复合的re递归构造</span><br><span class="line">递归算法，容易实现</span><br></pre></td></tr></table></figure><p>子集构造算法</p><p>hopcroft最小优化算法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Re-&amp;gt;NFA-&amp;gt;DFA-&amp;gt;词法分析器代码&lt;/p&gt;
&lt;p&gt;thompson算法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="complier" scheme="httpsp://yoursite.com/tags/complier/"/>
    
  </entry>
  
  <entry>
    <title>特殊的dp</title>
    <link href="httpsp://yoursite.com/2018/11/10/%E7%89%B9%E6%AE%8A%E7%9A%84dp/"/>
    <id>httpsp://yoursite.com/2018/11/10/特殊的dp/</id>
    <published>2018-11-10T08:24:47.165Z</published>
    <updated>2018-11-10T08:25:44.349Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>已经学过了动归的我，面对一些复杂dp题目，却仍然感觉到，无从下手。</p><p>我必须深刻知道，我所理解的只是皮毛罢了。</p><p>针对于这个题目来讲 #<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1421" target="_blank" rel="noopener">搬寝室</a></p><p>我被弄得很糊涂，自己只是掌握了一个空架子，几句话，几行代码，而真正的思想，可以说是根本没有触及到的。</p><p>分析这个问题，题目给定了<code>n个物品的重量</code>,并提出了这样一个要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给你k次(k正确)，你一次挑选两个，一次挑选两个，一共挑k次。</span><br><span class="line">要求最后，你挑的俩数差的绝对值，最后一共k个绝对值是吧，要求这些绝对值的总和最小。</span><br></pre></td></tr></table></figure><p>怎么办？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每次的抉择，必定会对以后的抉择产生影响</span><br></pre></td></tr></table></figure><p>如果是动态规划，要怎样想呢？</p><ol><li>把所有物品排序</li><li>只选一对，从1到n的最小dp组构建出来</li><li>选两对，建立在上一步的基础上, 帅气的一个转移，我是选择这对呢，还是不选呢</li><li>以此类推</li></ol><p>这个思路的梳理，真的使人头痛，真的好菜，多做吧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a[maxn];me(dp,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            </span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>); <span class="comment">//sort(a+1,a+n+1)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>*i&lt;=j)</span><br><span class="line">                    dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j<span class="number">-2</span>]+(a[j]-a[j<span class="number">-1</span>])*(a[j]-a[j<span class="number">-1</span>]));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j]=inf;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[k][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱到无力。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="httpsp://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>仓库</title>
    <link href="httpsp://yoursite.com/2018/11/10/%E4%BB%93%E5%BA%93/"/>
    <id>httpsp://yoursite.com/2018/11/10/仓库/</id>
    <published>2018-11-10T08:00:32.955Z</published>
    <updated>2018-11-10T08:00:32.957Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">const int maxn=2e3+5;</span><br><span class="line">const int mod=1e9+7;</span><br><span class="line">const int inf=1e9;</span><br><span class="line">#define me(a,b) memset(a,b,sizeof(a))</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">int dp[maxn][maxn];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="httpsp://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>三类背包</title>
    <link href="httpsp://yoursite.com/2018/11/09/%E4%B8%89%E7%B1%BB%E8%83%8C%E5%8C%85/"/>
    <id>httpsp://yoursite.com/2018/11/09/三类背包/</id>
    <published>2018-11-09T15:40:06.650Z</published>
    <updated>2018-11-09T15:40:17.610Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 01 背包，很直接很简单</span></span><br><span class="line"><span class="comment">//背包容量一定，一堆物品的 重量--价值 也知道了， 一个一个看，我是选还是不选呢？</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)  <span class="comment">//每次 考虑一个商品的时候，咱都要从 m 再开始 </span></span><br><span class="line">         <span class="keyword">if</span>(j&gt;=wet[i])</span><br><span class="line">         dp[j]=max(dp[j-wet[i]]+val[i],dp[j]);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[m];     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完全背包，你去看看01背包，完全背包和那个的唯一差别是 这里的物品是无限的 </span></span><br><span class="line"><span class="comment">// 这个完全背包 写起来 还是比 01背包简单点 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=wet[i];j&lt;=m;j++)</span><br><span class="line">      dp[j]=max( dp[j-wet[i]]+val[i] , dp[j]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多重背包 是啥呢， 就是 其他和01 背包一样，就是这物品数量，既不是一个，也不是无限个，是 不定数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">int</span> amt[n+<span class="number">5</span>];<span class="comment">//记录 每个物品的数量 </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i]&gt;&gt;amt[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)  <span class="comment">//每次 考虑一个商品的时候，都要从 m 再开始 </span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=ant[i];k++) <span class="comment">//再添加一个商品数目的循环</span></span><br><span class="line">    <span class="keyword">if</span>(j&gt;=k*val[i])   </span><br><span class="line">            dp[j]=max(dp[j-k*wet[i]]+k*val[i],dp[j]);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m];     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>恶心</title>
    <link href="httpsp://yoursite.com/2018/11/09/%E6%81%B6%E5%BF%83/"/>
    <id>httpsp://yoursite.com/2018/11/09/恶心/</id>
    <published>2018-11-09T14:24:00.491Z</published>
    <updated>2018-11-09T14:24:00.495Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>这清楚地被人看到，A先生独自一个人在屋顶打转，他低着头看着自己的脚尖，他越走越快，地上被他用皮鞋明显地划出了一个圆，A先生甚至觉得，自己也跟不上自己。</p><p>A先生是一个陀螺。</p><p>我想解救A先生出来，我想让这个不停打转的A先生，停下来。</p><p>您可能会问，问我为什么，劝我不要这样做。</p><p>您对我讲，这个世界上有一条道理，就是千万不要碰一个，原地打转的陀螺。</p><p>但我要这样做，因为，我也是个陀螺。</p><p>只有我旋转到一个特定的角度里，我才用眼睛看见，和我一样打转的A先生。</p><p>“你好啊! “我边旋转边向A先生打招呼。</p><p>但这位A先生，似乎不情愿我这样做，我见他低着头，脚步规整。</p><p>于是我加速旋转，这下子啊，A先生的轮廓，就完完整整地呈现在了，我的眼珠里面。</p><p>“你为什么旋转呢?”我问A先生。</p><p>“为什么?”他轻声说。</p><p>“什么为什么?” 我回答他。</p><p>“为什么你看得见我?”  他的脸扭到了一团  “我却看不见自己?”</p><p>我笑着对他说，”哈哈，A先生，我们怎么可能看的到自己呢?” </p><p>”你” 他接着说道 “也是我的剥夺者之一，你属于，地狱，对，你是我的地狱，你看到我，但我却看不到我自己，我将存在于被存在之中，你无疑，是我的恶魔，我并不能时时刻刻都认识到这处，我已经受损。“ </p><p>听到这里，我立即恶心起来。</p><p>”先生！我怎么可能属于，地狱，这种词汇？ 您如果想看清自己，您想这样做的话，您完全不必旋转，您必须停下来!”</p><p>“ 那你呢? “ 他问我。</p><p>A先生是个陀螺，旋转的陀螺。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>基础:从数独看Dfs</title>
    <link href="httpsp://yoursite.com/2018/11/08/%E5%9F%BA%E7%A1%80%E4%BB%8E%E6%95%B0%E7%8B%AC%E7%9C%8BDfs/"/>
    <id>httpsp://yoursite.com/2018/11/08/基础从数独看Dfs/</id>
    <published>2018-11-08T14:12:12.396Z</published>
    <updated>2018-11-08T14:16:19.732Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>题目大意是:<br>玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个同色九宫内的数字均含1-9，不重复，输入如</p><p><code>005300000800000020070010500400005300010070006003200080060500009004000030000009700</code></p><p>要求输出</p><p><code>145327698839654127672918543496185372218473956753296481367542819984761235521839764</code></p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>1： 九宫格的规则我们直到，同行，同列，同宫，必须是不以一样的，所以筛选方向就有三个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_row_col_exist</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123; <span class="comment">//筛选同行同列，看看有没有一样的，否则返回1成功</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[row][i] == num)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[i][col] == num)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_part</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123;<span class="comment">//筛选同宫，看看传入的 num 在不在(row,col)所处的宫里面，不在的话返回1</span></span><br><span class="line"><span class="keyword">int</span> partx = (row<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> party = (col<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x= (partx)*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = party*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">    <span class="built_in">map</span>[x][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x][y+<span class="number">2</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y+<span class="number">2</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y+<span class="number">2</span>] == num||</span><br><span class="line">)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，基本上，上面就解决了我们过滤的问题，接下里是<code>Dfs</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x.<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(row &gt; <span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[x][y] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(is_row_col_exist(x,y,i) &amp;&amp;  check_part(x,y,i) ) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y]=i;</span><br><span class="line">Dfs(x+(y+<span class="number">1</span>)/<span class="number">10</span>,(y+<span class="number">1</span>)%<span class="number">10</span>);</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Dfs(x+(y+<span class="number">1</span>)/<span class="number">10</span>,(y+<span class="number">1</span>)%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>第一问题·</em>： <strong>搜索搜索，从哪里开始呢？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是的，我们首先要找到一个入口，这个入口一般是什么？</span><br><span class="line">是矩阵的最边缘，是一个可以有能力通过循环跑遍所有情况的位置。</span><br></pre></td></tr></table></figure><p><em>第二问题</em>： <strong>回溯的必要性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">倘若没有回溯条件，必定爆栈</span><br><span class="line">而往往回溯条件不是那么的容易找到(至少对于我来讲是这样的)</span><br><span class="line">这个数独题存在：    Dfs(x+(y+1)/10,(y+1)%10)</span><br><span class="line"></span><br><span class="line">一号位参数 和 二号位参数 是存在递增的，但我们的9X9,所以条件就是： 行数不能超过了最大(我觉得不容易找到)</span><br></pre></td></tr></table></figure><p><em>第三问题</em> ： <strong>dfs的基本形状</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dfs&#123;</span><br><span class="line">    </span><br><span class="line">    /*跳出条件&#123;</span><br><span class="line">        成功了</span><br><span class="line">        return;</span><br><span class="line">    &#125;*/</span><br><span class="line">    </span><br><span class="line">    终止条件&#123;</span><br><span class="line">       不用再进行了，已经失败了</span><br><span class="line">       return</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">   循环&#123; </span><br><span class="line">    是符合条件的&#123;</span><br><span class="line">        信息改变</span><br><span class="line">        dfs(下一位) //向深处进行</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;   </span><br><span class="line">   信息恢复   //为什么呢？？ 因为这里的信息受到改变，且肯定是不满足条件的，那么为了使接下来的程序顺利执行，必须信息恢复，否则这个信息的影响会贯穿下去。这会让深度搜索进行不下去。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[10][10];//存储数字</span><br><span class="line">int is_row_col_repeat(int row,int col,int num)&#123;//判断行列是否重复</span><br><span class="line">    //判断行是否重复</span><br><span class="line">    for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">        if (a[row][i]==num) &#123;</span><br><span class="line">            return 0;//行重复，返回0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断列是否重复</span><br><span class="line">    for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">        if (a[i][col]==num) &#123;</span><br><span class="line">            return 0;//列重复，返回0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;//行列不重复，返回1</span><br><span class="line">&#125;</span><br><span class="line">int check_row_range(int row)&#123;//判断行的范围</span><br><span class="line">    if (row&gt;=1 &amp;&amp; row&lt;=3) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else if(row&gt;=4&amp;&amp;row&lt;=6)&#123;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return 7;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int check_col_range(int col)&#123;//判断列的范围</span><br><span class="line">    if(col&gt;=1&amp;&amp;col&lt;=3)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else if (col&gt;=4&amp;&amp;col&lt;=6) &#123;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return 7;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int is_block_repeat(int row,int col,int num)&#123;//判断同色九宫格是否重复</span><br><span class="line">    int x,y;</span><br><span class="line">    x=check_row_range(row);</span><br><span class="line">    y=check_col_range(col);</span><br><span class="line">    for (int i=x;i&lt;=x+2;i++) &#123;</span><br><span class="line">        for (int j=y;j&lt;=y+2;j++) &#123;</span><br><span class="line">            if (a[i][j]==num) &#123;</span><br><span class="line">                return 0;//重复，返回0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;//不重复，返回1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(int row,int col)&#123;</span><br><span class="line">    if (row&gt;9) &#123;//如果行超出9行，直接输出</span><br><span class="line">        for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">            for (int j=1;j&lt;=9;j++) &#123;</span><br><span class="line">                printf(&quot;%d&quot;,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (a[row][col]==0) &#123;//如果没有填数字</span><br><span class="line">        for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">            if (is_row_col_repeat(row, col, i) &amp;&amp; is_block_repeat(row, col, i)) &#123;//如果行列九宫格不重复</span><br><span class="line">                a[row][col]=i;//填充数字</span><br><span class="line">                dfs(row+(col+1)/10, (col+1)%10);//继续搜索</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[row][col]=0;//重新置为0</span><br><span class="line">    &#125;else&#123;//如果已经填了，继续搜索</span><br><span class="line">        dfs(row+(col+1)/10, (col+1)%10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">    string s;</span><br><span class="line">    for(int i=1;i&lt;=9;i++)&#123;</span><br><span class="line">        cin &gt;&gt; s;//输入字符串</span><br><span class="line">        for(int j=1;j&lt;=9;j++)&#123;</span><br><span class="line">            char ss=s.at(j-1);//取s的第j-1的字符</span><br><span class="line">            a[i][j]=ss-&apos;0&apos;;//将ss转化为整数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(1,1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Berlekamp-Massey算法</title>
    <link href="httpsp://yoursite.com/2018/11/08/Berlekamp-Massey%E7%AE%97%E6%B3%95/"/>
    <id>httpsp://yoursite.com/2018/11/08/Berlekamp-Massey算法/</id>
    <published>2018-11-07T16:17:23.132Z</published>
    <updated>2018-11-07T16:17:23.134Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>坑在这</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速幂&amp;矩阵快速幂</title>
    <link href="httpsp://yoursite.com/2018/11/07/%E5%BF%AB%E9%80%9F%E5%B9%82&amp;%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>httpsp://yoursite.com/2018/11/07/快速幂&amp;矩阵快速幂/</id>
    <published>2018-11-07T15:42:47.605Z</published>
    <updated>2018-11-08T04:49:04.014Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>计算关于: p^n 问题，带入实例最易理解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">lli <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n )</span></span>&#123;  <span class="comment">//x^</span></span><br><span class="line">    lli snowball = x;</span><br><span class="line">lli ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans *=snowball;</span><br><span class="line">&#125;</span><br><span class="line">snowball*=snowball;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>矩阵快速幂是快速幂在矩阵连乘上的应用，快速幂是种思想，而矩阵快速幂指某算法在它内部可能有一部分是矩阵连乘，然后使用的了快速幂的模板，以此类推，我们可以有很多种的快速幂了。</p><p>也就是上面的代码。</p><p>针对这个问题</p><p><a href="http://poj.org/problem?id=3070" target="_blank" rel="noopener">Poj——-Fibonacci</a></p><p>我觉得这个题的精髓不在快速幂，而在从斐波那契数列 到 矩阵连乘的转化。四个字:  <strong>化加为乘</strong> ，使得我们能用快速幂。</p><p>图示如下：</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwzy5ggbiqj31hc140jw0.jpg" alt=""></p><p>存个模板先</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">multi</span><span class="params">(node s, node b)</span></span>&#123;</span><br><span class="line">    node temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">temp.a[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)&#123;</span><br><span class="line">temp.a[i][j]=(temp.a[i][j]+(s.a[i][k]*b.a[k][j]))%<span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">martix_quick</span><span class="params">(node snowball,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    snowball.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    node b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            b.a[i][j]=(i==j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">b=multi(b,snowball);</span><br><span class="line">&#125;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">snowball=multi(snowball,snowball);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b.a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/cmmdc/p/6936196.html" target="_blank" rel="noopener">解释好文</a></p><p><a href="https://paste.ubuntu.com/p/Fqkr3xV5NS/" target="_blank" rel="noopener">poj我的码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Kmp字符串匹配算法</title>
    <link href="httpsp://yoursite.com/2018/11/05/Kmp/"/>
    <id>httpsp://yoursite.com/2018/11/05/Kmp/</id>
    <published>2018-11-05T13:06:10.649Z</published>
    <updated>2018-11-05T13:11:00.091Z</updated>
    
    <content type="html"><![CDATA[<p>无参考意义</p><a id="more"></a><p>S: 等待被匹配的字符串     <code>abcabcabccabcd</code></p><p>C: 匹配字符串                    <code>abcc</code></p><hr><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>next 数组下标从<code>0</code>开始，<code>next[0] = -1</code>,</p><p>下标  1，2，3，4 · · · 代表:  <code>C这个字符串，长度到1,2,3,4··· 位置时候，我们究竟能够能找到多长的对称前后缀</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">比如对于这个next:</span><br><span class="line">next[0] = -1</span><br><span class="line">next[1] = 0</span><br><span class="line">next[2] = 0</span><br><span class="line">next[3] = 0 </span><br><span class="line">next[4] = 1</span><br></pre></td></tr></table></figure><p>代码实现：(不理解的时候，用笔写出来)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;      </span><br><span class="line"><span class="keyword">while</span>(j&lt;c_len)&#123;                        <span class="meta">#j代表着我们已经完成了几个</span></span><br><span class="line"><span class="keyword">if</span>( k==<span class="number">-1</span> || next[k]==next[j])&#123;   </span><br><span class="line">k+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">k=next[k];    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int Kmp(char *c,char *s)&#123;</span><br><span class="line">int i=0;</span><br><span class="line">int j=0;</span><br><span class="line">int sum=0;</span><br><span class="line">get_next();</span><br><span class="line">while(i &lt; s_len)&#123;  #大的串，不要越界了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(j==-1 || c[j]==s[i])&#123;  #核心</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(j==c_len)&#123;  #匹配完成了啊，就记录一个，j重新开始</span><br><span class="line">sum++;</span><br><span class="line">    j=0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxn 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>  c[maxn];</span><br><span class="line"><span class="keyword">char</span>  s[maxn];</span><br><span class="line"><span class="keyword">int</span>   next[maxn];</span><br><span class="line"><span class="keyword">int</span>  c_len,s_len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;c_len)&#123;</span><br><span class="line"><span class="keyword">if</span>( k==<span class="number">-1</span> || next[k]==next[j])&#123;</span><br><span class="line">k+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">k=next[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kmp</span><span class="params">(<span class="keyword">char</span> *c,<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">get_next();</span><br><span class="line"><span class="keyword">while</span>(i &lt; s_len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">-1</span> || c[j]==s[i])&#123;</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==c_len)&#123;</span><br><span class="line">sum++;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入待比较字符串:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入比较字符串:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">c_len = <span class="built_in">strlen</span>(c);<span class="comment">//sizeof(c)/sizeof(char);</span></span><br><span class="line">s_len = <span class="built_in">strlen</span>(s);<span class="comment">//sizeof(s)/sizeof(char);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,Kmp(c,s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无参考意义&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>红龙</title>
    <link href="httpsp://yoursite.com/2018/11/05/%E7%BA%A2%E9%BE%99/"/>
    <id>httpsp://yoursite.com/2018/11/05/红龙/</id>
    <published>2018-11-04T16:23:49.354Z</published>
    <updated>2018-11-04T16:29:43.125Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>每当我认为，自己清醒的认识到，它的起因，经过，和结果时，我却无法集中注意力，我无权，站在这样一个高地。</p><p>我审视着它，我看到它吟唱出刺耳的密密麻麻的语句，我感觉得到它们融化，汇合，变为正常，变为我身边的椅子，水杯，台灯，我眼前的手掌的毛孔。</p><p>亲爱的，我不得不这样讲，我已由它组成，我不知该怎样做，因为，我已由它组成。</p><p>它是红龙，善良而邪恶的无形体现，黑色和白色融合，于我体内而逃于我身，赐予我悲伤和快乐的一切情绪，施加于我痛苦和狂热的次次混乱。</p><p>我望着红龙。</p><p>请你告诉我，为什么，我目光下的极限，仅仅是一个可笑无比的紫色的巨大矛盾体。</p><p>红龙，你是诱因，你早已彻彻底底的，屈服于这片土地和星辰，在这使人厌恶的距离里，无休止地接受我的祈祷。</p><p>它将会绽放出鲜艳的赤红色的花，它紧闭的嘴中必将发出人类一样的叫声，我已感受的到，红龙之下一切的复苏，</p><p>切断一切灌输后的大地，将会彻底区分于你的肌肤。</p><p>我必定要杀死它。</p><p>红龙。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>有限状态自动机</title>
    <link href="httpsp://yoursite.com/2018/11/04/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>httpsp://yoursite.com/2018/11/04/有限状态自动机/</id>
    <published>2018-11-04T08:59:36.185Z</published>
    <updated>2018-11-04T10:17:32.002Z</updated>
    
    <content type="html"><![CDATA[<p>总结</p><a id="more"></a><p>举例子如图:</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww66hr1b9j30vz0mytbc.jpg" alt=""></p><p>如图 <code>(q0,a)-&gt;q1,(q0,b)-&gt;q0</code> 这就叫做状态转移函数，咋解释呢？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">黄色圆形代表一个一个状态，内部数字就是状态对应的编号</span><br><span class="line">q0 接受 a 到达 q1 </span><br><span class="line">q0 接受 b 到达 q0</span><br><span class="line">. . .</span><br></pre></td></tr></table></figure><p>然后就像你看到的，把这些状态(<code>小括号包括住的</code>)积攒在一起，就是我们的图1的 <code>S</code>也叫<code>状态集</code></p><p>这些  <code>从某个状态到达另外一个状态</code> 的过程，本身可以称作一个函数，这些函数的集合叫做，转移函数集合。</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww682bj7lj30w00ka40t.jpg" alt=""></p><p><code>有限状态自动机：</code></p><ol><li>非确定有限状态自动机(NFA)</li><li>确定的有限状态自动机(DFA)</li></ol><p>我们第一个图就是个确定的，来看看一个不确定的:</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww6kumrtij30u00n5dhr.jpg" alt=""></p><p>这个为什么叫不确定的状态自动机？  你看看， 加入我们给 <code>q0 传递 a</code>  ,你能知道 q0到q0，还是q0到q1？？ 你是不确定的，所以含有这种构造的自动机就叫<code>NFA</code></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>问？在NFA中，我们在初始状态为 <code>q0</code> 时，传入 字符串s=<code>&quot;a&quot;</code>,请问对于NFA，它可以接受吗？</p><p>答：可以，尽管q0 有可能接受 <code>a</code>后还是状态本身，但只要有一条路可转移走，NFA在经过<code>遍历</code> 后，就可以找到了！</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>我们该怎样把这么一个抽象的自动机通过代码实现呢？</p><p>我们其中一个办法就是，图的邻接矩阵实现。</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fww6umswk8j30sq0nnwg3.jpg" alt=""></p><p>解释：0接受a变为1；0接受b变成0 以此类推</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="complier" scheme="httpsp://yoursite.com/tags/complier/"/>
    
  </entry>
  
  <entry>
    <title>从微博spider详解Scrapy</title>
    <link href="httpsp://yoursite.com/2018/11/03/%E4%BB%8E%E5%BE%AE%E5%8D%9Aspider%E8%AF%A6%E8%A7%A3Scrapy/"/>
    <id>httpsp://yoursite.com/2018/11/03/从微博spider详解Scrapy/</id>
    <published>2018-11-03T13:25:57.811Z</published>
    <updated>2018-11-03T13:25:57.818Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在彻底剖析Scrapy爬虫框架</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>针对: <code>https://m.weibo.cn</code> 爬取新浪微博用户的公开基本信息，如用户昵称、头像、用户的关注、粉丝列表以 及发布的微博等，这些信息抓取之后保存至 MongoDB。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>情确保前文所讲的代理池、 Cookies 池已经实现并可以正常运行，安装 Scrapy、 PyMongo 库，如 没有安装可以参考前文内容</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>针对请求解析不再过多阐述， </p><p>从XHR分析可知，请求类型为Get ,因此，模仿创造请求。</p><p><code>https://m.weibo.cn/api/container/getlndex?contaiaerid= 231 051二followers-_1916655407 &amp;luicode= I 00000 l l&amp;lfid= I 005051916655407 &amp;featurecode=20000320&amp;type =uid&amp;value= 1916655407 &amp;page=2</code></p><p>其中最主要的参数就是 containerid 和 page。 有了这两个参数，我们同样可以获取请求结果。 我 们可以将接口精简为  <a href="https://m.weibo.cn/api/container/getIndex?containerid=231051-_followers-_1916655407&amp;page=2" target="_blank" rel="noopener">https://m.weibo.cn/api/container/getIndex?containerid=231051-_followers-_1916655407&amp;page=2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在彻底剖析Scrapy爬虫框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>C++ template —— 模板基础（一）</title>
    <link href="httpsp://yoursite.com/2018/11/01/C++-template-%E2%80%94%E2%80%94-%E6%A8%A1%E6%9D%BF%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>httpsp://yoursite.com/2018/11/01/C++-template-——-模板基础（一）/</id>
    <published>2018-11-01T03:33:01.175Z</published>
    <updated>2018-11-01T03:48:52.276Z</updated>
    
    <content type="html"><![CDATA[<p>C++的魅力，实在使人难以忘却。</p><a id="more"></a><p><a href="https://www.cnblogs.com/yyxt/category/772515.html" target="_blank" rel="noopener">拜读</a></p><p>本文转载于: <a href="https://www.cnblogs.com/yyxt/" target="_blank" rel="noopener">博客园_小天</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++的魅力，实在使人难以忘却。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="httpsp://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>完美哈希</title>
    <link href="httpsp://yoursite.com/2018/10/31/Scrapy%E6%A1%86%E6%9E%B6%E9%80%9A%E7%94%A8%E7%88%AC%E8%99%AB/"/>
    <id>httpsp://yoursite.com/2018/10/31/Scrapy框架通用爬虫/</id>
    <published>2018-10-31T01:53:27.982Z</published>
    <updated>2018-11-01T16:15:39.315Z</updated>
    
    <content type="html"><![CDATA[<p>通过构造完美哈希，可以在O(1)时间内实现关键字的查询。</p><p> 关键字表算法: 通过构造完美哈希，可以在O(1)时间内实现关键字的查询.</p><a id="more"></a><p><a href="https://www.cnblogs.com/gaochundong/p/hashtable_and_perfect_hashing.html" target="_blank" rel="noopener">哈希综述</a> </p><p><a href="https://www.ibm.com/developerworks/cn/linux/l-gperf.html" target="_blank" rel="noopener">gperf算法</a></p><p>PHF(<em>Perfect Hash Function</em>)和MPHF(<em>Minimal Perfect Hash Function</em>)生成算法：</p><p>  <a href="http://homepages.dcc.ufmg.br/~nivio/papers/wea05.pdf" target="_blank" rel="noopener">A Practical Minimal Perfect Hashing Method</a></p><p>  <a href="http://homepages.dcc.ufmg.br/~nivio/papers/tr06.pdf" target="_blank" rel="noopener">An Approach for Minimal Perfect Hash Functions for Very Large Databases</a></p><p>  <a href="http://homepages.dcc.ufmg.br/~nivio/papers/tr004_04.ps" target="_blank" rel="noopener">A New algorithm for constructing minimal perfect hash functions</a></p><p>  <a href="http://citeseer.ist.psu.edu/czech92optimal.html" target="_blank" rel="noopener">A optimal algorithm to generating minimal perfect hash function</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过构造完美哈希，可以在O(1)时间内实现关键字的查询。&lt;/p&gt;
&lt;p&gt; 关键字表算法: 通过构造完美哈希，可以在O(1)时间内实现关键字的查询.&lt;/p&gt;
    
    </summary>
    
    
      <category term="complier" scheme="httpsp://yoursite.com/tags/complier/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy对接Splash</title>
    <link href="httpsp://yoursite.com/2018/10/29/Scrapy%E5%AF%B9%E6%8E%A5Splash/"/>
    <id>httpsp://yoursite.com/2018/10/29/Scrapy对接Splash/</id>
    <published>2018-10-29T11:19:24.631Z</published>
    <updated>2018-10-31T01:44:48.609Z</updated>
    
    <content type="html"><![CDATA[<p>抓取淘宝商品是一种抓取JavaScript渲染页面的方式，除了使用Selenium还有<code>splash</code>同样可以达到同样的功能</p><a id="more"></a><p>老样子，新建一个<code>项目+爬虫</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject scrapysplashtes</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider taobao www.taobao.com</span><br></pre></td></tr></table></figure><p>制造者已经为scrapy制定了完备的splash接口，我们只需:</p><h2 id="在settings中配置关于splash的相关设置"><a href="#在settings中配置关于splash的相关设置" class="headerlink" title="在settings中配置关于splash的相关设置"></a>在settings中配置关于splash的相关设置</h2><p>–&gt;修改settings.py，首先将SPLASH_URL配置一下，在这里我们的Splash是在本地运行的，所以可以直接配置本地的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SPLASH_URL = <span class="string">'http://localhost:8050'</span></span><br></pre></td></tr></table></figure><p>–&gt; 接下来我们还需要配置几个Middleware</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>👆配置了三个Downloader Middleware和一个Spider Middleware，这是ScrapySplash的核心部分，配置了它们我们就可以对接Splash进行页面抓取，在这里我们不再需要像对接Selenium那样实现一个Downloader Middleware，ScrapySplash库都为我们准备好了，直接配置即可.</p><p>着还需要配置一个去重的类DUPEFILTER_CLASS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br></pre></td></tr></table></figure><p>最后还需要配置一个Cache存储HTTPCACHE_STORAGE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure><p><em>完成！</em> </p><hr><p>本节我们要做的抓取是淘宝商品信息，涉及到页面加载等待、模拟点击翻页等操作，所以这里就需要Lua脚本来实现了，所以我们在这里可以首先定义一个Lua脚本，来实现页面加载、模拟点击翻页的功能<a href="https://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="noopener">关于Lua</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function main(splash, args)</span><br><span class="line">  args = &#123;</span><br><span class="line">    url=<span class="string">"https://s.taobao.com/search?q=iPad"</span>,</span><br><span class="line">    wait=<span class="number">5</span>,</span><br><span class="line">    page=<span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">  splash.images_enabled = false</span><br><span class="line">  <span class="keyword">assert</span>(splash:go(args.url))</span><br><span class="line">  <span class="keyword">assert</span>(splash:wait(args.wait))</span><br><span class="line">  js = string.format(<span class="string">"document.querySelector('#mainsrp-pager div.form &gt; input').value=%d;document.querySelector('#mainsrp-pager div.form &gt; span.btn.J_Submit').click()"</span>, args.page)</span><br><span class="line">  splash:evaljs(js)</span><br><span class="line">  <span class="keyword">assert</span>(splash:wait(args.wait))</span><br><span class="line">  <span class="keyword">return</span> splash:html()</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>lua是一种脚本语言，我们写出一段<code>lua脚本</code>之后，对接到SplashRequest中，就可使用</p><p>最终taobao.py结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> scrapysplashtest.items <span class="keyword">import</span> ProductItem</span><br><span class="line"><span class="keyword">from</span> scrapy_splash <span class="keyword">import</span> SplashRequest</span><br><span class="line"></span><br><span class="line">script = <span class="string">""" #lua脚本</span></span><br><span class="line"><span class="string">function main(splash, args)</span></span><br><span class="line"><span class="string">  splash.images_enabled = false</span></span><br><span class="line"><span class="string">  assert(splash:go(args.url))</span></span><br><span class="line"><span class="string">  assert(splash:wait(args.wait))</span></span><br><span class="line"><span class="string">  js = string.format("document.querySelector('#mainsrp-pager div.form &gt; input').value=%d;document.querySelector('#mainsrp-pager div.form &gt; span.btn.J_Submit').click()", args.page)</span></span><br><span class="line"><span class="string">  splash:evaljs(js)</span></span><br><span class="line"><span class="string">  assert(splash:wait(args.wait))</span></span><br><span class="line"><span class="string">  return splash:html()</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaobaoSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'taobao'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.taobao.com'</span>]</span><br><span class="line">    base_url = <span class="string">'https://s.taobao.com/search?q='</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> keyword <span class="keyword">in</span> self.settings.get(<span class="string">'KEYWORD'</span>):</span><br><span class="line">            <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,self.settings.get(<span class="string">'MAX_PAGE'</span>)+<span class="number">1</span>):</span><br><span class="line">                url = self.base_url + quote(keyword)</span><br><span class="line">                <span class="keyword">yield</span> SelfshResponse(url,callback = self.parse,endpoint=<span class="string">'execute'</span>,args=&#123;<span class="string">'lua_source'</span>:script,<span class="string">'page'</span>:page,<span class="string">'wait'</span>:<span class="number">7</span>&#125;)</span><br></pre></td></tr></table></figure><p><code>把Lua脚本定义成长字符串</code>，通过<code>SplashRequest 的 args</code>来传递参数，另外args参数里还有一个lua_source字段用于指定Lua脚本内容，这样我们就成功构造了一个SplashRequest，对接Splash的工作就完成了</p><p>接下来的工作就很正常了</p><p>settings中设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SPLASH_URL = <span class="string">'http://192.168.99.100:8050'</span> <span class="comment">#而非http://localhost:8050</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#去重的类DUPEFILTER_CLASS</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class="line"><span class="comment">#一个Cache存储HTTPCACHE_STORAGE</span></span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure><p><em>此处必须解释一下，曾在这里卡到了第一句话上，崔庆才老师设置的是后者，这和docker开的端口有关</em></p><p>首先打开<code>virtualbox</code>，开启<code>default</code>服务，同时打开<code>docker quickstart terminal</code></p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwr5oncmf5j30lv0a3mx9.jpg" alt=""></p><p>/<em>如果docker出现什么报错，就先解决那个问题,刚接触docker，感觉这个东西坑很深</em>/ ,<br>/<em>过程中请保持virtualbox的default打开</em>/<br> 我们清楚的看到<code>docker被配置为使用IP 192.168.99.100的默认机器</code></p><p>所以，使用docker必须splash_url改为<code>http://192.168.99.100:8050</code></p><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl taobao</span><br></pre></td></tr></table></figure><p>爬虫的速度将是惊人的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抓取淘宝商品是一种抓取JavaScript渲染页面的方式，除了使用Selenium还有&lt;code&gt;splash&lt;/code&gt;同样可以达到同样的功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy框架(二)</title>
    <link href="httpsp://yoursite.com/2018/10/28/Scrapy%E6%A1%86%E6%9E%B6(%E4%BA%8C)/"/>
    <id>httpsp://yoursite.com/2018/10/28/Scrapy框架(二)/</id>
    <published>2018-10-28T12:00:53.156Z</published>
    <updated>2018-10-28T12:40:57.993Z</updated>
    
    <content type="html"><![CDATA[<p>从实例中看scrapy框架中各部分的功能</p><p><img src="https://wx1.sinaimg.cn/mw690/6c3e6b13gy1fwjoq4i6rcj20zk0wk4qp.jpg" alt=""></p><a id="more"></a><p>取的目标网站为：<a href="https://image.so.com" target="_blank" rel="noopener">https://image.so.com</a></p><p>打开浏览器开发者工具，过滤器切换到XHR选项,下拉页面，可以看到下面就会呈现许多Ajax请求</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/q8remsppeb.jpeg" alt=""></p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/7xvqjdt74l.jpeg" alt=""></p><p>返回格式是JSON。其中字段就是一张张图片的详情信息，包含了30张图片的ID、名称、链接、缩略图等信息。另外观察Ajax请求的参数信息，有一个参数一直在变化，这个参数很明显就是偏移量。当为30时，返回的是前30张图片，sn为60时，返回的就是第31~60张图片。</p><p>实际上，我们向浏览器发送ajax请求，我们从网址上，即被url编码的params列表，比如：</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwo4qvh794j311b0bu75u.jpg" alt=""></p><p>我们看到了:</p><ol><li>ch</li><li>sn</li><li>listtype</li><li>temp</li></ol><p>所以所谓的参数列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">params&#123;</span><br><span class="line">    xxx</span><br><span class="line">    xxx</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只用含有这几个参数就可以了。</p><hr><p>分析完毕后，开始新建项目.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject images360</span><br></pre></td></tr></table></figure><p>cd 到这个项目的 spiders项目下，创建一个爬虫名为<code>images360</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider images360  images.so.com</span><br></pre></td></tr></table></figure><p><strong>有了爬虫，接下来应该做什么？</strong>🧐</p><h2 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h2><p>肯定是要对spiders处理，我们进入spiders文件夹里面的<code>images.py</code>里看，爬虫有了，方法要我们创建。</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwo522pfeyj30ld0ic0ti.jpg" alt=""></p><p>这里的爬虫有三个部分:</p><p><em>1</em> :  <code>name</code>是爬虫名，<code>allowed_domain</code>是访问的域名，<code>start_urls</code>的含义是过滤爬取的域名，在插件OffsiteMiddleware启用的情况下（默认是启用的），不在此允许范围内的域名就会被过滤，而不会进行爬取,</p><p>请注意,以上三个部分，都是在我们第二个命令执行时，S框架自动生成的，我们不用动.</p><p><em>2</em>: <code>start_requests</code>就算是我们熟悉的通过循环向浏览器发送ajax请求，<code>parse</code>是对返回的response进行解析，我们知道，基本的爬虫实现都是在这里做的。</p><p>我们重点关注其他部分，也就是框架的其他环节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item</span><br><span class="line">middleware</span><br><span class="line">settings</span><br><span class="line">piplines</span><br></pre></td></tr></table></figure><p><code>item</code>:打个比方，你想要你爬到的东西的什么部分？你希望他们以什么样子交给你？</p><p>​               我想要网站图片的id,链接地址，主题，缩略图,我想要它们以一个字典的形式呈交给我</p><p>​              那么，item.py就是干这个的.​           </p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwo5bmi8y8j30h80ai3ym.jpg" alt=""></p><p><code>middleware</code>:中间件，作用是修改代理ip啦，访问浏览器的user_agent啦，<a href="https://blog.csdn.net/yancey_blog/article/details/53896092" target="_blank" rel="noopener">了解一下</a> ,此例不用middleware     </p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwo6sjw5saj30mq0p80ua.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从实例中看scrapy框架中各部分的功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/6c3e6b13gy1fwjoq4i6rcj20zk0wk4qp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Ajax和XHR</title>
    <link href="httpsp://yoursite.com/2018/10/28/Ajax%E5%92%8CXHR/"/>
    <id>httpsp://yoursite.com/2018/10/28/Ajax和XHR/</id>
    <published>2018-10-28T02:29:32.444Z</published>
    <updated>2018-10-28T02:29:32.451Z</updated>
    
    <content type="html"><![CDATA[<p>  ajax是asynchronous javascript and XML的简写</p><a id="more"></a><p><a href="https://www.cnblogs.com/xiaohuochai/p/6036475.html" target="_blank" rel="noopener">拜读</a></p><p><br><br><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  ajax是asynchronous javascript and XML的简写&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端基础" scheme="httpsp://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy框架解析</title>
    <link href="httpsp://yoursite.com/2018/10/26/Scrapy/"/>
    <id>httpsp://yoursite.com/2018/10/26/Scrapy/</id>
    <published>2018-10-25T16:14:46.767Z</published>
    <updated>2018-10-28T12:24:44.089Z</updated>
    
    <content type="html"><![CDATA[<p>Scrapy是一个非常优秀的爬虫框架</p><a id="more"></a><h3 id="什么是Scrapy？"><a href="#什么是Scrapy？" class="headerlink" title="什么是Scrapy？"></a>什么是Scrapy？</h3><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwml6x6211j30jg0dqdi2.jpg" alt=""></p><p><code>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中</code></p><h3 id="1-先安装"><a href="#1-先安装" class="headerlink" title="1 . 先安装"></a>1 . <a href="https://www.cnblogs.com/lfoder/p/6565088.html" target="_blank" rel="noopener">先安装</a></h3><h3 id="2-第一个项"><a href="#2-第一个项" class="headerlink" title="2. 第一个项"></a>2. 第一个项</h3><p><code>scrapy startproject tutorial</code><br>直接cmd执行，然后在   c/user/xxx   路径下，出现了一个tutorial 文件夹</p><h3 id="Downloader-Middleware-🔍"><a href="#Downloader-Middleware-🔍" class="headerlink" title="Downloader Middleware 🔍"></a>Downloader Middleware 🔍</h3><p>Middleware 是整个scrapy框架中负责网页下载环节的工作，比如说 我们有一个新的项目，并有个该项目下的spider</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpbinSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'httpbin'</span></span><br><span class="line">    allowed_domains = [<span class="string">'httpbin.org'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://httpbin.org/get'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        self.logger.debug(response.text) <span class="comment">#打印响应</span></span><br><span class="line">        self.logger.debug(<span class="string">'Status Code: '</span> + str(response.status))</span><br></pre></td></tr></table></figure><p>执行spider</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl httpbin</span><br></pre></td></tr></table></figure><p>发现获取到的内容中含有:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">2018-10-27 08:57:09 [scrapy.statscollectors] INFO: Dumping Scrapy stats:</span><br><span class="line">&#123;'downloader/request_bytes': 439,</span><br><span class="line"> 'downloader/request_count': 2,</span><br><span class="line"> 'downloader/request_method_count/GET': 2,</span><br><span class="line"> 'downloader/response_bytes': 768,</span><br><span class="line"> 'downloader/response_count': 2,</span><br><span class="line"> 'downloader/response_status_count/200': 2,</span><br><span class="line"> 'finish_reason': 'finished',</span><br><span class="line"> 'finish_time': datetime.datetime(2018, 10, 27, 0, 57, 9, 949044),</span><br><span class="line"> 'log_count/DEBUG': 5,</span><br><span class="line"> 'log_count/INFO': 7,</span><br><span class="line"> 'response_received_count': 2,</span><br><span class="line"> 'scheduler/dequeued': 1,</span><br><span class="line"> 'scheduler/dequeued/memory': 1,</span><br><span class="line"> 'scheduler/enqueued': 1,</span><br><span class="line"> 'scheduler/enqueued/memory': 1,</span><br><span class="line"> 'start_time': datetime.datetime(2018, 10, 27, 0, 57, 8, 773548)&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>headers</code>中的<code>User_Agent</code> 是<code>DownloaderMiddleware</code>并利用 process_request（）方法设置的 User_Agent</p><p>我们改动一下 <code>midddlerware.py</code>，添加一个RandomUserAgentMiddleware类 ，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgentMiddleware</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span></span><br><span class="line">        self.user_agent=[</span><br><span class="line">        <span class="number">1.</span>代理</span><br><span class="line">        <span class="number">2.</span>代理</span><br><span class="line">        <span class="number">3.</span>代理</span><br><span class="line">        ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request,spider)</span>:</span></span><br><span class="line">        request.headers[<span class="string">'User_Agent'</span>] = random.choice(self.user_agent)</span><br></pre></td></tr></table></figure><p>并且必须在settings.py中取消注释:  <code>DOWNLOADER_MIDDLEWARES</code>并设置成如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_USERAGENT&#123;</span><br><span class="line">    &apos;scrapydownloadermiddtest.middlewares.RandomUserAgentMiddleware&apos;: 543,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们重新运行 Spider，就可以看到 User-Agent 被成功修改为列表中所定义的随机的一个 User-Agent 了</p><p> Downloader Middleware 还有<code>process_response()</code>方法。 Downloader对 Request 执行下载之 后会得到 Response，随后 Scrapy 引擎会将 Response 发送回 Spider进行处理。 但是在 Response 被发送 给 Spider 之前，我们同样可以使用<code>process_response()</code>方法对 Response 进行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def process_response(self, request, response, spider):</span><br><span class="line">    response.status = 201 </span><br><span class="line">    return response`</span><br></pre></td></tr></table></figure><p>我们将 response 变量的 status 属性修改为 201 ，随后将 response 返回，这个被修改后的 Response 就会被发送到 Spider。<br>我们再在 Spider里面输出修改后的状态码，在 parse() 方法中添加如下的输出语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.logger.debug（&apos;StatusCode:&apos; + str(response.status))</span><br></pre></td></tr></table></figure><p>重新运行之后，控制台输出了如下内容：<br><code>[httpbin] DEBUG: Status Code: 201</code></p><p> Response 的状态码成功修改了。<br>因此要想对 Response 进行后处理，就可以借助于<code>process_response()</code>方法</p><h3 id="SpiderMiddleware-用法🏳‍🌈"><a href="#SpiderMiddleware-用法🏳‍🌈" class="headerlink" title="SpiderMiddleware 用法🏳‍🌈"></a>SpiderMiddleware 用法🏳‍🌈</h3><p>Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。更多内容请看 Spider中间件(Middleware)<br>一句话总结就是：<code>处理解析部</code></p><h3 id="Item-PipeLine-用法🐱‍👓"><a href="#Item-PipeLine-用法🐱‍👓" class="headerlink" title="Item PipeLine 用法🐱‍👓"></a>Item PipeLine 用法🐱‍👓</h3><p>当spider爬取到item后，它被发送到项目管道（Item Pipeline），通过几个组件按顺序进行处理。每一个Item Pipeline是一个实现了简单方法的Python类，它接收到一个item并对其执行一个操作，也要决定该item是否应该继续通过管道，或者被丢弃，不再进行处理。</p><p><code>简单来说，我们通过爬虫爬取的项目，先交给项目管道，项目管道把数据处理处理(删除一些啦，存到mongodb啦)产生新的item</code></p><p><strong>Item Pipeline典型的用途是：</strong><br>1.清理HTML数据<br>2.验证爬取的数据(检查items是否包含某些字段)<br>3.检查副本(并删除它们)<br>4.将item数据存储在数据库中</p><p><code>每个Item Pipeline都是一个Python类</code>，它必须实现以下方法:</p><p><strong>process_item(self, item, spider)</strong></p><p>这个方法可以被每个Item Pipeline调用，process_item()必须是:返回一个字典类型数据、返回一个条目(或任何子类)对象，返回一个 Twisted Deferred 或者DropItem异常，丢弃的item不再由进一步的Item Pipeline处理。<br>参数含义：<br>item： Item对象或字典，爬取的item<br>spider：spider对象，爬取了这个item的spider<br>此外，他们还可以实现以下方法:</p><p><strong>open_spider(self, spider)</strong> -&gt;当spider打开时，函数就会被调用，spider参数含义：被打开的spider<br><strong>close_spider(self, spider)</strong>  -&gt;当spider关闭是，函数会被调用<br><strong>from_crawler(cls, crawler)</strong>  -&gt; 如果存在，这个类方法被调用来从一个Crawler创建一个spider实例。它必须返回管道的一个新实例，Crawler对象提供对所有的scrapy核心组件的访问，比如设置和信号;这是管道访问它们并将其功能连接到scrapy的一种方式。</p><hr><p>参考链接:</p><p>​              <a href="https://blog.csdn.net/xnby/article/details/52297047" target="_blank" rel="noopener">Scrapy进阶,middleware的使用</a></p><p>​              <a href="http://blog.51cto.com/linuxliu/2068601?wx" target="_blank" rel="noopener">运维学Python之爬虫高级篇</a></p><p>​              </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scrapy是一个非常优秀的爬虫框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
