<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>35.32</title>
  
  <subtitle>正如我视笛卡尔的愚蠢的本质</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="httpsp://yoursite.com/"/>
  <updated>2018-10-21T14:08:15.830Z</updated>
  <id>httpsp://yoursite.com/</id>
  
  <author>
    <name>槨冧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不该死的人，还活着</title>
    <link href="httpsp://yoursite.com/2018/10/21/nuisance/"/>
    <id>httpsp://yoursite.com/2018/10/21/nuisance/</id>
    <published>2018-10-21T14:08:04.533Z</published>
    <updated>2018-10-21T14:08:15.830Z</updated>
    
    <content type="html"><![CDATA[<p>我再次体会到将要放弃的感觉，此刻我想的并不是，黑色成为黑色的原因，而是眼前的红色为什么这么刺眼。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我再次体会到将要放弃的感觉，此刻我想的并不是，黑色成为黑色的原因，而是眼前的红色为什么这么刺眼。&lt;br&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>qppium模拟---微信朋友圈</title>
    <link href="httpsp://yoursite.com/2018/10/20/wechatspider/"/>
    <id>httpsp://yoursite.com/2018/10/20/wechatspider/</id>
    <published>2018-10-20T14:38:13.269Z</published>
    <updated>2018-10-20T14:38:13.271Z</updated>
    
    <content type="html"><![CDATA[<p>//挖的关于appium的坑<br><a id="more"></a></p><p>###</p><ol><li>qppium介绍</li><li>爬取思路</li><li>代码实现</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;//挖的关于appium的坑&lt;br&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="httpsp://yoursite.com/2018/10/20/MongoDB/"/>
    <id>httpsp://yoursite.com/2018/10/20/MongoDB/</id>
    <published>2018-10-20T07:11:28.435Z</published>
    <updated>2018-10-20T09:45:36.168Z</updated>
    
    <content type="html"><![CDATA[<p><em>什么是MongoDB?我们又该去怎样使用它？</em></p><a id="more"></a><p><code>已删</code></p><p><a href="https://www.runoob.com/mongodb" target="_blank" rel="noopener">MongoDB官方文档</a></p><p><a href="https://blog.csdn.net/callinglove/article/details/45668673?utm_source=blogxgwz0" target="_blank" rel="noopener">PyMongo是在Python环境下使用MongoDB的语言</a></p><p>写了一半，忽然觉得，针对 那些[工具性的]，就老老实实把官方的文档看懂。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;什么是MongoDB?我们又该去怎样使用它？&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="httpsp://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>写在学习代理池和cookie池之后</title>
    <link href="httpsp://yoursite.com/2018/10/08/sougoupachong/"/>
    <id>httpsp://yoursite.com/2018/10/08/sougoupachong/</id>
    <published>2018-10-08T15:33:42.293Z</published>
    <updated>2018-10-20T09:54:19.440Z</updated>
    
    <content type="html"><![CDATA[<p>有关基本思路的描述</p> <a id="more"></a><p>这篇博客的目的是，尝试搞懂我最近做了什么.</p><p>我们为什么要用代理池？<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">部分网站有反爬虫措施，当我们使用一个ip地址对该网站进行过多的访问时，会被反爬虫机制自动视为爬虫，从而ip拉黑.</span><br></pre></td></tr></table></figure><p>代理池的构建是怎样的？<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对网上的免费ip代理网站进行爬取(西刺，proxy360)，它们网站的ip源是完全暴露在网页源码上的，我们只用简单的进行分析，就可以拿到足够的ip.</span><br></pre></td></tr></table></figure><p>如此一来，思路很清晰，设计一个爬虫，针对几个免费的网站解析爬取，将拿到 ip 进行筛选，排名，存入数据库。  并可以实现获取接口，即调即用。</p><p><code>基本模块分为 4块：存储模块、获取模块、检测模块、接口模块</code></p><p>###</p><ol><li><p>存储模块： 负责存储抓取下来的代理。 首先要保证代理不重复， 要标识代理的可用情况，还 要动态实时处理每个代理，所以一种比较高效和方便的存储方式就是使用 Redis 的 Sorted Set，即有序集合。</p></li><li><p>获取模块： 需要定时在各大代理网站抓取代理。 代理可以是免费公开代理也可以是付费代 理，代理的形式都是 IP 加端口，此模块尽量从不同来源获取，尽量抓取高匿代理，抓取成功 之后将可用代理保存到数据库中。 </p></li><li><p>检测模块： 需要定时检测数据库中的代理。 这里需要设置一个检测链接，最好是爬取哪个网 站就检测哪个网站，这样更加有针对性，如果要做一个通用型的代理，那可以设置百度等链 接来检测。 另外，我们需要标识每一个代理的状态，如设置分数标识， 100 分代表可用，分 数越少代表越不可用。 检测一次，如果代理可用，我们可以将分数标识立即设置为 100 满 分，也可以在原基础上加 l分；如果代理不可用，可以将分数标识减 l 分，当分数戚到一定阔 值后，代理就直接从数据库移除。 通过这样的标识分数，我们就可以辨别代理的可用情况， 选用的时候会更有针对性。 </p></li><li><p>接口模块： 需要用 API 来提供对外服务的接口 。 其实我们可以直接连接数据库采取对应的数 据，但是这样就需要知道数据库的连接信息，并且要配置连接，而比较安全和方便的方式就 是提供一个 Web API 接口，我们通过访问接口即可拿到可用代理。 另外，由于可用代理可能 有多个，那么我们可以设置一个随机返回某个可用代理的接口，这样就能保证每个可用代理 都可以取到，实现负载均衡</p></li></ol><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fw7uv32bfaj30px0cfahk.jpg" alt=""></p><p><a href="https://github.com/Python3WebSpider/ProxyPool" target="_blank" rel="noopener">我们需要自己造轮子吗</a>  我觉得这要分情况。 </p><p><br><br></p><p>我们为什么要使用cookie池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies是我们登陆一个页面的接口，不登陆固然可以获取网页源码，但是会受访问限制，以及不具有一些页面的权限，比如微博来说，我们的cookie池实际上就是多个微博账号的信息。</span><br></pre></td></tr></table></figure><p>与上面ip池的搭建差别是一些微博账号是我们需要自己通过某些渠道购买的。</p><p><a href="https://github.com/Python3WebSpider/CookiesPool" target="_blank" rel="noopener">轮子</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关基本思路的描述&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python の __new__()</title>
    <link href="httpsp://yoursite.com/2018/10/07/python_new/"/>
    <id>httpsp://yoursite.com/2018/10/07/python_new/</id>
    <published>2018-10-07T09:28:04.356Z</published>
    <updated>2018-10-09T14:14:49.151Z</updated>
    
    <content type="html"><![CDATA[<p><code>在学习代理池中，发现了自己搁置的问题。我尝试通过这篇文章，来理清   __ new __  () 和 __ init __()的关系.</code></p> <a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    price = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_much_of_book</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line">        <span class="keyword">return</span> self.price * n</span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">print(foo.how_much_of_book(<span class="number">8</span>))</span><br><span class="line">print(dir(Foo))</span><br></pre></td></tr></table></figure><p>⬆⬆⬆分析上面的代码，这个类实例化过程，Foo类继承object类，继承了object的<strong>new</strong>方法。当你没有重载这个方法(通俗来说，<code>你没有在Foo类中没有写__new__方法)</code>，Foo实例化是默认自动调用父类<strong>new</strong>方法，这个方法返回值为类的实例，也就是self, 用来提供这个函数的第一个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    price = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *agrs, **kwds)</span>:</span></span><br><span class="line">        inst = object.__new__(cls, *agrs, **kwds)</span><br><span class="line">        print(inst)</span><br><span class="line">        <span class="keyword">return</span> inst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_much_of_book</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line">        <span class="keyword">return</span> self.price * n</span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">print(foo.how_much_of_book(<span class="number">8</span>))</span><br><span class="line"><span class="comment"># &lt;__main__.Foo object at 0x1006f2750&gt;</span></span><br><span class="line"><span class="comment"># &lt;__main__.Foo object at 0x1006f2750&gt;</span></span><br><span class="line"><span class="comment"># 400</span></span><br></pre></td></tr></table></figure><p>⬆⬆⬆请看上面代码，Foo类中重载了<strong>new</strong>方法，它的返回值为Foo类的实例对象</p><hr><p><code>_init__ 方法为初始化方法，为类的实例提供一些属性或完成一些动作</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *agrs, **kwds)</span>:</span></span><br><span class="line">        inst = object.__new__(cls, *agrs, **kwds)</span><br><span class="line">        print(inst)</span><br><span class="line">        <span class="keyword">return</span> inst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, price=<span class="number">50</span>)</span>:</span></span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_much_of_book</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line">        <span class="keyword">return</span> self.price * n</span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">print(foo.how_much_of_book(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;__main__.Foo object at 0x1006f2750&gt;</span></span><br><span class="line"><span class="comment"># &lt;__main__.Foo object at 0x1006f2750&gt;</span></span><br><span class="line"><span class="comment"># 400</span></span><br></pre></td></tr></table></figure><p>那么说到这里，我们用两句话来总结就是:</p><p>⭐<strong>new</strong> 方法创建实例对象供<strong>init</strong> 方法使用，<strong>init</strong>方法定制实例对象。</p><p><strong>⭐new</strong> 方法必须返回值，<strong>init</strong>方法不需要返回值。(如果返回非None值就报错)</p><p><br><br></p><p>我们举两个例子，观察New的常见两种用法</p><p>第一： 继承不可变数据类型时需要用到<strong>new</strong>方法(like int, str, or tuple） </p><p> 将英寸转化成米</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Inch(float):</span><br><span class="line">    &quot;Convert from inch to meter&quot;</span><br><span class="line">    def __new__(cls, arg=0.0):</span><br><span class="line">        return float.__new__(cls, arg*0.0254)</span><br><span class="line"></span><br><span class="line">print(Inch(12))</span><br></pre></td></tr></table></figure><p><br></p><p>第二:   用在元类，定制创建类对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="string">'''来自http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(meta, name, bases, dct)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------------------------------'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Allocating memory for class"</span>, name</span><br><span class="line">        <span class="keyword">print</span> meta</span><br><span class="line">        <span class="keyword">print</span> bases</span><br><span class="line">        <span class="keyword">print</span> dct</span><br><span class="line">        <span class="keyword">return</span> super(MetaClass, meta).__new__(meta, name, bases, dct)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, name, bases, dct)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------------------------------'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Initializing class"</span>, name</span><br><span class="line">        <span class="keyword">print</span> cls</span><br><span class="line">        <span class="keyword">print</span> bases</span><br><span class="line">        <span class="keyword">print</span> dct</span><br><span class="line">        super(MetaClass, cls).__init__(name, bases, dct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = MetaClass</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, param)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Myclass()</span><br><span class="line">p.foo(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------</span></span><br><span class="line"><span class="comment"># Allocating memory for class Myclass</span></span><br><span class="line"><span class="comment"># &lt;class '__main__.MetaClass'&gt;</span></span><br><span class="line"><span class="comment"># (&lt;type 'object'&gt;,)</span></span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', 'foo': &lt;function foo at 0x1007f6500&gt;, '__metaclass__': &lt;class '__main__.MetaClass'&gt;&#125;</span></span><br><span class="line"><span class="comment"># -----------------------------------</span></span><br><span class="line"><span class="comment"># Initializing class Myclass</span></span><br><span class="line"><span class="comment"># &lt;class '__main__.Myclass'&gt;</span></span><br><span class="line"><span class="comment"># (&lt;type 'object'&gt;,)</span></span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', 'foo': &lt;function foo at 0x1007f6500&gt;, '__metaclass__': &lt;class '__main__.MetaClass'&gt;&#125;</span></span><br><span class="line"><span class="comment"># hello</span></span><br></pre></td></tr></table></figure><p><code>Myclass相当于 拷贝了 MetaClass 的方法，MetaClass 的种类仍然是 MetaClass，定制的init 的种类 也自然是Myclass</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;在学习代理池中，发现了自己搁置的问题。我尝试通过这篇文章，来理清   __ new __  () 和 __ init __()的关系.&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="httpsp://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于海</title>
    <link href="httpsp://yoursite.com/2018/10/07/photo/"/>
    <id>httpsp://yoursite.com/2018/10/07/photo/</id>
    <published>2018-10-07T08:57:03.798Z</published>
    <updated>2018-10-09T15:27:18.878Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fvyja7cikaj20uk0kedj0.jpg" alt=""><br><a id="more"></a><br><img src="https://wx3.sinaimg.cn/mw690/006lRDaTgy1fw2apaw5nlj32ro1ugnpe.jpg" alt=""><br><br><br><br><br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fvyja7cikaj20uk0kedj0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>GEETEST滑动验证码破解</title>
    <link href="httpsp://yoursite.com/2018/10/04/huadongpojie/"/>
    <id>httpsp://yoursite.com/2018/10/04/huadongpojie/</id>
    <published>2018-10-04T10:44:21.396Z</published>
    <updated>2018-10-20T09:56:17.090Z</updated>
    
    <content type="html"><![CDATA[<p>验证码的破解，是网站爬虫正常运行所必须具备的功能。</p><a id="more"></a>   <p> 注: 本文针对[<em>滑动验证被切割随机打乱，并根据源码中 <strong>&lt; DIV &gt;</strong> 标签顺序进行 <strong>取块排列</strong>  验证情况 ，属于常见的一种混淆方式</em>]</p><hr><p>关键词：</p><ol><li><strong><a href="#1" target="_self">图像分析</a></strong></li><li><strong><a href="#2" target="_self">图像拼接</a></strong></li></ol><p id="1"><br>图像分析:</p><p>   &nbsp;&nbsp; 我们以<a href="https://www.huxiu.com/" target="_blank" rel="noopener">虎嗅网</a>登陆页面为例，我们在输入手机注册前，需要通过一个滑动式的 <em>captcha</em> ,我们可以通过<code>webdriver.chrome  + selenium</code> 来模拟拖动，问题就在于究竟要拖动多远？拖动的距离究竟是多少？(offset 究竟是多少？)</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fvxl234pokj30dg07w76i.jpg" alt="这是截图"></p><p>   &nbsp;&nbsp;仔细一想，如果有一个不存在缺口的<strong>源图片</strong>，那就舒服了，因为那样的话，我们只需比较，<code>源图哪些像素块，比上面的图形颜色更深，从而判断出深颜色缺口的位置</code>,这样我们就得到了，需要模拟拖动的距离了。那么从哪里可以得到原始图片呢？<br>   F12审查代码时，发现了这样两个&lt; div&gt;:</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fvxku4epdej31620ew0uu.jpg" alt="黄线标出"></p><p>我们打开后发现，里面图片链接全部指向各自的那一个图片，<a href="http://ww1.sinaimg.cn/large/006YPp6gly1fvxkuhcc8ij31630iq41p.jpg" target="_blank" rel="noopener">一个长这样</a>,<a href="http://ww1.sinaimg.cn/large/006YPp6gly1fvxkxx3xzuj30kc0doabb.jpg" target="_blank" rel="noopener">一个长这样</a>,这，这！这不就是有缺口和没缺口的图片吗？</p><p></p><p id="2"> <br><br> 图像拼接:</p><br>等等，为什么乱了？<p></p><p>对，如果我们仔细观察，我们发现图片是被切割打乱了的，而且，我们判断，如果想得到原图，一定是要像拼积木一样把这些小块重新排列组合,那么，有什么规律在其中呢？我们该怎样一个一个拼呢？<br>其实，不难发现，我们在打开那两个标签后，我们发现一些整整齐齐的从上到下的标签，并且还有   <code>position</code>属性，x,值以12为差，最小1 最大 277，但y只有 0 或 58，由此分析出，从上到下，是我们取积木的顺序，取打乱图的第一个(x,y)坐标点对应处的一块积木，然后拼接到一个空白框的左上角，然后接着从乱图里面取出第二个位置的积木，紧挨着刚才那一个向右，此行满了换下一行，以此类推,最终得到一个完整图。<br>这样的话，我们的分析就结束了，然后我们通过像素比较就可以找出，缺口的位置，然后模拟拖动就ok了。<br>注意，实际应用中，我们需要实验性模拟拖动几次，再对拖动距离distance进行微修正，从而提高准确率。<br><br><br><br><a href="https://paste.ubuntu.com/p/y7PSVFdxsJ/" target="_blank" rel="noopener">源码</a><br><br><br><a href="https://www.jianshu.com/p/c8df1194b514" target="_blank" rel="noopener">参考博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;验证码的破解，是网站爬虫正常运行所必须具备的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="httpsp://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>快速熟悉 markdown</title>
    <link href="httpsp://yoursite.com/2018/10/02/learn_MarkDown/"/>
    <id>httpsp://yoursite.com/2018/10/02/learn_MarkDown/</id>
    <published>2018-10-02T12:24:50.086Z</published>
    <updated>2018-10-09T13:56:34.248Z</updated>
    
    <content type="html"><![CDATA[<p><em>快速熟悉</em><br>   <strong><em>markdown</em></strong></p><a id="more"></a>        <hr><blockquote><p>我们可以使用  <strong>大于号</strong> ，来表示引用</p></blockquote><p><del>我们在文本两边，加上一对双波浪号，就得到删除特效</del></p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">方框内部是文本,点击跳转百度</a><br><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fvu4hphapdj307g08edh6.jpg" alt="如果框起前面加个感叹号，代表我要加图片图片"><br>倘若我先写三个井号，代表我要开始<strong>列表</strong>，*、+号带领无序，1.带领有序</p><p>###</p><ul><li>k1</li><li>k2</li><li>k3</li></ul><ol><li>l1</li><li>l2</li><li>l3<br>###<br>一对反引号可以生成一个<code>背景加深</code>，这很讨喜<br>且表格的创建，格外方便，只用添加一点  |:—-: |这表明，我正在写表格<br>|电影|导演|评分|<br>|:—-:|:—-:|:—-:|<br>|天注定|贾樟柯|未知|<br>|江湖儿女|贾樟柯|未知|<br>|三峡好人|贾樟柯|未知|<br>|站台|贾樟柯|未知|</li></ol><p>我们规定用三个反引号括住代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const unsigned long int a ;</span><br><span class="line">a = inf ;</span><br></pre></td></tr></table></figure></p><p><a href="http://ww1.sinaimg.cn/large/006YPp6gly1fvu792e3vuj30wx0npmz5.jpg" target="_blank" rel="noopener">点击查看源码图</a><br><a href="http://ww1.sinaimg.cn/large/006YPp6gly1fvu6opl5ytj30j80ofagp.jpg" target="_blank" rel="noopener">点击查看效果图</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;快速熟悉&lt;/em&gt;&lt;br&gt;   &lt;strong&gt;&lt;em&gt;markdown&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="httpsp://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 更换主题</title>
    <link href="httpsp://yoursite.com/2018/09/29/newtheme/"/>
    <id>httpsp://yoursite.com/2018/09/29/newtheme/</id>
    <published>2018-09-29T15:13:40.218Z</published>
    <updated>2018-10-09T15:01:21.150Z</updated>
    
    <content type="html"><![CDATA[<p>简短的关于Hexo主题更新配置的说明<br>当你需要更换自己的博客主题时，你需要这样做：<br> <a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$ git clone https://*********</span><br><span class="line">$ npm install hexo-renderer-pug --save</span><br><span class="line">$ npm install hexo-renderer-sass --save   #下载主题文件和渲染器，如果在下载第三个文件的过程中报错，你可以试试npm国内镜像，或科学上网。</span><br><span class="line"></span><br><span class="line">theme: ****        #打开根目录下的_config.yml,并找到 theme关键字，更新自己主题名称</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g           # 生成静态页面</span><br><span class="line">$ hexo d           # 上传到github</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简短的关于Hexo主题更新配置的说明&lt;br&gt;当你需要更换自己的博客主题时，你需要这样做：&lt;br&gt;
    
    </summary>
    
    
      <category term="工具" scheme="httpsp://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
