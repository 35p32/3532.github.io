<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>35.32</title>
  
  <subtitle>这些表象就是崇高和滑稽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="httpsp://yoursite.com/"/>
  <updated>2019-04-12T09:37:48.322Z</updated>
  <id>httpsp://yoursite.com/</id>
  
  <author>
    <name>槨冧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter简单购物实例分析</title>
    <link href="httpsp://yoursite.com/2019/04/12/Flutter%E7%AE%80%E5%8D%95%E8%B4%AD%E7%89%A9%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>httpsp://yoursite.com/2019/04/12/Flutter简单购物实例分析/</id>
    <published>2019-04-12T07:45:45.652Z</published>
    <updated>2019-04-12T09:37:48.322Z</updated>
    
    <content type="html"><![CDATA[<p>分析了简单的一个基础Flutter购物例程</p><a id="more"></a><p> <em>首先看一下结果是什么样的</em></p><p>很简单，一个商品点击之后，按钮变成黑色，文字格式改变，再次点击，恢复原样</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1g1zzhksducj30ty1fdq3i.jpg" alt=""></p><h1 id="源码解释"><a href="#源码解释" class="headerlink" title="源码解释"></a>源码解释</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单java类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">Product</span><span class="params">(&#123;<span class="keyword">this</span>.name&#125;)</span></span>;</span><br><span class="line">  <span class="keyword">final</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数是 一个商品，一个布尔的函数模型</span></span><br><span class="line"><span class="function">typedef <span class="keyword">void</span> <span class="title">CartChangedCallback</span><span class="params">(Product product, bool inCart)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是主页面了吧</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingListItem</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Product product;</span><br><span class="line">  <span class="keyword">final</span> bool inCart;</span><br><span class="line">  <span class="keyword">final</span> CartChangedCallback onCartChanged; <span class="comment">//初始化一个函数</span></span><br><span class="line"></span><br><span class="line">  ShoppingListItem(&#123;Product product, <span class="keyword">this</span>.inCart, <span class="keyword">this</span>.onCartChanged&#125;)</span><br><span class="line">      : product = product,</span><br><span class="line">        <span class="keyword">super</span>(key: <span class="keyword">new</span> ObjectKey(product));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//依据自己的inCart变量更新按钮颜色</span></span><br><span class="line">  <span class="function">Color <span class="title">_getColor</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inCart ? Colors.black54 : Theme.of(context).primaryColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据inCart更新文字样式(是否有下划线)</span></span><br><span class="line">  <span class="comment">//注意，这里返回的是一个 TextStyle 的 Widget</span></span><br><span class="line">  <span class="function">TextStyle <span class="title">_getTextStyle</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!inCart) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TextStyle(</span><br><span class="line">      color: Colors.black54,</span><br><span class="line">      decoration: TextDecoration.lineThrough,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主页面build开始了</span></span><br><span class="line">  <span class="comment">//这里处理的只是一条Item信息</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        onCartChanged(product, !inCart);</span><br><span class="line">      &#125;,</span><br><span class="line">      leading: <span class="keyword">new</span> CircleAvatar(</span><br><span class="line">        backgroundColor: _getColor(context),</span><br><span class="line">        child: <span class="keyword">new</span> Text(product.name[<span class="number">0</span>]),</span><br><span class="line">      ),</span><br><span class="line">      title: <span class="keyword">new</span> Text(product.name, style: _getTextStyle(context)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态组件</span></span><br><span class="line"><span class="comment">//组件的状态会变化，要求外观做出相应的变化</span></span><br><span class="line"><span class="comment">//使用ShoppingList的时候传入一个关于Product的列表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingList</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  ShoppingList(&#123;Key key, <span class="keyword">this</span>.products&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> List&lt;Product&gt; products;</span><br><span class="line">  <span class="comment">//既然是动态的，必须覆写一个说明 动态是咋响应的函数</span></span><br><span class="line">  <span class="comment">//用createState</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">_ShoppingListState <span class="title">createState</span><span class="params">()</span> </span>=&gt; <span class="keyword">new</span> _ShoppingListState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这下面的就是，对应做出的状态变化处理</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ShoppingListState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ShoppingList</span>&gt; </span>&#123;</span><br><span class="line">  Set&lt;Product&gt; _shoppingCart = <span class="keyword">new</span> Set&lt;Product&gt;();</span><br><span class="line">  <span class="comment">//哦，观察下面就知道了，原来动态处理动作是 增删一个 Product的Set</span></span><br><span class="line">  <span class="comment">//这算是接收到下面传来的信息</span></span><br><span class="line">  <span class="comment">//凡是点击，静态件必定调用_handleCartChanged 函数，一旦调用这个函数，必定会让 动态件的Set集合发生改变</span></span><br><span class="line">  <span class="comment">//这算是接收到下面传来的信息</span></span><br><span class="line">  <span class="comment">//凡是点击，静态件必定调用_handleCartChanged 函数，一旦调用这个函数，必定会让 动态件的Set集合发生改变</span></span><br><span class="line">  <span class="comment">//动态件的集合改变了之后，直接影响到动态件的对于静态件的信息的刷新</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 整个颜色刷新方式是这样的，</span></span><br><span class="line"><span class="comment">  * 首先main函数里面的三个商品被放进了动态件的Products里面，这个时候什么动作都没有，所有静态件都展示成为蓝色</span></span><br><span class="line"><span class="comment">  * 然后你点击一个，静态件 onTap方法接收到了这个信息，然后调用动态件里面的增删方法，然后动态件的_shoppingCart 数组变化了，</span></span><br><span class="line"><span class="comment">  * 然后动态原件使用buid方法， 加载三个静态件，这个时候其中某些静态件的inCart已经改变了，那么就实现了颜色的刷新</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * 首先没有任何点击动作的时候，动态件加载调用静态件，这个时候动态件判断到了</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">_handleCartChanged</span><span class="params">(Product product, bool inCart)</span> </span>&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">if</span> (inCart)</span><br><span class="line">        _shoppingCart.add(product);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        _shoppingCart.remove(product);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'Shopping List'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> ListView(</span><br><span class="line">        padding: <span class="keyword">new</span> EdgeInsets.symmetric(vertical: <span class="number">8.0</span>),</span><br><span class="line">        children: widget.products.map((Product product) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ShoppingListItem(</span><br><span class="line">            product: product,</span><br><span class="line">            inCart: _shoppingCart.contains(product),</span><br><span class="line">            onCartChanged: _handleCartChanged,</span><br><span class="line">          );</span><br><span class="line">        &#125;).toList(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'Shopping App'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> ShoppingList(</span><br><span class="line">      products: &lt;Product&gt;[</span><br><span class="line">        <span class="keyword">new</span> Product(name: <span class="string">'Eggs'</span>),</span><br><span class="line">        <span class="keyword">new</span> Product(name: <span class="string">'Flour'</span>),</span><br><span class="line">        <span class="keyword">new</span> Product(name: <span class="string">'Chocolate chips'</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析了简单的一个基础Flutter购物例程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="httpsp://yoursite.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>匿名内部类如何导致内存泄漏?</title>
    <link href="httpsp://yoursite.com/2019/04/10/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>httpsp://yoursite.com/2019/04/10/匿名内部类导致内存泄露/</id>
    <published>2019-04-10T12:40:12.144Z</published>
    <updated>2019-04-10T12:42:58.768Z</updated>
    
    <content type="html"><![CDATA[<p>帮助理解匿名内部类机制</p><a id="more"></a><p>内存泄露一直是Java中需要避免的问题，也是面试时经常拿来考察编程能力的题目。比如下面这个问题，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问：为什么使用非静态内部类可能导致内存泄露？ 答：非静态内部类会持有外部类的引用，从而导致GC可能回收不了这部分引用，导致OOM</span><br></pre></td></tr></table></figure><p>但具体是怎么发生OOM的？还有这里面的原理是怎样的呢？</p><h4 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h4><p>打个比方在Android开发中最典型的例子就是Handler。<br>先来看一个截图，在Android开发中经常在Activity里写一个Handler实例用来处理线程通信，如果实例是非静态的，那么lint会提示这个错误</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/IEyQiaibFppKvtp6I3T795omzamw6dGInaAF2ibgFyB3iaCEHpqzic0wkOcudYJgd9IFFzzgGKsmFWgha0Lt7dOvxAg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="Alt text">Alt text</p><blockquote><p>‘This handler class should be static or leaks might occur’</p></blockquote><p>非静态匿名内部类会持有外部类的引用，从而导致内存泄露。可能这么说还不够清楚，举个例子，如果每次启动Acitivity就给Handler发一个耗时的Runnable，然后不停退出重进Activity，就能引发内存泄露。<br>因为mHandler会一直持有Activity的引用，而mHandler会一直被UI线程引用，存在引用关系的对象是不会被GC回收的。所以引用关系链上最终的Activity对象在没有被回收的情况下越来越多，就会导致OOM。</p><p>But why?</p><h4 id="为什么会持有外部类？"><a href="#为什么会持有外部类？" class="headerlink" title="为什么会持有外部类？"></a>为什么会持有外部类？</h4><p>其实这是个值得思考的问题，理清这个问题也就明白匿名内部类的设计初衷了。非静态匿名内部类持有外部类这种设计的原理和作用，可以看下面的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonStaticInnerDemo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String TAG = <span class="string">"Outter"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"inner run: "</span> + TAG);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们把这个类编译一下看产出结果，</p><blockquote><p>$ javac NonStaticInnerDemo.java<br>$ ls *.class<br>‘NonStaticInnerDemo$1.class’   NonStaticInnerDemo.class</p></blockquote><p>这里面$1就是匿名内部类了。非静态匿名内部类持有外部类可以总结为以下两个作用<br>· 当类B仅在类A内使用，匿名内部类可以让外部不知道类B的存在，从而减少代码的维护<br>· 类B持有类A，那么B就可以使用A中的变量，比如上面的代码，在Runnable里可以使用 NonStaticInnerDemo的 TAG</p><p>这两个作用可以解释 Why的问题。</p><p>But how?</p><h4 id="那么非静态匿名内部类是如何持有的？"><a href="#那么非静态匿名内部类是如何持有的？" class="headerlink" title="那么非静态匿名内部类是如何持有的？"></a>那么非静态匿名内部类是如何持有的？</h4><p>既然 $1 是匿名内部类的 class文件，那么看它的字节码可以看明白</p><blockquote><p>$ javap -c NonStaticInnerDemo\$1.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"NonStaticInnerDemo.java"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonStaticInnerDemo</span>$1 <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> NonStaticInnerDemo <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  NonStaticInnerDemo$<span class="number">1</span>(NonStaticInnerDemo);</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: aload_1</span><br><span class="line">       2: putfield      #1                  // Field this$0:LNonStaticInnerDemo;</span><br><span class="line">       <span class="number">5</span>: aload_0</span><br><span class="line">       6: invokespecial #2                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">9</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: new           #4                  // class java/lang/StringBuilder</span><br><span class="line">       <span class="number">6</span>: dup</span><br><span class="line">       7: invokespecial #5                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">      10: ldc           #6                  // String inner run:</span><br><span class="line">      12: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      15: invokestatic  #8                  // Method NonStaticInnerDemo.access$000:()Ljava/lang/String;</span><br><span class="line">      18: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      21: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      24: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">27</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注字节码中的 putfield这一行，这里表示有一个对 NonStaticInnerDemo的引用被存在了 this$0 中，也就是说它持有了外部类的对象。到这里就明白了为什么非静态匿名内部类会导致内存泄露了。</p><p>那么为什么静态匿名内部类不会呢？我们把demo代码的 runnable改为static，再编译一次看字节码看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">Compiled from <span class="string">"NonStaticInnerDemo.java"</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonStaticInnerDemo</span>$1 <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  NonStaticInnerDemo$<span class="number">1</span>();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: new           #3                  // class java/lang/StringBuilder</span><br><span class="line">       <span class="number">6</span>: dup</span><br><span class="line">       7: invokespecial #4                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">      10: ldc           #5                  // String inner run:</span><br><span class="line">      12: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      15: invokestatic  #7                  // Method NonStaticInnerDemo.access$000:()Ljava/lang/String;</span><br><span class="line">      18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      21: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      24: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">27</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比可以发现这里少了一行 putfield，说明对于一个静态匿名内部类来说，它不会持有外部类的引用。</p><p>既然如此，那么静态匿名内部类是如何引用外部类的变量呢？<br>其实很简单，因为它是静态的，所以它引用的外部类的变量也必须是静态对象，这样一来静态变量就会被存放在JVM内存模型的Method Area，从而可以直接引用到需要的变量。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Java的匿名内部类让代码更容易维护更清晰，但是非静态的内部类会持有外部类的引用，从而导致可能出现OOM。通过把内部类改为static，可以去掉对外部类的引用，同时能继续使用外部类的变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;帮助理解匿名内部类机制&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="httpsp://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android总结</title>
    <link href="httpsp://yoursite.com/2019/04/10/Android%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>httpsp://yoursite.com/2019/04/10/Android开发总结/</id>
    <published>2019-04-10T10:28:00.040Z</published>
    <updated>2019-04-10T11:18:14.900Z</updated>
    
    <content type="html"><![CDATA[<p>收录那些关于Android开发基础的知识</p><a id="more"></a><p>Activity 之间的数据传递是通过Bundle实现的，首先我们肯定知道，从一个页面跳转到另一个页面的时候，通常</p><p>我们使用这样的方法进行一个代码进行页面的跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent (MainActivity.<span class="keyword">this</span>, tempActivity.class );</span><br><span class="line">startActivity(Intent);</span><br></pre></td></tr></table></figure><p>这意思是从MainActivity跳转到tempActivity</p><p>但是既然跳转了为什么不带点数据过去呢？<br>如果这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent (MainActivity.<span class="keyword">this</span>, tempActivity.class );</span><br><span class="line"></span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(<span class="string">"来自母亲"</span>,<span class="string">"常回家看看"</span>);</span><br><span class="line">bundle.putInt(<span class="string">"数字"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">intent.putextras(bundle); </span><br><span class="line">startActivity(Intent);</span><br></pre></td></tr></table></figure><p>发现中间多了Bundle和 两个信息，Bundle就像一个船，船上我们现在放了两个信息，String和Int</p><p>船开向 <code>tempActivity</code> </p><p>然后到了 <code>tempActivity</code> 船上的信息怎么取下来信息呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现在位于tempActivity中</span></span><br><span class="line"><span class="comment">//我们知道MainAvtivity向这里发送了一个Bundle</span></span><br><span class="line"></span><br><span class="line">Bundle bundle =  getIntent().getExtras();</span><br><span class="line"></span><br><span class="line">String s = bundle.getString(<span class="string">"来自母亲"</span>);</span><br><span class="line">Int i = bundle.getInteger(<span class="string">"数字"</span>)；</span><br></pre></td></tr></table></figure><p>是不是很简单呢</p><p>随后我们从, <code>tempActivity.class</code> 跳转到 <code>MainActivity.this</code>,并且返回一些数据回去</p><p><code>MainActicity</code>接受回复过来的消息有点特殊：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在tempActivity</span></span><br><span class="line"></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.setString(<span class="string">"回复的消息"</span>,<span class="string">"知道了"</span>);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">setResult(Acticity.RESULT_OK,intent);</span><br><span class="line">finish(); <span class="comment">//关闭掉tmepActivity(),因为信息传入到了MainActivity里面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在MainActivity</span></span><br><span class="line"></span><br><span class="line">startActivityForResult(intent,<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode , intent data)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onActivityResult(requestCode, resultCode ,data);</span><br><span class="line">Toast.makeText(Activity.<span class="keyword">this</span>,data.getExtras().getString(<span class="string">"title"</span>),Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收录那些关于Android开发基础的知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="httpsp://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java备忘录Ⅲ</title>
    <link href="httpsp://yoursite.com/2019/04/10/Java%E5%A4%87%E5%BF%98%E5%BD%95%E2%85%A2/"/>
    <id>httpsp://yoursite.com/2019/04/10/Java备忘录Ⅲ/</id>
    <published>2019-04-10T10:13:49.026Z</published>
    <updated>2019-04-10T09:55:33.379Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><hr><p>写在前面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">完整的安装配置Oracle数据库，似乎对于我来说真的不是一件容易的事，算来已经差不多花费了三天的时间。</span><br><span class="line">而且明显的感到是很难过的三天。</span><br></pre></td></tr></table></figure><p>下面从一个代码实例中来学习,如何利用<code>JDBC</code>来连接并影响数据库的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no6.no61.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//数据库驱动，这些数据量基本上都是用  static  final 来加以定义</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DBDRIVER = <span class="string">"oracle.jdbc.driver.OracleDriver"</span> ;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//连接基本信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DBURL = <span class="string">"jdbc:oracle:thin:@localhost:1521:SOUJIUSUBDB"</span> ;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"system"</span> ;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"soujiu"</span> ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//加载数据库驱动程序，此时不用实例化，这是必须的</span></span><br><span class="line">Class.forName(DBDRIVER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接数据库 ，以上两句基本上是打开Oracle数据库的标配</span></span><br><span class="line"><span class="comment">//知识点，实例化一个 Connection 类</span></span><br><span class="line">Connection conn = DriverManager.getConnection(DBURL,USER,PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本章知识点，需要实例化 一个statement类，</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新功能的数据库语句</span></span><br><span class="line">String sql = <span class="string">"insert into member(mid,name,birthday,age,note) values (2,'张三',TO_DATE('1999-10-5','yyyy-mm-dd'),24,'英俊')"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Select 功能的语句</span></span><br><span class="line">String sql2 = <span class="string">"Select mid,name,birthday,age,note from member"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行插入sql语句</span></span><br><span class="line"><span class="keyword">int</span> len =  stmt.executeUpdate(sql); </span><br><span class="line"><span class="comment">//执行查询sql语句 </span></span><br><span class="line">ResultSet rs = stmt.executeQuery(sql2); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出插入操作对数据库的影响</span></span><br><span class="line">System.out.println(<span class="string">"影响的行数是:"</span>+ len+<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用get得到 存贮的 信息</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> mid = rs.getInt(<span class="string">"mid"</span>);</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String birthday = rs.getString(<span class="string">"birthday"</span>);</span><br><span class="line"><span class="keyword">int</span> age  = rs.getInt(<span class="string">"age"</span>);</span><br><span class="line">String note = rs.getString(<span class="string">"note"</span>);</span><br><span class="line">System.out.println(mid + <span class="string">","</span>+name+<span class="string">","</span>+ birthday+<span class="string">","</span>+ age+<span class="string">","</span> +note);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭数据库</span></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结几个要点：</p><p><strong><em>连接数据库，一定要有这么几个东西： Oracle的驱动，所连接数据库的基本配置信息，用户名，密码</em></strong></p><p><strong><em>加载数据库驱动程序：        Class.forName(DBDRIVER);</em></strong></p><p><strong><em>两个知识点： Connection 类 和 Statement 类</em></strong></p><p><strong>*执行  sql 语句使用executeUpdate() , 或者 executeQuery() 这种方法**</strong></p><hr><p>但是statement 这个类，我们注意到，必须要有一个冗长的既定的，sql语句，因此 已经不再使用了，所以我们引入 它的子接口： PreparedStatement</p><p>PraparedStatement 可以动态的设置我们需要的语句，先使用？进行占位，然后它有很多的 set 方法，我们可以为之后我们的sql 问号标记 置入 真实值。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no6.no61.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectTest_2</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DBDRIVER = <span class="string">"oracle.jdbc.driver.OracleDriver"</span> ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DBURL = <span class="string">"jdbc:oracle:thin:@localhost:1521:SOUJIUSUBDB"</span> ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"system"</span> ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"soujiu"</span> ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class.forName(DBDRIVER);</span><br><span class="line">Connection conn = DriverManager.getConnection(DBURL,USER,PASSWORD);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into member(mid,name,birthday,age,note) values (3,?,?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 connection 类的 preparestatement  方法 得到一个 PreparedStatement 类</span></span><br><span class="line">PreparedStatement stmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化几个数据</span></span><br><span class="line">        String name = <span class="string">"受思维奴役的人"</span>;</span><br><span class="line">Date birthday = <span class="keyword">new</span> Date(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">String note = <span class="string">"丧失了批判性"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将上面的初始化过的几个数据设置进stmt里面</span></span><br><span class="line"></span><br><span class="line">stmt.setString(<span class="number">1</span>,name);</span><br><span class="line">stmt.setDate(<span class="number">2</span>,<span class="keyword">new</span> java.sql.Date(birthday.getTime())); <span class="comment">//需要特殊记忆</span></span><br><span class="line">stmt.setInt(<span class="number">3</span>,age);</span><br><span class="line">stmt.setString(<span class="number">4</span>, note);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = stmt.executeUpdate();</span><br><span class="line">System.out.println(<span class="string">"影响的行数是："</span>+ len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭数据库</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>因此在工程中里面大多使用<code>preparestatement();</code> </em></strong></p><p>以下三点一定记住：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connention conn = DrinerManager.getConnection( ,  , );</span><br><span class="line"></span><br><span class="line">PreparedSatement stmt  = conn.getprepareStatement(sql );</span><br><span class="line"></span><br><span class="line">ResultSet rs = stmt.executeUpdate();</span><br></pre></td></tr></table></figure><hr><p>接下来</p><p><img src="G:\photo\java&amp;datebase.PNG" alt=""></p><p>数据层要想和数据库打交道，我们必须制造出来一些可以在java程序里面运行的<code>简单Java类</code>，这种类所含的属性适合数据表相匹配的,这个类看起来就和 表很像。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no6.no61.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//以下几个 属性，是和数据库里面的数据表相对应的。</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> Date hiredate;</span><br><span class="line"><span class="keyword">private</span> Double sal;</span><br><span class="line"><span class="keyword">private</span> Double com;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getCom</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCom</span><span class="params">(Double com)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.com = com;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><font color="blue" size="9">DAO模式实现</font><img src="G:\photo\mydraw1.PNG" alt=""></p><p>先有一个基本的表,表里面是基本的字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本的表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> Date hiredate;</span><br><span class="line"><span class="keyword">private</span> Double sal;</span><br><span class="line"><span class="keyword">private</span> Double comm;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(Integer empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(Double comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> vo.Emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义emp数据层的操作标准</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 这是一个接口 </span></span><br><span class="line"><span class="comment"> * 这个接口 充满了一系列的动作，是对基本表进行处理的动作，谁要 实例化我这个接口，谁就要覆写方法。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 相当于用户层到数据层的调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35.32</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEmpDAO</span> </span>&#123;</span><br><span class="line"><span class="comment">//创造一个Emp 表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCreate</span><span class="params">(Emp vo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//更新一个Emp表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doUpdate</span><span class="params">(Emp vo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doRemoveBatch</span><span class="params">(Set&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//根据雇员编号查询指定的雇员信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Emp <span class="title">findById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//查询所有雇员信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  List&lt;Emp&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//分页查询, 当前页，每页行数，进行模糊查询的数据列，模糊查询的关键字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">findAllSplit</span><span class="params">(Integer currentpage, Integer linesize, String column ,String keywords)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//统计查询数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAllCount</span><span class="params">(String column, String keywords)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是对这个接口的实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dao.IEmpDAO;</span><br><span class="line"><span class="keyword">import</span> vo.Emp;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本类是对于接口的实例化，本类要手把手地 进行数据的处理</span></span><br><span class="line"><span class="comment"> * 从本类的名称可以看出，本类是对于 IEMPDAO 操作标准的  implements （实现）</span></span><br><span class="line"><span class="comment"> * 本类介于用户层，不和数据库打交道</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35.32</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpDAOImpl</span> <span class="keyword">implements</span> <span class="title">IEmpDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Connection conn;</span><br><span class="line"><span class="keyword">private</span> PreparedStatement pstmt;</span><br><span class="line"><span class="comment">//这个构造方法，要求你外部给我一个通往数据库的连接，这样，我才能处理数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EmpDAOImpl</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.conn = conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCreate</span><span class="params">(Emp vo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"insert into emp(empno,ename,job,hiredat,sal,comm) value(?,?,?,?,?,?)"</span>;</span><br><span class="line"><span class="keyword">this</span>.pstmt  = <span class="keyword">this</span>.conn.prepareStatement(sql); <span class="comment">//pstmt挂载一个sql语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为挂载语句设置值</span></span><br><span class="line"><span class="keyword">this</span>.pstmt.setInt(<span class="number">1</span>, vo.getEmpno());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setString(<span class="number">2</span>, vo.getEname());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setString(<span class="number">3</span>, vo.getJob());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setDate(<span class="number">4</span>,<span class="keyword">new</span> java.sql.Date(vo.getHiredate().getTime()));</span><br><span class="line"><span class="keyword">this</span>.pstmt.setDouble(<span class="number">5</span>, vo.getSal());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setDouble(<span class="number">6</span>,vo.getComm());</span><br><span class="line"><span class="comment">//根据挂载语句执行相应操作</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.pstmt.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doUpdate</span><span class="params">(Emp vo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"update from  emp set ename=? ,job=? ,hiredat=?,sal=?,comm=? where empno=? "</span>;</span><br><span class="line"><span class="keyword">this</span>.pstmt  = <span class="keyword">this</span>.conn.prepareStatement(sql); <span class="comment">//pstmt挂载一个sql语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为挂载语句设置值</span></span><br><span class="line"><span class="keyword">this</span>.pstmt.setString(<span class="number">1</span>, vo.getEname());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setString(<span class="number">2</span>, vo.getJob());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setDate(<span class="number">3</span>,<span class="keyword">new</span> java.sql.Date(vo.getHiredate().getTime()));</span><br><span class="line"><span class="keyword">this</span>.pstmt.setDouble(<span class="number">4</span>, vo.getSal());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setDouble(<span class="number">5</span>,vo.getComm());</span><br><span class="line"><span class="keyword">this</span>.pstmt.setInt(<span class="number">6</span>,vo.getEmpno());</span><br><span class="line"><span class="comment">//根据挂载语句执行相应操作</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.pstmt.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doRemoveBatch</span><span class="params">(Set&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ids == <span class="keyword">null</span> || ids.size() == <span class="number">0</span>) &#123; <span class="comment">//没有要删除的内容</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">//请注意我们现在是要根据sets 里面的ids </span></span><br><span class="line"><span class="comment">//来删除多条记录</span></span><br><span class="line"><span class="comment">//只要你的码 id 在 ids 里面，那么就删除这一条记录</span></span><br><span class="line">sql.append(<span class="string">"DELETE FROM EMP WHERE EMPNO IN ("</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把所有序号提取出来构造成一个完整的sql语句</span></span><br><span class="line">Iterator&lt;Integer&gt; iter =  ids.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">sql.append(iter.next()).append(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">sql.delete(sql.length()-<span class="number">1</span>,sql.length()).append(<span class="string">")"</span>);</span><br><span class="line"><span class="keyword">this</span>.pstmt = <span class="keyword">this</span>.conn.prepareStatement(sql.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  pstmt.executeUpdate() == ids.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Emp <span class="title">findById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select  ename,job,hiredate,sal,comm from Emp where empno = ?"</span>;</span><br><span class="line"><span class="keyword">this</span>.pstmt = <span class="keyword">this</span>.conn.prepareStatement(sql); <span class="comment">//sql语句挂载</span></span><br><span class="line"><span class="keyword">this</span>.pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">ResultSet rs = <span class="keyword">this</span>.pstmt.executeQuery();</span><br><span class="line">Emp emp  = <span class="keyword">new</span> Emp();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">emp.setEname(rs.getString(<span class="number">1</span>));</span><br><span class="line">emp.setJob(rs.getString(<span class="number">2</span>));</span><br><span class="line">emp.setHiredate(rs.getDate(<span class="number">3</span>));</span><br><span class="line">emp.setSal(rs.getDouble(<span class="number">4</span>));</span><br><span class="line">emp.setComm(rs.getDouble(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> emp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;Emp&gt; emplist = <span class="keyword">new</span> ArrayList&lt;Emp&gt;(); <span class="comment">//存放多个Emp对象</span></span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select empno,ename,job,hiredate,sal,comm from Emp "</span>;</span><br><span class="line"><span class="keyword">this</span>.pstmt = <span class="keyword">this</span>.conn.prepareStatement(sql);<span class="comment">//挂载sql语句</span></span><br><span class="line">ResultSet  rs = <span class="keyword">this</span>.pstmt.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123; <span class="comment">//不用怀疑，就是这样使用的，  一个一个数据都是按顺序排列好的，所以储存着多条信息的多个字段</span></span><br><span class="line">Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">emp.setEname(rs.getString(<span class="number">1</span>));</span><br><span class="line">emp.setJob(rs.getString(<span class="number">2</span>));</span><br><span class="line">emp.setHiredate(rs.getDate(<span class="number">3</span>));</span><br><span class="line">emp.setSal(rs.getDouble(<span class="number">4</span>));</span><br><span class="line">emp.setComm(rs.getDouble(<span class="number">5</span>));</span><br><span class="line">emplist.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> emplist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">findAllSplit</span><span class="params">(Integer currentpage, Integer linesize, String column, String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;Emp&gt; emplist = <span class="keyword">new</span> ArrayList&lt;Emp&gt;(); <span class="comment">//存放多个Emp对象</span></span><br><span class="line">String sql = <span class="string">"select * from (select empno,ename,job,hiredate,sal,comm,rownum rn "</span></span><br><span class="line">+ <span class="string">" from  Emp "</span></span><br><span class="line">+ <span class="string">" where "</span>+ column +<span class="string">" like ? and rownum &lt;=?) temp "</span></span><br><span class="line">+ <span class="string">" where tmep.rn &gt;? "</span>;</span><br><span class="line"><span class="keyword">this</span>.pstmt = <span class="keyword">this</span>.conn.prepareStatement(sql);<span class="comment">//挂载sql语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.pstmt.setString(<span class="number">1</span>,<span class="string">"%"</span>+keyword+<span class="string">"%"</span>);</span><br><span class="line"><span class="keyword">this</span>.pstmt.setInt(<span class="number">2</span>, currentpage*linesize);</span><br><span class="line"><span class="keyword">this</span>.pstmt.setInt(<span class="number">3</span>, (currentpage-<span class="number">1</span>)*(linesize ));</span><br><span class="line"></span><br><span class="line">ResultSet  rs = <span class="keyword">this</span>.pstmt.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123; <span class="comment">//不用怀疑，就是这样使用的，  一个一个数据都是按顺序排列好的，所以储存着多条信息的多个字段</span></span><br><span class="line">Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">emp.setEname(rs.getString(<span class="number">1</span>));</span><br><span class="line">emp.setJob(rs.getString(<span class="number">2</span>));</span><br><span class="line">emp.setHiredate(rs.getDate(<span class="number">3</span>));</span><br><span class="line">emp.setSal(rs.getDouble(<span class="number">4</span>));</span><br><span class="line">emp.setComm(rs.getDouble(<span class="number">5</span>));</span><br><span class="line">emplist.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> emplist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAllCount</span><span class="params">(String column, String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select count(empno)from emp where "</span>+ column +<span class="string">"like ?"</span>;</span><br><span class="line"><span class="keyword">this</span>.pstmt =  <span class="keyword">this</span>.conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.pstmt.setString(<span class="number">1</span>, <span class="string">"%"</span>+keywords+<span class="string">"%"</span>);</span><br><span class="line">ResultSet rs = <span class="keyword">this</span>.pstmt.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">return</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;写在前面：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Java" scheme="httpsp://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java备忘录Ⅱ</title>
    <link href="httpsp://yoursite.com/2019/04/10/Java%E5%A4%87%E5%BF%98%E5%BD%95%E2%85%A1/"/>
    <id>httpsp://yoursite.com/2019/04/10/Java备忘录Ⅱ/</id>
    <published>2019-04-10T10:02:11.384Z</published>
    <updated>2019-04-10T10:23:30.709Z</updated>
    
    <content type="html"><![CDATA[<p>第二部分<br><a id="more"></a></p><hr><p>本篇更多偏重系统类及系统接口</p><p>如何理解 String 类对象不能被修改?</p><p><a href="https://blog.csdn.net/guyuealian/article/details/50935168" target="_blank" rel="noopener">点击查看</a></p><p>如果我们现在想实现一个经常修改的    <code>String</code> 对象，必须使用<code>StringBuilder、StringBuffer</code></p><p>StringBuffer 通过查询文档可知，它有个方法是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">append</span><span class="params">(<span class="keyword">char</span>[] str)</span></span></span><br><span class="line"><span class="function">将 <span class="keyword">char</span> 数组参数的字符串表示形式追加到此序列。</span></span><br><span class="line"><span class="function">按顺序将数组参数中的字符追加到此序列的内容中。此字符将增加该参数的长度。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">该方法的总体效果与以下操作过程的效果相同：先使用 String.<span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[])</span> 方法将参数转换为字符串，然后将所得字符串的字符追加到此字符序列。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">参数：</span></span><br><span class="line"><span class="function">str - 要追加的字符。</span></span><br><span class="line"><span class="function">返回：</span></span><br><span class="line"><span class="function">此对象的一个引用。</span></span><br></pre></td></tr></table></figure><p>也就是说，这个方法的返回值也是StringBuffer 本身，也就是说，我们可以不停地<code>.append</code></p><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no31.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer_test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>); </span><br><span class="line">sb.append(<span class="string">"World"</span>).append(<span class="string">"!"</span>);        <span class="comment">//连续append</span></span><br><span class="line">change(sb);                            <span class="comment">//静态方法，改变sb</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer sb)</span> </span>&#123;</span><br><span class="line">sb.append(<span class="string">"\n"</span>).append(<span class="string">"This is change"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 和       StringBuffer 都继承自  <em>CharSequence</em> 接口</p><p>这也就是说，如果有这样一句代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharSquence  cs = <span class="string">"HelloWorld!"</span>   ;</span><br></pre></td></tr></table></figure><p>这意味着 向上转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(cs);</span><br></pre></td></tr></table></figure><p>cs 使用了 String 重写的 toString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CharSquence  cs = <span class="string">"HelloWorld!"</span>;</span><br><span class="line">cs.append(<span class="string">"!"</span>);   <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><hr><p>StringBuffer变为String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb  = <span class="keyword">new</span> StringBuffer(<span class="string">"HelloWorld!"</span>);</span><br><span class="line">String s = sb.toString();</span><br></pre></td></tr></table></figure><p>String 变为StringBuffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb  = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure><hr><p><strong><em>然后， StringBuffer 类里面其实有很多 类似于  insert， delete 的对字符串进行操作的方法，这里不再一一声明，使用时干脆简单</em></strong></p><p>StringBuilder 类于StringBuffer 类大体相同，仅有的不同是:</p><p><u>StringBuffer</u> 是同步类 （你去看它文档，里面全都是 synchronized 关键字）</p><p><u>StringBuilder</u>是非同步类</p><p><a href="https://blog.csdn.net/qq_29244755/article/details/78308636" target="_blank" rel="noopener">Java数字操作类</a></p><p>Java 日期操作类</p><p>基本观察 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no31.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Riqichuli</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(d.getTime());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Sat Feb 09 16:08:04 CST 2019</span></span><br><span class="line"><span class="comment">1549699684760</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>SimpleDateForma</code> 就像是一个日期塑造器，我们首先声明这个制造器是什么样子的，然后通过向里面加入时间，时间经过处理得到指定格式的 日期字符串。</p><p>SimpleDateFormat 类数据有几个基本方法:</p><p><strong>.format()</strong> ：将Date型转化为String型</p><p><strong>.parse()</strong>：将string转化为日期型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no31.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Riqichuli</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(d.getTime());</span><br><span class="line"></span><br><span class="line">Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">String sd = <span class="string">"2001-12-12 2-2-22.222"</span>;</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH-mm-ss.SSS"</span>); <span class="comment">//日期塑造器</span></span><br><span class="line">String s1 = sdf.format(d1);  <span class="comment">//向塑造器里面加入 日期,就可以塑造出指定格式的日期字符串</span></span><br><span class="line">Date   d2 = sdf.parse(sd);  <span class="comment">// 想塑造器里面传入 字符串，可以解析成特定格式的日期</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(d2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><font color="red">对象数组的排序</font><p><strong><em>从 C++ 中理解，要想实现一个结构体数组的排序，结构体里面必须重载一个排序的方法在 Java 之中，若想对一个类进行排序，这个类必须继承自  Comparable 接口， 同时必须覆写 Compareto 方法，好让 Arrary 的 sort 方法知道，究竟是依靠什么进行排序的</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no31.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Book</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title ,<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price =price;</span><br><span class="line"><span class="keyword">this</span>.title =title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"书名是:："</span> + <span class="keyword">this</span>.title + <span class="string">"价格是:"</span> + <span class="keyword">this</span>.price ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Book o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o.price &gt; <span class="keyword">this</span>.price) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(o.price &lt; <span class="keyword">this</span>.price) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duixiangshuzubijiao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Book books[] = <span class="keyword">new</span> Book [] &#123;</span><br><span class="line"><span class="keyword">new</span> Book(<span class="string">"Java开发"</span>,<span class="number">123.1</span>),</span><br><span class="line"><span class="keyword">new</span> Book(<span class="string">"Java编程思想"</span>,<span class="number">79.8</span>),</span><br><span class="line"><span class="keyword">new</span> Book(<span class="string">"数据库开发"</span>,<span class="number">18.1</span>)&#125;;</span><br><span class="line">Arrays.sort(books);</span><br><span class="line">System.out.println(Arrays.toString(books));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <u>二叉树</u> 进行CompareAble 对象进行练习:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no31.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">private</span> Object []res;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> foot ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="comment">/********************Node节点开始************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span>  Comparable value;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Comparable value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">private</span> Node left; <span class="comment">//左孩子</span></span><br><span class="line"><span class="keyword">private</span> Node right; <span class="comment">//右孩子</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.value.compareTo(node.value) &gt; <span class="number">0</span>) &#123;<span class="comment">//node 比当前节点大</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right = node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.right.addNode(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;                                   <span class="comment">//node比当前节点小</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left = node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.left.addNode(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">toNodeArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.toNodeArray();</span><br><span class="line">&#125;</span><br><span class="line">BinaryTree.<span class="keyword">this</span>.res[BinaryTree.<span class="keyword">this</span>.foot ++ ]=<span class="keyword">this</span>.value;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.toNodeArray();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/***********************Node节点结束*********************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object temp)</span> </span>&#123;  <span class="comment">//向二叉树中添加节点</span></span><br><span class="line">Comparable temp2 =(Comparable) temp;</span><br><span class="line">Node  temp3 = <span class="keyword">new</span> Node(temp2);  <span class="comment">//传入的是Obiect对象，转换成 Node对象</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.root = temp3;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.root.addNode(temp3);<span class="comment">//交给节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.count ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object[] toArray() &#123; <span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">foot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.res = <span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; </span><br><span class="line"><span class="keyword">this</span>.root.toNodeArray();      <span class="comment">//交给节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Book</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title ,<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price =price;</span><br><span class="line"><span class="keyword">this</span>.title =title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"书名是:："</span> + <span class="keyword">this</span>.title + <span class="string">"价格是:"</span> + <span class="keyword">this</span>.price ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Book o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o.price &gt; <span class="keyword">this</span>.price) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(o.price &lt; <span class="keyword">this</span>.price) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Erchashu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BinaryTree bt = <span class="keyword">new</span> BinaryTree();</span><br><span class="line">bt.add(<span class="keyword">new</span> Book(<span class="string">"Java开发"</span>,<span class="number">123.1</span>));</span><br><span class="line">bt.add(<span class="keyword">new</span> Book(<span class="string">"Java编程思想"</span>,<span class="number">9.8</span>));</span><br><span class="line">bt.add(<span class="keyword">new</span> Book(<span class="string">"数据库开发"</span>,<span class="number">18.1</span>));</span><br><span class="line">bt.add(<span class="keyword">new</span> Book(<span class="string">"Python网络实战"</span>,<span class="number">14.1</span>));</span><br><span class="line">Object ob[] = bt.toArray();</span><br><span class="line">System.out.println(Arrays.toString(ob));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Java 的反射机制</p><p>如果你想知道一个对象的出处，也就是这个对象属于的类是什么，这很容易办到。</p><p>几乎每个类都有一个方法叫做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.getClass();</span><br></pre></td></tr></table></figure><p>这样的话，得到出处就很简单了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fanshe</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Date date  = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(date.getClass());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class java.util.Date</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面介绍几种常用的完成  <code>反射操作</code>   中的 <code>反</code> 操作也就是取得 类出处 的模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fanshe</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Date date  = <span class="keyword">new</span> Date();          <span class="comment">//实例化对象</span></span><br><span class="line">Class&lt;?&gt; cls = date.getClass() ;  <span class="comment">//看得懂这个模板 </span></span><br><span class="line">System.out.println(cls);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果同上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fanshe</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; cls = Date.class ; </span><br><span class="line">System.out.println(cls);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果同上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>最常用的一个模板:</p><p>你看这个例程并没有导入包，这比上面两个好很多，这样做的好处现在还理解不到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fanshe</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">"java.util.Date"</span>) ; </span><br><span class="line">System.out.println(cls);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="9">反射机制的理解</font><p><em>反射机制是什么意思？ 它是用来做什么的？</em></p><p>首先观察一下工厂设计模式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Eating Apples!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Eating Orange!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">chose</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"Apple"</span>.equals(s))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"Orange"</span>.equals(s))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Orange();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory_test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Fruit f =  Factory.chose(<span class="string">"Orange"</span>);</span><br><span class="line">f.eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们清楚地看到了工厂设计模式是怎样运行的，但是我们可以提出这样一个问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果我们不断加入新的水果种类，那么程序员就要不仅仅增加新的类，还要在Factory之中加入新的<span class="keyword">if</span> <span class="keyword">else</span>判别</span><br></pre></td></tr></table></figure><p>这是繁琐的</p><p>先看看改进过后的Factory设计模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"新的苹果!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃苹果!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Orange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"新的橘子!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃橘子!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getInstance</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">Fruit f = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">f = (Fruit )Class.forName(s).newInstance();  <span class="comment">//反射</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gongchanggaijin</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fruit f = Factory.getInstance(<span class="string">"no3.no32.package1.Orange"</span>);</span><br><span class="line">f.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>我们只在 Factory 上改进了一番，我们是这样想的，以往的 Factory 接受一个字符串，然后进行判断，然后进行 返回，这真的好幼稚，我们利用反射， 你瞧，不管你传入的字符串是什么，我只用 找到字符串的 祖先类，就像上面的 那个例子，传入字符串利用反射找到祖先是  Orange ，然后利用 Orange 的 NewInstance 方法，获得Orange 的无参构造实例对象，然后转型成为Fruit 对象，直接返回，一来二去 ，实现智能化、自动化的理想状态。</em></strong></p><p>最最重要的是:</p><font color="green">我们在Factory 设计模式上遇到的问题就叫做  耦合化 ，旧的工厂设计模式里面有 new 这个关键字，这是耦合化的元凶！ 我们通过 newInstance 联合 反射机制， 成功避免了 繁琐的 耦合状态，这就是反射解耦和</font><font color="blue" size="9">反射调用构造方法</font><p>观察代码</p><p>我们在<code>no4.no11.package1</code>包下有一个<code>Student</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no4.no11.package1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"姓名是:"</span> + name + <span class="string">"年龄是:"</span>+ age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>no4.no11.package2</code>下有一个<code>StudentTest</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no4.no11.package2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">"no4.no11.package1.Student"</span>);</span><br><span class="line">Object obj = cls.newInstance();</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两段代码的用意是，在一个包里面，利用反射调用其它包的无参构造方法。</p><p>但是第二段执行的时候会报错，因为 <code>Student</code>类并没有无参构造方法</p><p>但我们实例化对象就是要用到构造方法不是吗，以前直接用 <code>newInstance</code>十分方便，但别忘了，这个newInstance 也正是无参构造方法呀，一旦实例化的类没有无参构造方法，就像我们的 Sudent 这样，那么我们就不能这样用。</p><p>我们使用  <strong>getConstructor</strong> 尝试获取类的构造方法</p><p>主程序改进如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no4.no11.package2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">"no4.no11.package1.Student"</span>);</span><br><span class="line">Constructor&lt;?&gt; con = cls.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">Object obj = con.newInstance(<span class="string">"小王"</span>,<span class="number">23</span>);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行 ： 获取反射的类</p><p>第二行： 用反射类得到构造方法</p><p>第三行： 用构造方法得到实例化对象</p><p>第四行： 输出实例化对象</p><p><strong>总结</strong>： 改进了一下，成功了，但是你想想，问题的源头就是我们没有在<code>Student</code>中留存一个 无参构造，否则直接newInstance 多么直接简单啊。</p><hr><font color="blue" size="9">利用反射获得对象方法</font><p>产生实例化对象的三种方式是：</p><ol><li>new</li><li>clone</li><li>reflect （反射）</li></ol><p>观察如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no4.no11.package2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">"no4.no11.package1.Student"</span>);</span><br><span class="line">Object obj = cls.newInstance(); <span class="comment">//实例化对象</span></span><br><span class="line"></span><br><span class="line">String fieldname = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">Method setmet = cls.getMethod(<span class="string">"set"</span>+ Initcap(fieldname),String.class);  <span class="comment">//得到setter方法</span></span><br><span class="line">Method getmet = cls.getMethod(<span class="string">"get"</span>+ Initcap(fieldname)); <span class="comment">//得到getter方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法必须有实例化对象, invoke 是调用；作用于 的意思 */</span></span><br><span class="line">setmet.invoke(obj, <span class="string">"小王"</span>); <span class="comment">//setmet 作用于obj， 这相当于 setName("小王");</span></span><br><span class="line">System.out.println(getmet.invoke(obj));<span class="comment">//getmet 作用于obj， 这相当于 getName()；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Initcap</span><span class="params">(String s )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (s.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察注释，可理解到通过反射获得方法之后，方法需要作用于对象才能够起效果。</p><hr><hr><hr><font color="red" size="9"> IO操作</font><p>要想进行所有文件及问文件内容的开发，应该使用Java.io包完成，而 java.io 的知识可以分为 五个核心类，一个核心接口。</p><blockquote><p> 五个核心类： File , InputStream , OutputStream , Reader , Writer</p><p> 一个核心接口：Serializable</p></blockquote><p>其中，File 类是唯一一个于文件操作本身（创建，删除）有关的类，但是不涉及文件的而具体内容。</p><p>首先要通过它提供的构造方法定义一个要操作的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOperations</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File  file1 = <span class="keyword">new</span> File(<span class="string">"D:\\1.txt"</span>);     <span class="comment">//构造方法要求接收路径字符串</span></span><br><span class="line">System.out.println(file1.createNewFile());        <span class="comment">//D盘下新建 1.txt文件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    file1.delete();    // 删除file1文件</p></blockquote><blockquote><p>​    file1.exists();      //判断文件是否存在，返回布尔值</p></blockquote><p>​    <em>这也就是基本的文件创建和删除等基本操作</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">但是这里提出一个小问题，也就是说，虽然在 windows 下的分隔符是 \ ,但是在 Linux 下的分隔符却是 / ,因此，我们在Windows系统上开发的程序部署到Linux上的时候很有可能出现路径错误，这个问题说大不大，说小不小，值得注意，所以，我们以后就使用这样的方式描述分隔符(以上面的文件路径为例)：</span><br><span class="line"></span><br><span class="line">(<span class="string">"D："</span> + File.separator + <span class="string">"1.txt"</span>);</span><br></pre></td></tr></table></figure><font color="red">关于File 路径的第二个问题</font><p>上面的路径是直接在盘上的，如果有这样一个路径呢？</p><blockquote><p>D:\ \ demo\1.txt</p></blockquote><p>此时D盘中并不存在 demo 文件夹，能不能一步到位，创建demo文件夹的同时，创建 1.txt呢？</p><p>答案是不能</p><p> 首先 <code>D: \ \demo</code> 这个路径，是上面路径的<code>父路径</code>，因此，观察下面的代码,  方法名称在下面也列出来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOperations</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File  file1 = <span class="keyword">new</span> File(<span class="string">"D:\\demo\\1.txt"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file1.getParentFile().exists()) &#123;  <span class="comment">//如果父路径不存在</span></span><br><span class="line">            <span class="comment">//返回值就不同啊。getParentFile()的返回值是File型的。</span></span><br><span class="line">            <span class="comment">//而getParent() 的返回值是String型的。</span></span><br><span class="line">            <span class="comment">//mkdirs是File类里面的方法，所以当然得用f.getParentFile().mkdirs();</span></span><br><span class="line"><span class="comment">// 用 mkdirs() 方法进行父路径对应文件夹的创建,不管是几级，不管深度，都能一步创建</span></span><br><span class="line">            file1.getParentFile().mkdirs(); </span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">/*已经有了父路径*/</span></span><br><span class="line">System.out.println(file1.createNewFile());        <span class="comment">//D盘下新建 1.txt文件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>file.length() ;  文件长度</p></blockquote><blockquote><p>file.isFile() ; 返回布尔，判断是否是文件</p></blockquote><blockquote><p>file.isDirectory() ;   返回布尔，判断是否是目录</p></blockquote><blockquote><p>file.lastModified() ; 返回long ，上次修改的时间</p></blockquote><p>使用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOperations2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"D:\\my.jpg"</span>);</span><br><span class="line">System.out.println(<span class="string">"是否是目录: "</span>+file.isDirectory());</span><br><span class="line">System.out.println(<span class="string">"是否是文件: "</span>+file.isFile());</span><br><span class="line">System.out.println(<span class="string">"文件大小: "</span>+ <span class="keyword">new</span> BigDecimal((<span class="keyword">double</span>)file.length()/<span class="number">1024</span>/<span class="number">1024</span>).divide(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>),<span class="number">2</span>,BigDecimal.ROUND_HALF_UP)+<span class="string">"M"</span>);</span><br><span class="line">System.out.println(<span class="string">"上次修改时间: "</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date(file.lastModified())));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获得一个盘下面所有的文件夹</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FielOperations3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"D:"</span>+ File.separator);</span><br><span class="line"><span class="keyword">if</span>(file.isDirectory()) &#123;  <span class="comment">//如果是个路径</span></span><br><span class="line">File f[] = file.listFiles();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;f.length;i++) &#123;</span><br><span class="line">System.out.println(f[i].getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从这里出发，写一个小的s恶意程序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no3.no32.package1;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOperations4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] str = &#123; <span class="string">"e:"</span>, <span class="string">"f:"</span>, <span class="string">"g:"</span>, <span class="string">"d:"</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(str[i]+ File.separator);</span><br><span class="line">print(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">File file2[] = file.listFiles();</span><br><span class="line"><span class="keyword">if</span>(file2 == <span class="keyword">null</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;file2.length;i++) &#123;</span><br><span class="line">print(file2[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*  file.delete();   */</span> <span class="comment">//改成删除就是恶性程序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="9">OutputStream 输出流使用</font><p>简单的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no51.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutPutStreamTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"D:"</span> + File.separator +  <span class="string">"1.txt"</span>);</span><br><span class="line">OutputStream output = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">String s = <span class="string">"行车不规范，亲人两行泪。"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] s2 = s.getBytes();</span><br><span class="line">output.write(s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="9">字节流和字符流的转换</font><font color="blue">因为这样可以方便处理汉字文件</font><p>要不是因为妈妈，这会去散散步多好啊！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no51.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuanHuanLiu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"D:"</span> + File.separator + <span class="string">"demo"</span> + File.separator + <span class="string">"1.txt"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file.getParentFile().exists()) &#123;</span><br><span class="line">file.getParentFile().mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">OutputStream output = <span class="keyword">new</span> FileOutputStream(file); <span class="comment">//我们的字节流</span></span><br><span class="line"><span class="comment">//这就是将字节流转换为字符， 把  字节流 传递给OutputStreamWriter()的构造方法</span></span><br><span class="line">        <span class="comment">//然后向上转型为 Writer 型 ，它是字节流和字符流的桥梁</span></span><br><span class="line">        <span class="comment">//我们亲切地称它们为转换类</span></span><br><span class="line">        <span class="comment">//下面的OutputStreamWriter() ，就是一个转换类</span></span><br><span class="line">Writer wr  = <span class="keyword">new</span> OutputStreamWriter(output);  </span><br><span class="line">wr.write(<span class="string">"通过字符流进行输出！"</span>);</span><br><span class="line">wr.flush();                    <span class="comment">//记住,这是字符流啊，你要是不关闭，就不会写入内容</span></span><br><span class="line">wr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue">Copy实战</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no51.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TuPianKaoBei</span> </span>&#123;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(args.length != <span class="number">2</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"输入参数错误"</span>);</span><br><span class="line">System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">File infile = <span class="keyword">new</span> File(args[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>( !infile.exists()) &#123;            <span class="comment">//如果输入文件不存在</span></span><br><span class="line">System.out.println(<span class="string">"输入源文件不存在"</span>);</span><br><span class="line">System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">File outfile = <span class="keyword">new</span> File(args[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(!outfile.getParentFile().exists()) &#123; </span><br><span class="line">        <span class="comment">//输出文件的路径不存在，所以我们必须要自己把这个路径创建出来</span></span><br><span class="line">outfile.getParentFile().mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现字节流的创建</span></span><br><span class="line">OutputStream out = <span class="keyword">new</span> FileOutputStream(outfile);</span><br><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(infile);</span><br><span class="line"><span class="comment">//实现文件的复制</span></span><br><span class="line"><span class="keyword">byte</span>[] date = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">if</span>((temp = in.read(date)) != -<span class="number">1</span> ) &#123;</span><br><span class="line">out.write(date,<span class="number">0</span>,temp);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><font color="blue" size="9">TCP C/S模式开发</font><p>C/S模式也就是 Client/Server 模式</p><p>我们简单开发一个cs模式，主要分两个板块</p><ol><li>服务端： 一个服务端必须有端口，没有端口就无法让外界进入</li><li>客户端： 必须有访问的主机的ip地址，</li></ol><p><strong>下面是一个服务端的演示，功能是： 服务端取得了客户端的输入流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no52.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//下面是一个服务端的演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span>  ServerSocket(<span class="number">9999</span>);  <span class="comment">//所有服务端必须有个端口,不然外界无法连接</span></span><br><span class="line">System.out.println(<span class="string">"正在等待客户端连接......"</span>);</span><br><span class="line">Socket client = server.accept();  <span class="comment">//重中之重，等待一个新客户连接到服务器上</span></span><br><span class="line"><span class="comment">//第一,PrintStream的 构造方法要求必须传入一个 OutputStream类</span></span><br><span class="line"><span class="comment">//第二，一个客户，也就是一个 Socket，有一个getOutputStream()方法</span></span><br><span class="line">        <span class="comment">//通过这个方法 可以得到一个  OuputStream</span></span><br><span class="line">        <span class="comment">//服务端取得了客户端的输入流</span></span><br><span class="line">PrintStream out = <span class="keyword">new</span> PrintStream(client.getOutputStream()); </span><br><span class="line">out.printf(<span class="string">"%s"</span>,<span class="string">"Hello World!"</span>);</span><br><span class="line">server.close();</span><br><span class="line">socket.close();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面是一个客户端的演示，功能是： 客户端连接到服务器上面，于是服务器继续执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no52.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">9999</span>);</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(client.getInputStream());</span><br><span class="line">scan.useDelimiter(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(scan.hasNext()) &#123;</span><br><span class="line">System.out.println(<span class="string">"【回应数据】"</span>+ scan.next());</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>上面两个程序一定要连起来看，因为第一个程序执行到</em></strong></p><blockquote><p>​        Socket client = server.accept();  //重中之重，等待一个新客户连接到服务器上</p></blockquote><p><strong><em>就停止不会动了，一直到 第二个程序运行，意味着 有客户连接上来了，那么第一个程序就接着执行了</em></strong></p><font color="red" size="5">一个比较繁琐的问题</font><p>关于 Echo (回声设计) 的</p><p>多线程服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no52.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> Socket client;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EchoThread</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(client.getInputStream());  <span class="comment">//接管新用户的输入部分</span></span><br><span class="line">PrintStream printer = <span class="keyword">new</span> PrintStream(client.getOutputStream()); <span class="comment">//打印自动机，支持各种格式</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line"><span class="keyword">if</span>(scan.hasNext()) &#123;</span><br><span class="line">String str = scan.next().trim();</span><br><span class="line"><span class="keyword">if</span>(str.equalsIgnoreCase(<span class="string">"byebye"</span>)) &#123;</span><br><span class="line">printer.println(<span class="string">"再见！"</span>);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">printer.println(<span class="string">"ECHO: "</span>+ str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line">client.close();</span><br><span class="line">printer.close();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ServerSocket  server =  <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">Socket client = server.accept();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> EchoThread(client)).start();</span><br><span class="line">&#125;</span><br><span class="line">server.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端，这样的客户端可以多个:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no52.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//一个客户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">9999</span>);  <span class="comment">//新客户</span></span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);    <span class="comment">//input 保存键盘输入的内容</span></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(client.getInputStream()); <span class="comment">//从用户的输入流新的Scanner对象</span></span><br><span class="line"></span><br><span class="line">input.useDelimiter(<span class="string">"\n"</span>);</span><br><span class="line">scan.useDelimiter(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">PrintStream printer  = <span class="keyword">new</span> PrintStream(client.getOutputStream()); <span class="comment">//用户的输出流??</span></span><br><span class="line"><span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">System.out.print(<span class="string">"请输入要发送的内容： "</span>);</span><br><span class="line"><span class="keyword">if</span>(input.hasNext()) &#123;</span><br><span class="line">String str = input.next().trim(); <span class="comment">//屏幕上输入的内容</span></span><br><span class="line"> printer.println(str);  <span class="comment">//效果是向服务端传递数据，是用户端和客户端的桥梁</span></span><br><span class="line"><span class="keyword">if</span>(str.equalsIgnoreCase(<span class="string">"byebye"</span>))&#123;</span><br><span class="line">flag=  <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(scan.hasNext()) &#123;<span class="comment">//有人会问，为什么这句执行后才会有加了ECHO的效果呢，很简单，因为如果没有用户端的要求输出，是无法进行处理输出的</span></span><br><span class="line">System.out.println(scan.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">client.close();</span><br><span class="line">input.close();</span><br><span class="line">scan.close();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以第一个程序跑一遍，第二个程序多跑几次，模拟一个用户多个服务器，可以明白，原来</p><p><strong>服务器和客户端的桥梁，就是那个 inputStream 和 outputStream 的流 ， 服务器像做菜一样把这个数据流进行处理，因为我们知道，上面两个程序里面，真正起到屏幕打印功能的只有 第二个程序的倒数第四行具体代码，其他的那个 printer 的 println 方法其实是向 数据流里面写入或者写出数据的啊，我们向频幕输入的数据，在流里面 经过服务器的处理，再被服务器写进流里面作为输出流，一端的输出流是一端的输入流，这个输出流最后被用户端打印用 输入流 接收，最后打印在客户端屏幕上。</strong></p><hr><p><code>Java中的List</code></p><p>直接看代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no53.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">if(obj == null) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(!(obj instanceof Book )) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(this == obj) &#123;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">Book book = (Book) obj;</span></span><br><span class="line"><span class="comment">if(this.price == book.price &amp;&amp; this.title == book.title) &#123;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">"标题是："</span> + <span class="keyword">this</span>.title + <span class="string">"价格是: "</span> + <span class="keyword">this</span>.price+<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraylistTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;Book&gt; all = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">all.add(<span class="keyword">new</span> Book(<span class="string">"Java开发"</span>,<span class="number">78.5</span>));</span><br><span class="line">all.add(<span class="keyword">new</span> Book(<span class="string">"Java发"</span>,<span class="number">8.5</span>));</span><br><span class="line">all.add(<span class="keyword">new</span> Book(<span class="string">"Java开"</span>,<span class="number">7.5</span>));</span><br><span class="line">System.out.println(all);</span><br><span class="line">        <span class="comment">//没equals不能删除成功，凡是需要做比较工作的对象，其内部必须有equals方法的覆写</span></span><br><span class="line">all.remove(<span class="keyword">new</span> Book(<span class="string">"Java开"</span>,<span class="number">7.5</span>));</span><br><span class="line">        <span class="comment">//没有equals也可以删除成功，使用下标的删除不用要求对象对equals进行复写 </span></span><br><span class="line">all.remove(<span class="number">0</span>);           </span><br><span class="line">System.out.println(all);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>从今以后，凡是牵扯到集合的输出，都用<code>Iterator</code>(迭代器)</p><p>Iterator 就是一个 迭代器，可以这样初始化一个迭代器，我们以Set的迭代器为例为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; books = <span class="keyword">new</span> HashSet&lt;String&gt;(); <span class="comment">// 初始化一个Set , Set不允许重复</span></span><br><span class="line">books.add(<span class="string">"test1"</span>);</span><br><span class="line">books.add(<span class="string">"test2"</span>);</span><br><span class="line">books.add(<span class="string">"test2"</span>);</span><br><span class="line">books.add(<span class="string">"test4"</span>);</span><br><span class="line">books.add(<span class="string">"test3"</span>);</span><br><span class="line"><span class="comment">//Set对象拥有 Itetator 方法，从而生成一个构造器</span></span><br><span class="line"><span class="comment">//把Iterator看作 集合的一个方法，返回值是一个迭代器</span></span><br><span class="line">Iterator&lt;String&gt; iterator = books.iterator();</span><br><span class="line">      <span class="comment">//迭代器可以这样输出</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">String temp = iterator.next(); <span class="comment">//自动驱使迭代器向后迭代</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Java中的map</p><p>比较好理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no53.package1;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;Integer , String&gt;  map= <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"第一"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"第二"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"第三"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(<span class="number">4</span>));            <span class="comment">//这一个不存在的元素 使得key多了一个null</span></span><br><span class="line">System.out.println(map.get(<span class="number">5</span>));<span class="comment">//这一个不存在的元素 使得key多了一个null</span></span><br><span class="line">System.out.println(map.get(<span class="number">6</span>));<span class="comment">//这一个不存在的元素 使得key多了一个null</span></span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; temp = map.keySet();       <span class="comment">//所有的key的值被输出为一个数组</span></span><br><span class="line">        <span class="comment">//Set集合的输出，用Iterator 完成</span></span><br><span class="line">Iterator&lt;Integer&gt; iter = temp.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line"><span class="keyword">int</span> i = iter.next();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">结果如下：</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>接下来隆重推出，大名鼎鼎的Stream 类</strong></p><p><strong>这个类的特点就是，他就像一个 厨师，对Stream 流进行各种处理和加工，拿集合来说，这是我们喜欢的，因为如果不是这样的话，我们对集合中的元素的操作大多是在 循环和遍历中实现的</strong></p><p><strong>观察下面例程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no5.no53.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; all = <span class="keyword">new</span> HashSet&lt;String&gt;(); <span class="comment">//不允许重复</span></span><br><span class="line">all.add(<span class="string">"CR7"</span>);</span><br><span class="line">all.add(<span class="string">"Messi"</span>);</span><br><span class="line">all.add(<span class="string">"Pogba"</span>);</span><br><span class="line">all.add(<span class="string">"Matic"</span>);</span><br><span class="line">all.add(<span class="string">"Rashford"</span>);</span><br><span class="line">all.add(<span class="string">"Mata"</span>);</span><br><span class="line">all.add(<span class="string">"Andrew"</span>);</span><br><span class="line">Stream&lt;String&gt; stream = all.stream();</span><br><span class="line">List&lt;String&gt; newAll = stream.distinct().filter((x)-&gt;x.contains(<span class="string">"a"</span>)                                                     |x.contains(<span class="string">"A"</span>)).collect(Collectors.toList());</span><br><span class="line">newAll.forEach(System.out :: println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中上面是个简单的Set初始化，添加元素</p><p>这句是 初始化用一个stream对象</p><blockquote><p>Stream<string> stream = all.stream();</string></p></blockquote><p>这句话是对 stream流中 的 元素 进行批量的操作，主要是几个功能</p><ol><li>去重</li><li>用莱姆他表达式进行过滤</li><li>收集元素到 list里面</li></ol><blockquote><p>List<string> newAll = stream.distinct().filter((x)-&gt;x.contains(“a”)                                                     |x.contains(“A”)).collect(Collectors.toList());</string></p></blockquote><p><strong><em>结果如下</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Matic</span><br><span class="line">Mata</span><br><span class="line">Andrew</span><br><span class="line">Pogba</span><br><span class="line">Rashford</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二部分&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="httpsp://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>旧病</title>
    <link href="httpsp://yoursite.com/2019/02/02/%E5%8E%9F%E8%B0%85%E6%88%91%E4%B8%8D%E6%98%8E%E7%99%BD%E4%BD%A0%E7%9A%84%E6%82%B2%E4%BC%A4/"/>
    <id>httpsp://yoursite.com/2019/02/02/原谅我不明白你的悲伤/</id>
    <published>2019-02-02T07:07:17.752Z</published>
    <updated>2019-03-10T06:33:54.973Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p> 原谅我不明白你的悲伤</p><p>我感到</p><p>在人群中看到你时，带给我的，夜的宁静</p><p>但我随即又看不到你背影</p><p>我痛苦的承认，我只能够看到，人群</p><p>抱歉，亲爱的</p><p>我不想将你遗忘</p><p>而你常在人群之中吗</p><p>亲爱的</p><p>我很抱歉</p><p>只因我在人群中</p><p>我便只能</p><p>怀念你的背影</p><p>忍受着</p><p>逐渐消失的世界</p><p>对于我的感觉</p><p>亲爱的</p><p>请原谅我不明白你的悲伤</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; 原谅我不明白你的悲伤&lt;/p&gt;
&lt;p&gt;我感到&lt;/p&gt;
&lt;p&gt;在人群中看到你时，带给我的，夜的宁静&lt;/p&gt;
&lt;p&gt;但我随即又看不到你背影&lt;/p&gt;
&lt;p&gt;我痛苦的承认，我只能够看到，人群&lt;/p&gt;
&lt;p&gt;抱歉，亲爱的&lt;/p&gt;
&lt;p&gt;我不想将你遗
      
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Java备忘录Ⅰ</title>
    <link href="httpsp://yoursite.com/2019/01/16/Java%E5%A4%87%E5%BF%98%E5%BD%95%E2%85%A0/"/>
    <id>httpsp://yoursite.com/2019/01/16/Java备忘录Ⅰ/</id>
    <published>2019-01-15T16:06:29.998Z</published>
    <updated>2019-04-10T10:13:38.338Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EMP</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EMP</span><span class="params">(<span class="keyword">int</span> a,String n,<span class="keyword">double</span> s)</span></span>&#123; </span><br><span class="line">age =a;</span><br><span class="line">name=n;</span><br><span class="line">salary=s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123; </span><br><span class="line">age=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">name=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> s)</span></span>&#123;</span><br><span class="line">salary = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"NAME IS:"</span>+name+<span class="string">"\n"</span>+<span class="string">"AGE IS:"</span>+age+<span class="string">"\n"</span>+<span class="string">"SALARY IS:"</span>+salary+<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">empdemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">EMP e=<span class="keyword">new</span> EMP(<span class="number">1132</span>,<span class="string">"Mr.k"</span>,<span class="number">1.0</span>);</span><br><span class="line">System.out.println(e.getInfo());</span><br><span class="line">e.setName(<span class="string">"Mike"</span>);</span><br><span class="line">System.out.println(e.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr> <font color="green" size="30">Java命名规范</font><ul><li>类名称:  每个单词首字母大写   如<code>StudentInfo</code></li><li>属性名称: 第一个单词首字母大写，其余小写 如 <code>Studentname</code></li><li>方法名称: 第一个单词之外的单词首字母大写 如 <code>getName()</code></li><li>常量名称: 全部大写 如<code>MSG</code></li><li>包名称: 全部小写 如<code>no1.no2.XXX</code></li></ul><hr><font color="blue" size="55">String初始化方法</font><p>关于字符串的比较，我们必须明确</p><p><code>=等号 只能用于数值比较</code></p><p><code>非要让String对象用等号进行的话，比较的双方只会比较地址</code></p><p>我们声明一个String对象，常用两种方法</p><p>第一： <font color="RED">  String  str= “test”</font></p><p>第二：   <font color="red">String  str= new String(“test”)</font></p><p>我们必须知道</p><font color="blue">第一种</font>是匿明声明，<code>test</code>此时在堆内存当中，只有一个，你仔细观察下面的<em>str1</em>和<em>str4</em>，它俩都指向了堆里面的一个匿名对象，无论有成千上万个str，只要它们都采用不加new的第一种声明方式，那么它们仅仅都是指向了同一个字符串而已，它们的地址一样，它们的内容一样，因为它们没有用new声明，堆里面，只有一个”test”而已<br><br> <font color="blue">第二种</font>声明，和上面的匿名声明对比，意味着，每次声明都会在堆内存中，新创建一个崭新的字符串，看对比<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1=new String(&quot;test1&quot;);</span><br><span class="line">String str2=new String(&quot;test1&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(str1==str2);  //结果是 false</span><br></pre></td></tr></table></figure><br><br>结果是false意味着，即使内容不同，因为这两个对象都是用的new来创建的，所以，它们分居在堆内存的不同位置，有成千上万个new对象，堆内存中就有成千上万个字符串。<br><br><br><br>* 总的来说<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String str1=&quot;test1&quot;;</span><br><span class="line">String str2=&quot;test1&quot;;</span><br><span class="line">String str3=new String(&quot;test1&quot;);</span><br><span class="line">String str4=new String(&quot;test1&quot;);</span><br><span class="line">String str5=str2;</span><br><span class="line"></span><br><span class="line">System.out.println(str1==str2);    //true因为匿名声明，指向一模一样的地址  </span><br><span class="line">System.out.println(str3==str2);//false 因为两者地址不同</span><br><span class="line">System.out.println(str1.equals(str2));  //true 因为内容相同</span><br><span class="line">System.out.println(str2.equals(str3));//true 因为内容相同</span><br><span class="line">System.out.println(str3==str4);//false 因为地址不同</span><br><span class="line">System.out.println(str3.equals(str4));//true 因为内容相同</span><br><span class="line">System.out.println(str5==str2);//true 因为复制操作，str5和str2指向一处</span><br></pre></td></tr></table></figure><br><br>—<br><br><font color="purple" size="40">String 的构造方法</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">String() </span><br><span class="line">          初始化一个新创建的 String 对象，使其表示一个空字符序列。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes) </span><br><span class="line">          通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, Charset charset)   </span><br><span class="line">          通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] ascii, <span class="keyword">int</span> hibyte) </span><br><span class="line">          已过时。 该方法无法将字节正确地转换为字符。从 JDK <span class="number">1.1</span> 开始，完成该转换的首选方法是使用带有 Charset、字符集名称，或使用平台默认字符集的 String 构造方法。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length) </span><br><span class="line">          通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset) </span><br><span class="line">          通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] ascii, <span class="keyword">int</span> hibyte, <span class="keyword">int</span> offset, <span class="keyword">int</span> count) </span><br><span class="line">          已过时。 该方法无法将字节正确地转换为字符。从 JDK <span class="number">1.1</span> 开始，完成该转换的首选方法是使用带有 Charset、字符集名称，或使用平台默认字符集的 String 构造方法。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName) </span><br><span class="line">          通过使用指定的字符集解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, String charsetName) </span><br><span class="line">          通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">char</span>[] value) </span><br><span class="line">          分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">char</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> count) </span><br><span class="line">          分配一个新的 String，它包含取自字符数组参数一个子数组的字符。</span><br><span class="line">          </span><br><span class="line">String(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count) </span><br><span class="line">          分配一个新的 String，它包含 Unicode 代码点数组参数一个子数组的字符。</span><br><span class="line">          </span><br><span class="line">String(String original) </span><br><span class="line">          初始化一个新创建的 String 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。</span><br><span class="line">          </span><br><span class="line">String(StringBuffer buffer) </span><br><span class="line">          分配一个新的字符串，它包含字符串缓冲区参数中当前包含的字符序列。</span><br><span class="line">          </span><br><span class="line">String(StringBuilder builder) </span><br><span class="line">          分配一个新的字符串，它包含字符串生成器参数中当前包含的字符序列。</span><br></pre></td></tr></table></figure><p>​    </p><hr><p>String 之中我们常用的函数方法</p><p><strong>str.toCharArray( )</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String str1=new String(&quot;DoASYouSaid&quot;);</span><br><span class="line">char[] b = str1.toCharArray();</span><br></pre></td></tr></table></figure><p><strong>String str1 = new String(str)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = new String(&quot;OkMan.&quot;);</span><br><span class="line">String temp = new String(str1);</span><br><span class="line">System.out.println(temp);</span><br><span class="line">-&gt; OkMan</span><br></pre></td></tr></table></figure><hr><font color="red" size="50">类的传递</font>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(<span class="keyword">int</span> age,String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setcar</span><span class="params">(Car car)</span></span>&#123; <span class="comment">//一个人有车,人里面必须有设置车的信息</span></span><br><span class="line"><span class="keyword">this</span>.car=car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getcar</span><span class="params">()</span></span>&#123; <span class="comment">//从人获得车信息</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getinfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="string">"Info is:"</span>+<span class="keyword">this</span>.age+<span class="string">" "</span>+<span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String carname;</span><br><span class="line"><span class="keyword">private</span> Human h;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String carname)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.carname = carname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sethuman</span><span class="params">(Human h)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.h=h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  Human <span class="title">gethuman</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getinfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Info is: "</span>+<span class="keyword">this</span>.carname;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">ChuanDi</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Human h =<span class="keyword">new</span> Human(<span class="number">23</span>,<span class="string">"boom"</span>);</span><br><span class="line">Car c = <span class="keyword">new</span> Car(<span class="string">"McLaRen"</span>);</span><br><span class="line">h.setcar(c);</span><br><span class="line"> System.out.println( h.getcar().getinfo() );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="green" size="45"> 重写和重载</font><br><br><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fzeasxqwcjj30qx0pkqea.jpg" alt=""><br><br>&gt; 这也就是说，重写体现了子类和父类之间多态的体现<br>&gt;<br>&gt; 重载是类之中的多态性的体现<br><br><br><br><br><br><font color="red" font="30"> 继承中容易的犯错 </font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"///"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"***"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jicheng</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A(); <span class="comment">//1</span></span><br><span class="line">B b = (B)  a;  <span class="comment">//2</span></span><br><span class="line">b.print();<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">B b2= <span class="keyword">new</span> B();<span class="comment">//4</span></span><br><span class="line">A a2 = (A) b2;<span class="comment">//5</span></span><br><span class="line">a2.print();<span class="comment">//6</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个很简单直白的代码，B继承了A，并且对于A中的print()方法进行了覆写.</p><p>我们的问题是:</p><blockquote><p>只有 1 2 3 行执行时，什么结果</p><p>只有 4 5 6 行执行时，什么结果</p></blockquote><p>答案是:</p><blockquote><p>一，执行错误：Exception in thread “main” java.lang.ClassCastException: A cannot be cast to B<br>​                 </p><p>二，成功执行输出 ***</p></blockquote><p>原因是：</p><blockquote><p> 让 a 向下转型，转型为B类 。这个时候报错，A并不知道自己的子类是什么，从上到下，无法向下转型</p><p>而向上转型可成功执行</p></blockquote><font color="blue" size="40"> Usb接口简单实现</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Usb</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">Usb</span></span>&#123;            <span class="comment">//继承Usb接口以覆写方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Flash start!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Flash stop!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">Usb</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Printer start!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Printer stop!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">computer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(Usb usb)</span></span>&#123; <span class="comment">//computer只能看得到Usb</span></span><br><span class="line">usb.start();</span><br><span class="line">usb.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Usbinterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">computer c1 = <span class="keyword">new</span> computer();</span><br><span class="line">c1.work(<span class="keyword">new</span> Flash());</span><br><span class="line">c1.work(<span class="keyword">new</span> Printer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="30"> 工厂设计模式</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Eating Apples!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Eating Orange!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">chose</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"Apple"</span>.equals(s))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"Orange"</span>.equals(s))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Orange();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory_test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Fruit f =  Factory.chose(<span class="string">"Orange"</span>);</span><br><span class="line">f.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="30"> 代理设计模式</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Subject</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fooing"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> RealSubject subject;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(RealSubject realsubject)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subject = realsubject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Beforefoo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Before fooing!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.Beforefoo();</span><br><span class="line"><span class="keyword">this</span>.subject.foo();</span><br><span class="line"><span class="keyword">this</span>.Afterfoo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Afterfoo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"After fooing"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Subject s = <span class="keyword">new</span> ProxySubject(<span class="keyword">new</span> RealSubject());</span><br><span class="line">s.foo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><font color="blue" size="30"> Object类</font><p><code>object</code>类是所有类的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;&#125; <span class="comment">// 继承Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object_class</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Object obja = <span class="keyword">new</span> Book(); <span class="comment">// 向上转型</span></span><br><span class="line">Object objb = <span class="string">"This is  a String"</span>; <span class="comment">//向上转型,Object 也是 String 的父类</span></span><br><span class="line">Book b =(Book) obja; <span class="comment">//向下转型</span></span><br><span class="line">String s = (String) objb; <span class="comment">//向下转型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red" size="3"> Object 之toString() 方法</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String bookname=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String author = <span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bookname,String author)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookname = bookname;</span><br><span class="line"><span class="keyword">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.author+<span class="string">","</span>+<span class="keyword">this</span>.bookname);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2</span></span>&#123;                       <span class="comment">//Book2没有重写从 Object 那继承来的 toString()方法</span></span><br><span class="line"><span class="keyword">private</span> String bookname=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String author = <span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book2</span><span class="params">(String bookname,String author)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookname = bookname;</span><br><span class="line"><span class="keyword">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object_toString</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Book b = <span class="keyword">new</span> Book(<span class="string">"道德的谱系"</span>,<span class="string">"尼采"</span>);</span><br><span class="line">Book2 b2 = <span class="keyword">new</span> Book2(<span class="string">"悲剧的诞生"</span>,<span class="string">"尼采"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(b2); <span class="comment">//因为Book2 没有重写toString(),所以打印出了地址</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">尼采,道德的谱系</span></span><br><span class="line"><span class="comment">Book2@6d06d69c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><font color="red" size="3"> Object 之 equals() 方法</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String author=<span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">Book</span><span class="params">(String title,String author)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line"><span class="keyword">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;  <span class="comment">//以下为对从Object中继承的equals()的重写</span></span><br><span class="line"><span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Book))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Book b = (Book) obj; <span class="comment">//关键,缺少这一步必定报错。因为 title,author 是下层的属性, Object 向下转型才能取得这类特殊属性。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.title.equals(b.title) &amp;&amp; <span class="keyword">this</span>.author.equals(b.author) ) </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object_equals</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Book b1 = <span class="keyword">new</span> Book(<span class="string">"兄弟"</span>,<span class="string">"余华"</span>);</span><br><span class="line">Book b2 = <span class="keyword">new</span> Book(<span class="string">"基督山伯爵"</span>,<span class="string">"大仲马"</span>);</span><br><span class="line">System.out.println(b1.equals(b2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">尼采,道德的谱系</span></span><br><span class="line"><span class="comment">Book2@6d06d69c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><font color="blue" size="30"> 包装数据类型</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">baozhuanglei</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">String s1=<span class="string">"1532"</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">144</span>;</span><br><span class="line"></span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">//直接通过构造函数的方式进行声明</span></span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="number">1</span>;  <span class="comment">//把 1 自动装箱成一个Integer类</span></span><br><span class="line"><span class="keyword">int</span> i4 = i3; <span class="comment">//自动拆箱</span></span><br><span class="line">      Integer i5 =i3; <span class="comment">//类复制</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//以下说明类不能直接比较 i2 i3 i5 都是类，除非这俩类是同一个类，比如 i3 和 i5</span></span><br><span class="line">System.out.println(i2==i3); <span class="comment">// false </span></span><br><span class="line">System.out.println(i3==i4);<span class="comment">// true</span></span><br><span class="line">System.out.println(i2==i4);<span class="comment">// true </span></span><br><span class="line">System.out.println(i2==i5);<span class="comment">// false</span></span><br><span class="line">System.out.println(i4==i5);  <span class="comment">// true </span></span><br><span class="line">System.out.println(i3==i5);  <span class="comment">// true 为啥这俩类比较是相等的呢?因为这俩类实际就是一个类</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="comment">//从代表X数据类型的字符串，转换为X,使用类似 X.parseX 的方法。</span></span><br><span class="line">System.out.println(Integer.parseInt(s1));</span><br><span class="line"><span class="comment">//从某种数据类型转化为字符串，使用String.valueof()方法。</span></span><br><span class="line">        System.out.println(String.valueOf(i1));   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="blue" size="30"> 单例设计模式</font></p><blockquote><p>如果想控制一个类中实例化对象的个数    //比如我想让我定义的类无论声明几次都只有一个实例</p><p>需要锁定构造法方法      //在构造方法上加一个private</p><p>因为新对象必须要依靠构造方法，锁了构造方法意味着锁了对象</p><p>又因为既然只需要一个实例化对象，可以在类的内部使用 static 的方法来定义一个公共对象</p><p>每次 static 构造方法返回一个唯一的对象，这样外部不管有多少次调用，最终一个类只产生一个唯一的对象。</p></blockquote><p>例程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no21;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//final 保证了INSTANCE的值不会再改变</span></span><br><span class="line">    <span class="comment">//paivate 保证了 这是个私有对象， 但外部可以通过getter方法得到</span></span><br><span class="line">    <span class="comment">//static 保证了 外界每次得到的都是同一个公共的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton(); <span class="comment">//私有化静态内部变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//构造方法私有化,保证外界不能直接实例化对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;<span class="comment">//getter方法，保证外界可以实例化</span></span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Singleton  s =<span class="keyword">null</span>; <span class="comment">//声明对象</span></span><br><span class="line">s =  Singleton.getInstance();</span><br><span class="line">s.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码稍加改进:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no21;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span> )&#123;           <span class="comment">//不同</span></span><br><span class="line">INSTANCE = <span class="keyword">new</span> Singleton(); <span class="comment">//不同</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Singleton  s =<span class="keyword">null</span>; </span><br><span class="line">s =  Singleton.getInstance();</span><br><span class="line">s.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="30"> 多例设计模式</font><blockquote><p>多例也必须 构造方法私有化</p><p>但是一个类 可以提供多个实例化对象</p></blockquote><p>例程: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sex</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  Sex MALE = <span class="keyword">new</span> Sex(<span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  Sex FEMALE = <span class="keyword">new</span> Sex(<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Sex</span><span class="params">(String s)</span></span>&#123;<span class="comment">//构造方法私有化</span></span><br><span class="line"><span class="keyword">this</span>.title = s;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="comment">//重写 toString方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sex <span class="title">getSex</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;  <span class="comment">//让外部选择，从有限个静态对象中选择</span></span><br><span class="line"><span class="keyword">switch</span>(i)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> MALE;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> FEMALE;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiton</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argg[])</span></span>&#123;</span><br><span class="line">Sex  sex = Sex.getSex(<span class="number">1</span>);</span><br><span class="line">System.out.println(sex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red" size="30">异常捕获及处理</font><p>对于这个程序段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"开始计算"</span>);</span><br><span class="line">System.out.println(<span class="string">"计算除法"</span>+ (<span class="number">10</span>/ <span class="number">2</span>));</span><br><span class="line">System.out.println(<span class="string">"计算结束"</span>);</span><br></pre></td></tr></table></figure><p>可以输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">计算除法: 5</span><br><span class="line">计算结束</span><br></pre></td></tr></table></figure><p>》但是，一旦被除数是零</p><p>由于我们没有对异常进行处理,  程序会中断，结果变成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><span class="line">        at Yichang.main(Yichang.java:4)</span><br></pre></td></tr></table></figure><p>意味着<code>发生异常的第二句以及第二句之后的句子都不执行了</code></p><p>如果把程序改写为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"开始计算"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;       </span><br><span class="line">System.out.println(<span class="string">"计算除法"</span>+ (x/ y));</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e )&#123;<span class="comment">//java对于异常的捕捉时十分方便的</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"计算结束"</span>);</span><br></pre></td></tr></table></figure><p>那么意味着 只监视 try 内容里面的代码，一旦被监视者发生错误，我们 catch 到了这个错误，使用printStackTrace() 方法将错误信息打印出来。 结果是:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">        at Yichang.main(Yichang.java:<span class="number">15</span>)</span><br><span class="line">计算结束</span><br></pre></td></tr></table></figure><p>更加有代表性的代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yichang</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始计算"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x= Integer.parseInt(args[<span class="number">0</span>]);  <span class="comment">//用户输入 x</span></span><br><span class="line">        <span class="keyword">int</span> y= Integer.parseInt(args[<span class="number">1</span>]);  <span class="comment">//用户输入 y</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*捕获*/</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"计算除法"</span>+ (x/ y))</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e )&#123;              </span><br><span class="line">e.printStackTrace();<span class="comment">//此处的报错 千变万化，取决于用户的输入有多不合理</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"计算结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red" size="6.4">异常处理模板</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">math</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> <span class="keyword">throws</span> Exception</span>&#123; <span class="comment">//异常返回给调用者处理</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"除法运算开始"</span>);</span><br><span class="line">res = x /y;</span><br><span class="line">System.out.println(<span class="string">"除法运算结束"</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mymath</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(math.div(<span class="number">12</span>,<span class="number">0</span>));</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果却是!!!!! 如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">除法运算开始</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">        at math.div(Mymath.java:<span class="number">5</span>)</span><br><span class="line">        at Mymath.main(Mymath.java:<span class="number">14</span>)</span><br></pre></td></tr></table></figure><p>但是如果我们希望 <code>即使计算出错，也要把除法计算结束打印出来呢?</code></p><p>显然即使  <em>throws</em>  了异常，仍然需要在div方法，把计算错误的异常捕获一下子。</p><p>比如下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">math</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> <span class="keyword">throws</span> Exception</span>&#123; <span class="comment">//异常返回给调用者处理</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"除法运算开始"</span>);</span><br><span class="line"><span class="comment">/*1号*/</span></span><br><span class="line">        <span class="keyword">try</span>&#123;                        <span class="comment">//尽管throws了异常， 仍然要从根源处把异常捕获了</span></span><br><span class="line">res = x /y;  <span class="comment">//下面五种方法都可以，我们还是推荐第五种</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;<span class="comment">//记住第五种模板</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*2号*/</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">res = x /y;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStacTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*3号*/</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">res = x /y;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法运算结束"</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*4号*/</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">res = x /y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法运算结束"</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*5号*/</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">res = x /y;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法运算结束"</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mymath</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(math.div(<span class="number">12</span>,<span class="number">0</span>));</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="10">Java泛型</font><p>观察下面的危险代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no21.package1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">Object x;</span><br><span class="line">Object y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(Object y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanXing</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置数据</span></span><br><span class="line">Point p = <span class="keyword">new</span> Point();</span><br><span class="line">p.setX(<span class="string">"东经12度"</span>);</span><br><span class="line">p.setY(<span class="string">"北纬45度"</span>);</span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line">String x =(String) p.getX(); <span class="comment">//从objet向下转型为Object</span></span><br><span class="line">String y =(String) p.getY(); <span class="comment">//从objet向下转型为Object</span></span><br><span class="line">System.out.println(<span class="string">"x坐标是: "</span>+ x +<span class="string">",y坐标是: "</span>+ y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>危险</code>在于，取出数据的时候，执行了向下转型的操作，这在工程中是极其容易出错的手段。</p><p>所以就要引入泛型来解决这一问题.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no21.package1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&lt;<span class="title">T</span>&gt;</span>&#123; <span class="comment">//泛型</span></span><br><span class="line"> T x;</span><br><span class="line"> T y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(T y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanXing</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置数据</span></span><br><span class="line">Point&lt;String&gt; p = <span class="keyword">new</span> Point&lt;String&gt;();</span><br><span class="line">p.setX(<span class="string">"这是哪里"</span>);</span><br><span class="line">p.setY(<span class="string">"北纬12度"</span>);</span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line">String x = p.getX();         <span class="comment">//注意这时候的 向下转型被取消了，这是泛型的优点</span></span><br><span class="line">String y = p.getY(); <span class="comment">//注意这时候的 向下转型被取消了，这是泛型的优点</span></span><br><span class="line">System.out.println(<span class="string">"x坐标是: "</span>+ x +<span class="string">",y坐标是: "</span>+ y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue">泛型接口</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no22.package1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span>&lt;<span class="title">T</span>&gt;</span>&#123;  <span class="comment">//泛型接口,接口命名方式值得学习</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IMessage</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="comment">//覆写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fanxingjiekou</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MessageImpl &lt;String&gt;  message = <span class="keyword">new</span> MessageImpl&lt;String&gt;();<span class="comment">//实例化时确定数据类型</span></span><br><span class="line">message.print(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue">泛型方法</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no22.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fanxingfangfa</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(fun(<span class="string">"OkTomIWillBeWithYou"</span>));</span><br><span class="line">System.out.println(fun(<span class="string">'S'</span>));</span><br><span class="line">System.out.println(fun(<span class="number">12.3</span>));</span><br><span class="line">System.out.println(fun(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">fun</span><span class="params">(T t)</span> </span>&#123; <span class="comment">// 泛型方法 ，第一个T代表泛型，第二个T代表返回值类型</span></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="blue" size="20">Anotation</font> 注释；注解<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> : 提醒是个覆写操作</span><br><span class="line"><span class="meta">@Deprecated</span> : 提醒这是个过期的操作</span><br><span class="line"><span class="meta">@SupperssWarnings</span> : 压制警告</span><br></pre></td></tr></table></figure><br><br><font color="blue" size="20"></font><font color="blue" size="10">Lamda表达式</font><font color="red">Lamda </font>是针对匿名内部类提出的，为了改进匿名内部类的语法而诞生的。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no22.package1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage2</span></span>&#123;           <span class="comment">//接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanshushibiancheng</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就下面这一个方法，但是要知道因为fun方法含有 IMessage2 接口参数</span></span><br><span class="line">        <span class="comment">// fun函数 功能是把接口的print功能展示出来</span></span><br><span class="line">        <span class="comment">//但是 IMessage 这个接口的 print  方法是必须要复写落地的</span></span><br><span class="line">        <span class="comment">//因此在使用的时候 必须 new 一个匿名的内部类，把print 方法 实例化</span></span><br><span class="line">        fun(</span><br><span class="line"> <span class="keyword">new</span> IMessage2()&#123;         <span class="comment">//匿名内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;  <span class="comment">//覆写接口print方法</span></span><br><span class="line"> System.out.println(<span class="string">"Hello World!"</span>);&#125;&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(IMessage2 m)</span></span>&#123;     <span class="comment">//方法之中使用到了IMessage对象</span></span><br><span class="line">m.print(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>通过上面的代码我们可以观察到，匿名内部类的功能仅仅是  覆写一个方法。<br><br>我们使用  lamda 表达式可以改进这一做法<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun( </span><br><span class="line"></span><br><span class="line">() -&gt; System.out.println(<span class="string">"H!"</span>) </span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><br>我来解释一下<br><br><strong><em>因为 要想使用fun的话，我们在下边已经给出了fun的函数体，也就是fun的功能是啥 ; 但是要想使用fun，必须要覆写 包含在fu内部的接口的  print  方法 ，如果没有接口方法的覆写，那么fun始终不会动，当很清楚的而意识到了这一点后，直接将 要覆写的内容呈现出来， 即   ( 参数 -&gt; 覆写函数函数体 ) , 这样的话，直接了当，废话少</em></strong><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun( </span><br><span class="line"><span class="comment">//我们可以很清楚的知道，原来  这就是 覆写方法的样子</span></span><br><span class="line">() -&gt; System.out.println(<span class="string">"H!"</span>)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><br><font color="blue" size="9"> 方法的引用</font><p>大致上形如 </p><blockquote><p>X :: Y </p></blockquote><p>的引用就是方法的引用，其中 Y 是具体的一种方法，而 X 是拥有方法的或对象。</p><p>举个例子:</p><p>这个例子展现的是 类静态方法的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no22.package1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">imessage2</span>&lt;<span class="title">P</span>,<span class="title">Q</span>&gt;</span>&#123;          <span class="comment">//泛型接口 之中 有了一个 zhunahuan() 方法</span></span><br><span class="line">    <span class="comment">//返回值类型是Q ，参数类型是P</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Q  <span class="title">zhuahuan</span><span class="params">(P p)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfayinyong</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里就是把 String 类的 valueOf 方法引用了一下</span></span><br><span class="line">        <span class="comment">// 这个方法被赋予给 接口实例化对象【msg】 来使用，这叫接口的引用</span></span><br><span class="line">imessage2&lt;Integer,String&gt; msg = String::valueOf ;  </span><br><span class="line">String s =msg.zhuahuan(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s.replace(<span class="string">"1"</span>, <span class="string">"3"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>展现具体对象方法的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no22.package1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I1</span>&lt;<span class="title">R</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">upper</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfayinyong</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">I1&lt;String&gt; exp1 = <span class="string">"Hello"</span> :: toUpperCase;   <span class="comment">//具体对象方法的引用</span></span><br><span class="line">System.out.println(exp1.upper());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 值得注意的是</p><font color="red">我们上述的接口内部只能够有一个方法，如果有多个方法程序就是错误的</font><p>为此，我们最好在接口上面加上一句话，就是</p><blockquote><p>@FunctionalInterface</p></blockquote><p>表明这是个函数式的接口</p><p>​    </p><p>展现构造方法的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no22.package1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I2</span>&lt;<span class="title">p</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> p <span class="title">create</span><span class="params">(String t , <span class="keyword">double</span> p)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">String title;</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String title, <span class="keyword">double</span> price)</span> </span>&#123; <span class="comment">// A构造方法</span></span><br><span class="line"><span class="keyword">this</span>.price= price;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;<span class="comment">//复写 toString() 方法</span></span><br><span class="line"><span class="keyword">return</span> (<span class="string">"书名是"</span> + <span class="keyword">this</span>.title + <span class="string">"价格是"</span> + <span class="keyword">this</span>.price);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfayinyong</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">I2&lt;A&gt; exp2 = A:: <span class="keyword">new</span>; <span class="comment">//具体类的构造方法的引用</span></span><br><span class="line">A a = exp2.create(<span class="string">"江南"</span>, <span class="number">13.2</span>);</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red" size="9">※※ 多线程实例</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"><span class="keyword">import</span> java.lang.Thread;  <span class="comment">//导入线程类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;   <span class="comment">//继承线程类</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mythread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">23</span>;i++) &#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.name + i );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jinchengyuxiancheng</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mythread m1 = <span class="keyword">new</span> Mythread(<span class="string">"no1"</span>) ;</span><br><span class="line">Mythread m2 = <span class="keyword">new</span> Mythread(<span class="string">"no2"</span>) ;</span><br><span class="line">Mythread m3 = <span class="keyword">new</span> Mythread(<span class="string">"no3"</span>) ;</span><br><span class="line"><span class="comment">//以下三行代码输出的是  整整齐齐的 从no1到no3的顺序打印</span></span><br><span class="line">m1.run(); <span class="comment">//不是多线程,只是轮流执行方法</span></span><br><span class="line">m2.run(); <span class="comment">//不是多线程,只是轮流执行方法</span></span><br><span class="line">m3.run(); <span class="comment">//不是多线程,只是轮流执行方法</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//以下三行代码输出的是 杂乱无序的 no1 no2 no3 的混乱排列</span></span><br><span class="line">m1.start(); <span class="comment">//多线程启动,抢占资源</span></span><br><span class="line">m2.start(); <span class="comment">//多线程启动,抢占资源</span></span><br><span class="line">m3.start(); <span class="comment">//多线程启动,抢占资源</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们其实通过对于源码的分析可知，要想启动多线程，必须使用<code>Thead类的start()</code>方法，如果想理解请查阅</p><p>Thread 的 start()方法源码。</p><p><strong><em>虽然 Thread 可以实现多线程的主体类定义，但是 Java 有单继承局限，为了解决单继承局限的问题，Java里面提供了 Runnable 接口 ，有一个事实我们必须明确，就是要想实现多线程 ，是必须调用  start  方法，也就是必须使用 Thread类的</em></strong></p><p><strong><em>同时，Thread 类 中有一个构造方法就是</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span></span></span><br></pre></td></tr></table></figure><p><strong><em>意思是，Thread 类可以接收一个 Runnable 对象，从而形成一个Thread对象 ， 这个对象再使用  start 方法就可以解决多继承下的多线程问题</em></strong></p><p>范例: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123; <span class="comment">//首先为 Thread 准备好 Runnable 类</span></span><br><span class="line"><span class="keyword">private</span> String name;                       </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">23</span> ;i++)&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.name +<span class="string">"-&gt;"</span> + i );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">duoxiancheng</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;    </span><br><span class="line">MyRunnable  m1 = <span class="keyword">new</span> MyRunnable(<span class="string">"Jack"</span>);   <span class="comment">//得到实例化的 Runnable对象</span></span><br><span class="line">MyRunnable  m2 = <span class="keyword">new</span> MyRunnable(<span class="string">"Tom"</span>);   <span class="comment">//得到实例化的 Runnable对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(m1).start(); <span class="comment">// 匿名的Thread对象</span></span><br><span class="line"><span class="keyword">new</span> Thread(m2).start(); <span class="comment">// 匿名的Thread对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>你看上面的 多进程，都是纯粹的打印，而没有返回值，我们想要返回值的话应该怎样做呢？</em></strong></p><p>我们使用 <code>callable 接口  +  FutureTask()类</code> 的组合完成进程流的结果的收集.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mycallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123; <span class="comment">//Mycallable 类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span> ;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.ticket&gt; <span class="number">0</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">"卖票， ticket= "</span> + <span class="keyword">this</span>.ticket -- );</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"票买光了!"</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">duoxiancheng2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">Mycallable c1 =<span class="keyword">new</span> Mycallable(); <span class="comment">//callable对象</span></span><br><span class="line">Mycallable c2 =<span class="keyword">new</span> Mycallable(); <span class="comment">//callable对象</span></span><br><span class="line"></span><br><span class="line">FutureTask&lt;String&gt; f1 = <span class="keyword">new</span> FutureTask&lt;String&gt;(c1); <span class="comment">//中间结果过渡层</span></span><br><span class="line">FutureTask&lt;String&gt; f2 = <span class="keyword">new</span> FutureTask&lt;String&gt;(c2); <span class="comment">// 中间结果过渡层</span></span><br><span class="line"><span class="keyword">new</span> Thread(f1).start();<span class="comment">//进程必须开始,才可能有结果,此两句省略，将没有返回值</span></span><br><span class="line"><span class="keyword">new</span> Thread(f2).start();     </span><br><span class="line"></span><br><span class="line">System.out.println(f1.get());</span><br><span class="line">System.out.println(f2.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <font color="red"> callable 交给 FutureTask  交给 Thread  </font>  <font color="red"> 只有 Thread 跑起来，FutureTask才可能收集到结果</font> <font color="gold"> 接下来深入理解进程和线程的关系</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()); <span class="comment">//输出进程流的名字</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test153</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyRunnable2 m1 = <span class="keyword">new</span> MyRunnable2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(m1).start(); </span><br><span class="line"><span class="keyword">new</span> Thread(m1).start();</span><br><span class="line"> <span class="keyword">new</span> Thread(m1).start();</span><br><span class="line">m1.run();  </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一次执行结果是  </span></span><br><span class="line"><span class="comment"> * main</span></span><br><span class="line"><span class="comment"> * Thread-2</span></span><br><span class="line"><span class="comment"> * Thread-1</span></span><br><span class="line"><span class="comment"> * Thread-0</span></span><br><span class="line"><span class="comment"> * 第二次执行结果是</span></span><br><span class="line"><span class="comment"> * main</span></span><br><span class="line"><span class="comment"> * Thread-1</span></span><br><span class="line"><span class="comment"> * Thread-2</span></span><br><span class="line"><span class="comment"> * Thread-0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 意味着如果你不给线程命名，线程会自动命名    </span></span><br><span class="line"><span class="comment"> * 且 m1 由于出现在main的线程之下，而下面的三个new都可以归结为是Thread下面的线程，故它们的名字是main</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Thread.currentThread().getName()</code>返回线程的名字。</p><p>这样一来，线程的执行顺序就被完完整整的记录了下来。</p><p>我们观察到: <strong><em>首先是main的线程，随后是 三个Thread类线程， 最重要的是，这三个线程的命名是有规律的，但是由于线程抢占资源，所以三个Thread的打印顺序不是有序的</em></strong></p><p>我们可以认为 <strong><em>每当我们运行一个Java程序的时候，我们都可以在任务管理器中看到一个新的 进程 的出现，所以我们认为， 一个     Jvm  进程启动的时候，main只是这个进程的一个线程而已。</em></strong></p><p><strong><em>且 Jvm 进程至少开启两个线程， 一： main线程，  二： gc线程 （垃圾收集）</em></strong></p><font color="blue"> 进程的同步和死锁 </font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.ticket &gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+ <span class="string">" 卖票，ticket ="</span> +ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test156</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyRun m1 = <span class="keyword">new</span> MyRun();</span><br><span class="line"><span class="keyword">new</span> Thread(m1 ,<span class="string">"票贩子A"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(m1 ,<span class="string">"票贩子B"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(m1 ,<span class="string">"票贩子C"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">票贩子A 卖票，ticket =5</span></span><br><span class="line"><span class="comment">票贩子B 卖票，ticket =3</span></span><br><span class="line"><span class="comment">票贩子B 卖票，ticket =1</span></span><br><span class="line"><span class="comment">票贩子C 卖票，ticket =4</span></span><br><span class="line"><span class="comment">票贩子A 卖票，ticket =2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对比加了延迟之后的不同步的 Thread 们</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package no2.no23.package1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyRun implements Runnable&#123;</span><br><span class="line">private int ticket = 5;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;20;i++) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(100);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">if(this.ticket &gt;0) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+ &quot; 卖票，ticket =&quot; +ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class test156&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyRun m1 = new MyRun();</span><br><span class="line">new Thread(m1 ,&quot;票贩子A&quot;).start();</span><br><span class="line">new Thread(m1 ,&quot;票贩子B&quot;).start();</span><br><span class="line">new Thread(m1 ,&quot;票贩子C&quot;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*  结果如下</span><br><span class="line">票贩子A 卖票，ticket =5</span><br><span class="line">票贩子B 卖票，ticket =4</span><br><span class="line">票贩子C 卖票，ticket =3</span><br><span class="line">票贩子C 卖票，ticket =2</span><br><span class="line">票贩子A 卖票，ticket =2</span><br><span class="line">票贩子B 卖票，ticket =2</span><br><span class="line">票贩子B 卖票，ticket =1</span><br><span class="line">票贩子A 卖票，ticket =1</span><br><span class="line">票贩子C 卖票，ticket =1</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong><em>上面加了延迟的相当就是，当一个进程判断到 ticket 剩一 的时候，他会进入到  for 里面去，但是还来不及改变 ticket ，又有另外一个 Thread 也判断了ticket 是1 ，也进入到 for 里面， 这两者最终会让 ticket的数值变为 -1 ，这就是不同步导致的问题。</em></strong></p><p><strong>事到如今，我们已经能够感觉到了，要想解决不同步引起的问题，对于上面卖票事务，必须要有这样一个逻辑，即</strong></p><blockquote><p>当一个票贩子通过判断语句之后，其他的票贩子就不能再进行判断了，以免造成多人进入</p></blockquote><p>Java 中要想实现线程的同步，可以使用  <code>synchronized</code> 关键字，而这个关键字可以通过两种方式使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 同步代码块</span><br><span class="line"><span class="number">2</span>. 同步方法</span><br></pre></td></tr></table></figure><p><u>同步代码块</u></p><p>Java中有四种代码块：普通代码块，构造块，静态块，同步块。</p><p>观察同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">代码部分；    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码部分一次只允许一个线程进去</p><p><strong><em>于是我们在上面出错的程序之中的： if() 语句那部分给括起来，表明 这一块一次只能让一个线程进去</em></strong></p><p>最终改变为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.ticket &gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+ <span class="string">" 卖票，ticket ="</span> +ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test156</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyRun m1 = <span class="keyword">new</span> MyRun();</span><br><span class="line"><span class="keyword">new</span> Thread(m1 ,<span class="string">"票贩子A"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(m1 ,<span class="string">"票贩子B"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(m1 ,<span class="string">"票贩子C"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>同步方法</u></p><p>上面的 给代码块加括号的行为实在是太难看了 </p><p>最好是把那一块封装起来，就叫同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.ticket &gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+ <span class="string">" 卖票，ticket ="</span> +ticket--);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，class MyRun 就可以大大简化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fun();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><font color="red">同步实战</font><p>目标： </p><p>设计一个生产消费模式( Producer and Customer )</p><p>实现  生产者生产一件商品，消费者就消费一件商品</p><p>利用多线程的初步构思如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inf</span></span>&#123;   <span class="comment">//Inf类包含了一件商品的名字和内容，同时可以返回名字和内容</span></span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123; <span class="comment">//生产者类，循环生产鞋子和裤子,我们希望生产的被Customer使用</span></span><br><span class="line"><span class="keyword">private</span> Inf infp;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Inf infp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.infp = infp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">101</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.infp.setTitle(<span class="string">"一号物品"</span>);   <span class="comment">//制造名字1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//制造名字后 延迟 制造内容</span></span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.infp.setContent(<span class="string">"11111111"</span>);<span class="comment">//制造内容2</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">this</span>.infp.setTitle(<span class="string">"二"</span>);<span class="comment">//制造名字2</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;<span class="comment">//制造名字后 延迟 制造内容</span></span><br><span class="line">                   Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.infp.setContent(<span class="string">"2222222"</span>); <span class="comment">//制造内容2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Inf infc; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Inf infc)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.infc = infc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;           <span class="comment">//针对传入的Inf对象，获取它的信息</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.infc.getTitle() + <span class="string">" - "</span> + <span class="keyword">this</span>.infc.getContent()); <span class="comment">//使用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerAndCostumer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Inf inf = <span class="keyword">new</span> Inf();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(inf)).start(); <span class="comment">//生产线程循环执行</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Customer(inf)).start(); <span class="comment">//消费进程循环执行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是<a href="https://paste.ubuntu.com/p/9yT6s7z54v/" target="_blank" rel="noopener">点击查看结果</a></p><p>原因很简单，消费者线程和生产者进程并驾齐驱，生产者刚  命名，还没有 设置内容 的时候，消费者就急着消费了，这是不同步造成的，详细的说，这是由于 <strong>名字和内容之间存在时间间隔，名字设置好了，进入等待期，这个时候，消费者就开始消费了，然后才开始设置内容</strong></p><p>这就是<strong><em>不同步</em></strong></p><p>第一个解决想法就是，把起名字和写内容 放在一块，也即是一个 同步块里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inf</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String title, String content)</span></span>&#123; <span class="comment">//名字和内容的设置同步了</span></span><br><span class="line"><span class="keyword">this</span>.title = title;<span class="comment">//设置名字</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//加延迟</span></span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.content = content;<span class="comment">//设置内容</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;     <span class="comment">//调用get方法可以实现信息的打印</span></span><br><span class="line">System.out.println(<span class="string">"名字是"</span>+ <span class="keyword">this</span>.title + <span class="string">"内容是"</span> + <span class="keyword">this</span>.content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123; <span class="comment">//生产者，循环生产鞋子和裤子</span></span><br><span class="line"><span class="keyword">private</span> Inf infp;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Inf infp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.infp = infp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">101</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.infp.set(<span class="string">"啦啦啦"</span>, <span class="string">"lalala"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.infp.set(<span class="string">"哈哈哈"</span>, <span class="string">"hahaha"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Inf infc; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Inf infc)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.infc = infc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line"><span class="keyword">this</span>.infc.get();       <span class="comment">//没延迟，直接调用get方法打印.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerAndCustomer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Inf inf = <span class="keyword">new</span> Inf();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(inf)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Customer(inf)).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是<a href="https://paste.ubuntu.com/p/kZVqQ75QNK/" target="_blank" rel="noopener">点击查看结果</a></p><p>我们发现，虽然很好的解决了错乱问题，但是内容重复问题仍然严重，依旧无法像理想的那样，一个接着一个不同的进行打印。</p><p>我们需要等待与唤醒机制解决。</p><p>关于等待与唤醒机制</p><p>因此，我们使用 <strong>object</strong>  类的 <code>wait()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no2.no23.package1;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inf</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line"><span class="comment">// flag = true 表示可以生产</span></span><br><span class="line"><span class="comment">// flag = fase 表示不可以生产</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String title, String content)</span> </span>&#123;</span><br><span class="line"><span class="comment">/**判断能不能生产，如果不能，证明上一波生产还没有被使用**/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.flag == <span class="keyword">false</span> )</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">super</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line"><span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">super</span>.notify(); <span class="comment">//唤醒其他等待</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.flag == <span class="keyword">true</span> )&#123;  <span class="comment">//可以生产，说明还没生产呢，无法使用</span></span><br><span class="line"><span class="keyword">super</span>.wait();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"名字是"</span>+ <span class="keyword">this</span>.title + <span class="string">"内容是"</span> + <span class="keyword">this</span>.content);</span><br><span class="line"><span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">super</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123; <span class="comment">//生产者，循环生产鞋子和裤子</span></span><br><span class="line"><span class="keyword">private</span> Inf infp;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Inf infp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.infp = infp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">101</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.infp.set(<span class="string">"啦啦啦"</span>, <span class="string">"lalala"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.infp.set(<span class="string">"哈哈哈"</span>, <span class="string">"hahaha"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Inf infc; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Inf infc)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.infc = infc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.infc.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerAndCustomer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Inf inf = <span class="keyword">new</span> Inf();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(inf)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Customer(inf)).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="Java" scheme="httpsp://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Lisp扫盲</title>
    <link href="httpsp://yoursite.com/2018/12/31/Lisp%E6%89%AB%E7%9B%B2/"/>
    <id>httpsp://yoursite.com/2018/12/31/Lisp扫盲/</id>
    <published>2018-12-31T03:31:57.968Z</published>
    <updated>2019-02-26T13:47:10.784Z</updated>
    
    <content type="html"><![CDATA[<p>通过例子了解lisp的特点</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p><a href="https://zh.wikipedia.org/wiki/LISP" target="_blank" rel="noopener">lisp是什么，我们为什么要用lisp</a></p><p>推荐使用<font color="blackgreen" size="5"> <a href="https://sourceforge.net/projects/clisp/" target="_blank" rel="noopener">CLISP</a></font> 或<font color="blackgreen" size="5"> <a href="http://racket-lang.org/download/" target="_blank" rel="noopener">Racket</a></font> 进行clisp的练习</p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p>​     Lisp拥有<font color="red">  7</font> 个基本的 运算符,大可放心,并且都易理解。</p><p>​     他们是 </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quote  atom  eq  car cdr  cons cond</span><br></pre></td></tr></table></figure><p>​    在详细介绍这七个运算符之前，我们先介绍list的几个小的特点</p><h2 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h2><p>​    lisp 不区分大小写,但 Lisp 会尽可能地，把小写转化为大写</p><p>​    lisp使用前缀表达式进行表达式的运算，这是我们并不陌生的形式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; (+ 2)   // [ + - * / ] 四个运算要求 参与运算的数 至少有一个 </span><br><span class="line">      2</span><br><span class="line">&gt; (+ 1 2 (+ 2 3))      //朴素的嵌套</span><br><span class="line">   8</span><br><span class="line">   &gt; (* 3 6 2)</span><br><span class="line">      36</span><br><span class="line">   &gt; (* 3.0 6 2)</span><br><span class="line">      36.0</span><br><span class="line">&gt; (/ 8 4)</span><br><span class="line">      2</span><br><span class="line">   &gt; (/ 5 10)</span><br><span class="line">      1/2       //请注意，如果你没有显式的告诉lisp你用的是浮点数，它不算小数只算分数</span><br><span class="line">   &gt; (/ 9 5.4)</span><br><span class="line">      1.6666666  //这样结果是小数</span><br><span class="line">   &gt; (* 4 3 (+ 2 3(* 23 4)))</span><br><span class="line">      1164</span><br></pre></td></tr></table></figure><p>​      这一特色，这导致了Lisp所有表达式的统一性 ，只不过，有些时候我们需要认清括号的匹配。</p><h2 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h2><p>​     我们先了解几种 Lisp 的数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1 </span><br><span class="line">  1    //数字</span><br><span class="line"></span><br><span class="line">&gt; &quot;___ok/&apos;hello* &quot;</span><br><span class="line">  &quot;___ok/&apos;hello* &quot;    // 字符串，双引号为字符串的一部分</span><br><span class="line"></span><br><span class="line">&gt; &apos;(* 2 3)232323abc </span><br><span class="line">   (* 2 3)232323ABC        //引用,出现在 &apos; 后面的都被当作引用，这点很关键,我们后面专门介绍</span><br><span class="line"></span><br><span class="line">&gt; (list &apos;(* 2 3) 2 (* 2 3)) </span><br><span class="line">   ((* 2 3)26)                //list生成表，qoute引用 也就是 [ &apos; ], 阻止了(* 2 3) 的运算</span><br></pre></td></tr></table></figure><h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h2><p>​    有了上面的准备，接下来我们来看六个基本运算符.</p><p>​     <strong>2.3.1</strong> <font color="red">  quote </font> 的用法 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &gt;(quote x) </span><br><span class="line">   X  </span><br><span class="line"></span><br><span class="line">&gt;(quote (a b c)) </span><br><span class="line">   (A B C) </span><br><span class="line"> </span><br><span class="line">&gt;&apos;(+ 1 2) </span><br><span class="line">   (+ 1 2)</span><br><span class="line"> </span><br><span class="line">&gt;&apos;(a b c) </span><br><span class="line">   (A B C)</span><br><span class="line"></span><br><span class="line">&gt; (list 2 3 )</span><br><span class="line">   (2 3)</span><br><span class="line"></span><br><span class="line">&gt; &apos;(list 2 3)</span><br><span class="line">   (list 2 3)</span><br></pre></td></tr></table></figure><p>​      <code>quote</code> 等于 <code>&#39;</code></p><p>​      我们看到，quote的鲜明求值规则是，<strong>什么也不做</strong>, 跟在quote后面的东西，注定被保护，无论是想用list构造表，还是做加减乘除，只要在 <code>’</code> 之后，都会被视为一句话，而不求值.</p><p>   <strong>2.3.2</strong>  <font color="red">atom </font>的用法</p><p>​    atom用于判断对象是否是<code>原子</code>或<code>空表</code> ,仅有这两种是原子的</p><p>​        T为真，NIL为假</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; (atom ‘a) </span><br><span class="line">T </span><br><span class="line">&gt;  (atom ()) </span><br><span class="line">T </span><br><span class="line">&gt;  (atom ()) </span><br><span class="line">T </span><br><span class="line">&gt;  (atom &apos;(a b c)) </span><br><span class="line">NIL</span><br></pre></td></tr></table></figure><p><strong>2.3.3</strong> <font color="red"> eq</font>的用法</p><p>​    (eq x y ) 如果 x 和 y 的值是<code>同一个原子</code>或`都为空表 返回 T，否则返回 () 即NIL </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; (eq &apos;a &apos;a) </span><br><span class="line">t </span><br><span class="line"></span><br><span class="line">&gt; (eq &apos;a &apos;b) </span><br><span class="line">nil </span><br><span class="line"></span><br><span class="line">&gt; (eq &apos;() &apos;()) </span><br><span class="line">t </span><br><span class="line"></span><br><span class="line">&gt; (eq  &apos;(a b) &apos;(a b))    </span><br><span class="line">NIL                     //返回 nil，因为 ’(a b)不是 原子 。</span><br></pre></td></tr></table></figure><p><strong>2.3.4</strong> <font color="red"> car 和 cdr </font> 的用法</p><p>​    car( x )  和 cdr( x )  都要求 x 是一个表，不同在于</p><p>​     <code>car() 返回表的第一个元素,cdr()返回表除第一个剩下所有元素，如果可以以list形式返回</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;(car (1 2 3))</span><br><span class="line">  报错</span><br><span class="line"></span><br><span class="line">&gt;(car &apos;(1 2 3)) </span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line">&gt;(cdr &apos;(1 2 3))</span><br><span class="line">  (2 3)</span><br><span class="line"></span><br><span class="line">&gt;(cdr (list 1 2 3))</span><br><span class="line">  (2 3)</span><br><span class="line">&gt;(cdr &apos;(list 1 2 3))</span><br><span class="line">  (1 2 3)</span><br><span class="line"> </span><br><span class="line">&gt;(car (cdr ‘(a b c))) </span><br><span class="line">   b</span><br></pre></td></tr></table></figure><p><strong>2.3.5</strong> <font color="red"> cons </font>的用法    </p><p>​    cons( x y ) 要求 y 是一个表，它返回一个由 x 和 y 连接的新表 请注意，我们要求 y 必须是一个表，但我们并没有要求 x 一定要是一个 原子或者是表.   </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;(<span class="name">cons</span>  <span class="number">1</span> (<span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">  报错             //一定记住，一旦没有引用，Lisp就会尝试 计算这个表达式，显然它计算不出来，于是报错</span><br><span class="line">&gt;(<span class="name">cons</span> '<span class="number">1</span> '<span class="number">2</span>) </span><br><span class="line">  (<span class="number">1</span> <span class="number">2</span>)</span><br><span class="line">&gt;(<span class="name">cons</span> '<span class="number">1</span> '(<span class="number">1</span> <span class="number">2</span>))</span><br><span class="line">  (<span class="number">1</span> <span class="number">1</span> <span class="number">2</span>)</span><br><span class="line">&gt;(<span class="name">cons</span> '(<span class="number">2</span> <span class="number">3</span>) '<span class="number">1</span>)</span><br><span class="line">  (<span class="number">2</span> <span class="number">3</span> <span class="number">1</span>)</span><br><span class="line">&gt;()</span><br></pre></td></tr></table></figure><p><strong>2.3.6</strong> <font color="red"> cond</font>的用法</p><p>​    cond的基本形式是  <code>(cond (p1 e1) (p2 e2) ... (pn en))</code></p><p>​    其中 p1 到 pn 是条件，e1到 en 是结果，cond 会依次对p1到pn进行求值，直到找到第一个值为<code>原子t</code> 的p           ，那么把他对应的 e 返回.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; (cond</span><br><span class="line">    ( (eq &apos;a &apos;b) &apos;first)        //p1为NIL</span><br><span class="line">        ((atom &apos;a) &apos;second)       //p2为T</span><br><span class="line">((&gt; 4 6) (+ (* 2 3) 7))   //p3为NIL</span><br><span class="line">  ) </span><br><span class="line">        </span><br><span class="line">  second</span><br></pre></td></tr></table></figure><hr><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p>​    接下来是<em>变量和赋值</em></p><pre><code>**3.1**</code></pre><p>​    首先可以用 <font color="red">let</font> 进行<code>局部变量</code>的定义</p><p>​    let的一般形式是  <strong>let(  ( (a 1 )(b 2)(c 3))    (exps1)(exps2)…(expsn))</strong></p><p>​    仔细看并不复杂，括号内分为两部分</p><p>​    第一部分是多个赋值括号，全部执行;</p><p>​     第二部分是多个处理语句，但只执行最后一个即expsn</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">let</span>((<span class="name">a</span> <span class="number">1</span>) (<span class="name">b</span> <span class="number">2</span>) (<span class="name">c</span> <span class="number">3</span> ) ) (<span class="name">-</span> <span class="number">2</span> <span class="number">3</span>)(<span class="name">+</span> <span class="number">23</span> <span class="number">3</span>)(<span class="name">+</span> a <span class="number">23323</span>))</span><br><span class="line"><span class="number">23324</span></span><br></pre></td></tr></table></figure><pre><code>**3.2**</code></pre><p>​    可以用<font color="red">defparameter</font>和<font color="red">defconsta    nt</font>定义全局变量和全局常数</p><p>​    请注意，这里的 var左右的<em>，是完全可以不加的，但习惯上全局变量的名字以 </em> 开始和结束，习惯而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;(defparameter *var* 13)                //(defparameter var 13) 也完全正确</span><br><span class="line">*var*                    // *var* 值为12</span><br><span class="line">&gt;(defparameter *var1*(+ *var* 11.1))</span><br><span class="line">*VAR1*</span><br></pre></td></tr></table></figure><p>​    随后可以用<font color="red">boundp  ‘ </font>  来判断 对象是否是先前定义过的全局变量或常量</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defconstant</span> var <span class="number">11</span>)</span><br><span class="line">(<span class="name">defparameter</span> var2 <span class="number">23</span>)</span><br><span class="line">(<span class="name">boundp</span> ' var)</span><br><span class="line">(<span class="name">boundp</span> ' var2)</span><br><span class="line"></span><br><span class="line">&gt; T</span><br><span class="line">&gt; T</span><br></pre></td></tr></table></figure><p>​    <strong>3.3</strong></p><p>​    Commom Lisp 最常用的赋值操作符是<code>setf</code>  </p><p>​    且首次通过<code>setf</code>得到值的符号将被视为全局常量.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setf</span> var <span class="number">22</span>) </span><br><span class="line">&gt; var</span><br><span class="line">&gt; 22    //此时var是全局变量，值是 22</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name">setf</span> a (<span class="name">cons</span> 'x (<span class="name">cons</span> 'y <span class="literal">nil</span>)))</span><br><span class="line">&gt; a</span><br><span class="line">&gt; (X Y)   //此时a是全局的列表 值是(X Y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> (<span class="name">setf</span> (<span class="name">car</span> a) <span class="number">2</span>)</span><br><span class="line">&gt; a</span><br><span class="line">&gt; (<span class="number">2</span> Y)</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><strong>关于占位符以及格式</strong></p><p>终于到了Lisp语言的输出和输入</p><p>类似<code>C</code>语言的<code>printf</code>，Lisp进行输出时，要通过format关键字</p><p>类似<code>C</code>语言的<code>%d,%c</code>，Lisp进行替换时，要通过~A，~S , ~D 等关键字,下面进行总结</p><blockquote><p>~%: 换行</p><p>~A : 该位置用后面的参数替换</p><p>~S : 该位置用后面的参数替换，~S除了可以实现~A的功能外，还可用于字符串替换</p><p>~X : 整数控制符 ,  打印十六进制</p><p>~D : 整数控制符，打印十进制</p><p>~O: 整数控制符，打印八进制</p><p>~B : 整数控制符，打印二进制</p><p>~R : 整数控制符，打印英文基数</p><p>~E : 浮点数指数格式打印</p><p>~F : 浮点数定点格式打印</p><p>~G :浮点数浮点格式打印</p><p>~$ : 浮点数定点结合方式打印</p></blockquote><p>下面给出几个实例:</p><blockquote><p>(format “1 + 2 = ~A”   3)</p><p>”1 + 2 = 3“</p><p>(format “~X” 544)</p><p>“220”</p><p>(format “~A ~S is the end of the world”  3  ‘banana’)</p><p>“3 banana is the end of the world”</p><p>(format nil”~D ~B ~X ~O ~R” 23 23  23 23 23)</p><p>“23 10111 17 27 twenty-three”</p></blockquote><p>值得注意的是 ，在上 述例子中， format 的第 一个参数为 nil 时，打印 执行后返回 值不 出现 nil ；而 参数为 t 时，打印 执行后返回 值出现 nil ，这就是 所谓 Lisp 的副 产品 ， 我们 在 以后 的 章节将 详细 介绍 。</p><p><code>换行:</code>   </p><ul><li><code>~n%</code> 和 <code>~n&amp;</code>    意为换n行， <code>~I</code>意为制表键</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">nil</span> <span class="string">"I  ~2%Am ~2&amp;Ok  ~I howareyou"</span>)</span><br><span class="line"><span class="string">"I</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Am</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Ok   howareyou"</span></span><br></pre></td></tr></table></figure><p>Common Lisp 的标准 输入运 算符是 read 。通 常是 从 toplevel 获得 输入 。需要注 意的是 ，使用 read 命令，系统将 一直等待用 户输入直到 用 户输入回车 符为 止。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">SETF</span> A (<span class="name">READ</span>))<span class="number">12</span> </span><br><span class="line"><span class="number">12</span> </span><br><span class="line">&gt; A </span><br><span class="line"><span class="number">12</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; (<span class="name">SETF</span> B (<span class="name">READ</span>))Lisp </span><br><span class="line">Lisp </span><br><span class="line">&gt; B </span><br><span class="line">lisp</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><p>关于条件语句</p><p><strong>5.1</strong></p><p>一般来说 ，函数名以字母   <code>p</code>  结尾的 lisp函数, 都用于 <font color="red">检验对象具有某种属性</font><br>例如 :</p><p><code>symbolplistpkeywordpboundpfboundpnumberptypepoddpevenpzerop</code><br>Null 可用于 判断 一个表是 否是空表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;  (boundp &apos;*var*)</span><br><span class="line">T </span><br><span class="line">&gt; (symbolp &apos;abc)</span><br><span class="line">T </span><br><span class="line">&gt; (listp &apos;(a b c))</span><br><span class="line">T </span><br><span class="line">&gt; (fboundp &apos;cons) </span><br><span class="line">T </span><br><span class="line">&gt;  (numberp 23) </span><br><span class="line">T </span><br><span class="line">&gt;  (typep 12 &apos;integer) </span><br><span class="line">T </span><br><span class="line">&gt;  (typep &apos;area &apos;symbol) </span><br><span class="line">T </span><br><span class="line">&gt; (null nil) </span><br><span class="line">T </span><br><span class="line">&gt; (null ()) </span><br><span class="line">T</span><br></pre></td></tr></table></figure><p><strong>5.2</strong></p><p>lisp还支持<font color="green">and , or , not </font>三个关键字</p><p>and关键字后面跟着几个表达式，<font color="red">当且仅当 全部的表达式都是正确的，此时结果返回最后一个正确的表达式的值</font></p><blockquote><p>(and (&gt; 2 1) (+ 1 1) (numberp ‘s) (setf d 3) )</p><blockquote><p>3</p></blockquote><p>(and (* 2 2 )(setf d 3)(&gt; 2 1))</p><blockquote><p>T</p></blockquote><p>(and (* 2 2)(&gt;2 3 )(setf d 3))</p><blockquote><p>NIL</p></blockquote></blockquote><p>or关键字后面跟着几个表达式，<font color="red">当且仅当 所有表达式至少有一个正确时成立，此时返回第一个正确的表达式</font> </p><blockquote><p>(or (* 2 2)(&lt; 1 2 ))</p><blockquote><p>4</p></blockquote><p>(or (&gt; 2 3 )(* 2 2)(setf d 3))</p><blockquote><p>4 </p></blockquote></blockquote><p>not 关键字后面跟着一个表达式，<font color="red">返回和表达式真假相反的</font>(一般的代数运算都视为真)</p><blockquote><p>not (&gt;  1 2))</p><blockquote><p>T </p></blockquote></blockquote><p><strong>5.3</strong></p><p>判断之处，怎么能够少得了 <code>if</code> 的身影呢？</p><p><code>if</code>的基本思想是，<font color="purple">对条件进行判断，倘若正确，执行第一个表达式，否则执行第二个表达式</font></p><p>同时使用   <code>progn</code>  进行多个表达式的结合，相当于是大括号。 </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &gt; (<span class="name">if</span> (<span class="name">&gt;</span> (<span class="name">-</span> <span class="number">3</span> <span class="number">2</span>) <span class="number">4</span>) </span><br><span class="line">      (<span class="name">format</span> <span class="literal">nil</span> <span class="string">"~A"</span> <span class="number">4</span>) </span><br><span class="line">      (<span class="name">progn</span> </span><br><span class="line">         (<span class="name">setf</span> a (<span class="name">cons</span> <span class="number">2</span> <span class="literal">nil</span>)) </span><br><span class="line">         (<span class="name">format</span> <span class="literal">nil</span> <span class="string">"~A+~A=~A"</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span>) </span><br><span class="line">         ))</span><br><span class="line"></span><br><span class="line">    <span class="string">"2+3=5"</span></span><br><span class="line">&gt;(<span class="name">if</span> (<span class="name">&gt;</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line">     ( <span class="name">*</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line">     (<span class="name">progn</span> </span><br><span class="line">         (<span class="name">format</span> <span class="literal">nil</span> <span class="string">"~A is "</span> <span class="number">2</span>)</span><br><span class="line">         (<span class="name">format</span> <span class="literal">nil</span> <span class="string">"~A!"</span> <span class="number">3</span>)</span><br><span class="line">      )</span><br><span class="line"> )</span><br><span class="line"><span class="string">"3!"</span></span><br></pre></td></tr></table></figure><h1 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h1><p><strong>循环以及循环体</strong></p><p><em>6.1</em></p><p> <code>do</code>循环</p><p> do循环的基本形式是: </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">do</span> ((变量名 变量初值 (变量变化语句)))</span><br><span class="line">      (结束条件 返回值)</span><br><span class="line">       循环主体)</span><br></pre></td></tr></table></figure><p>应用到一个实际需求上，我们要 得到 从<code>1到10所有的数的平方</code>，即通过循环得到</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="name">let</span> ((<span class="name">b</span> <span class="literal">nil</span>))   //初始化</span><br><span class="line">      (<span class="name">do</span>   ((<span class="name">a</span> <span class="number">1</span> ( <span class="number">1</span>+ a ))) //变量变化语句 </span><br><span class="line">          ((<span class="name">&gt;</span> a <span class="number">10</span>)b)  //循环控制条件</span><br><span class="line">          (<span class="name">setf</span> b (<span class="name">cons</span>(<span class="name">*</span> a a)b)) //循环执行语句</span><br><span class="line">      )</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line">//结果</span><br><span class="line">(<span class="number">100</span> <span class="number">81</span> <span class="number">64</span> <span class="number">49</span> <span class="number">36</span> <span class="number">25</span> <span class="number">16</span> <span class="number">9</span> <span class="number">4</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><em>6.2</em></p><p><code>dolist</code> 循环</p><p>dolist循环的基本形式是:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">dolist</span> (循环变量 元素列表 返回值) </span><br><span class="line">需要执行的语句    </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实例：计算从 1 到 10 的平方根的和</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">let</span>  ((<span class="name">b</span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>)) (<span class="name">c</span> <span class="number">0</span>)  d ) </span><br><span class="line"> (<span class="name">dolist</span> (<span class="name">v</span> b c) </span><br><span class="line">        (<span class="name">setf</span> d (<span class="name">sqrt</span> v)) </span><br><span class="line">        (<span class="name">setf</span> c (<span class="name">+</span> c d ))</span><br><span class="line"> )</span><br><span class="line"> )</span><br><span class="line">//结果</span><br><span class="line"><span class="number">22.468277</span></span><br></pre></td></tr></table></figure><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1><p><strong>函数的定义</strong></p><p><em>7.1</em></p><p>函数的定义很简单，形式如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> 函数名(参数列表)</span><br><span class="line">(</span><br><span class="line">函数的功能</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//我定义了一个函数，功能就是完成乘方</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> myafun(<span class="name">v</span>)</span><br><span class="line">(<span class="name">*</span> v v)</span><br><span class="line">)</span><br><span class="line">MYAFUN</span><br><span class="line"></span><br><span class="line">&gt; (<span class="name">myafun</span> <span class="number">2</span>)</span><br><span class="line">  <span class="number">4</span></span><br></pre></td></tr></table></figure><p><em>7.2</em></p><p>看一个复杂的例子</p><p>功能是完成两个矩阵的笛卡儿积</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">面再 给出一个函数的例 子。</span><br><span class="line"> &gt;  (<span class="name">defun</span> discarets(<span class="name">list1</span> list2)</span><br><span class="line"> (<span class="name">let</span> ((<span class="name">a</span> <span class="literal">nil</span>)(<span class="name">rst</span> <span class="literal">nil</span>))  //初始化</span><br><span class="line"> (<span class="name">dolist</span> (<span class="name">v</span> list1 rst)//行</span><br><span class="line"> (<span class="name">dolist</span> (<span class="name">u</span> list2)       //列           </span><br><span class="line"> (<span class="name">setf</span> a (<span class="name">list</span> u v)  //取两个元素进行搭配                           </span><br><span class="line"> rst (cons a rst)))))) //将每一对搭配好的 组合为最终结果 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DISCARETS </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;   (<span class="name">DISCARETS</span> '(<span class="number">1</span> <span class="number">2</span> ) '(a b c)) </span><br><span class="line"></span><br><span class="line">((<span class="name">C</span> <span class="number">2</span>) (<span class="name">B</span> <span class="number">2</span>) (<span class="name">A</span> <span class="number">2</span>) (<span class="name">C</span> <span class="number">1</span>) (<span class="name">B</span> <span class="number">1</span>) (<span class="name">A</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过例子了解lisp的特点&lt;/p&gt;
    
    </summary>
    
    
      <category term="lisp" scheme="httpsp://yoursite.com/tags/lisp/"/>
    
  </entry>
  
  <entry>
    <title>机器学习日记_2</title>
    <link href="httpsp://yoursite.com/2018/11/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0(%E4%BA%8C)/"/>
    <id>httpsp://yoursite.com/2018/11/25/机器学习日记(二)/</id>
    <published>2018-11-25T01:56:58.841Z</published>
    <updated>2018-11-28T16:26:09.415Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg" alt=""></p><a id="more"></a><hr><h1 id="第一个机器学习算法"><a href="#第一个机器学习算法" class="headerlink" title="第一个机器学习算法"></a>第一个机器学习算法</h1><font color="blue" size="5">Linear regression with one variable</font>【一元线性回归】<br><br><br><br>什么是一元变量线性回归？<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回归分析只涉及到两个变量的，称一元回归分析。一元回归的主要任务是从两个相关变量中的一个变量去估计另一个变量，被估计的变量，称因变量，可设为Y；估计出的变量，称自变量，设为X。回归分析就是要找出一个数学模型Y=f(X)，使得从X估计Y可以用一个函数式去计算。当Y=f(X)的形式是一个直线方程时，称为一元线性回归。这个方程一般可表示为Y=A+BX。根据最小平方法或其他方法，可以从样本数据确定常数项A与回归系数B的值。A、B确定后，有一个X的观测值，就可得到一个Y的估计值。回归方程是否可靠，估计的误差有多大，都还应经过显著性检验和误差计算。有无显著的相关关系以及样本的大小等等，是影响回归方程可靠性的因素</span><br></pre></td></tr></table></figure><br><br><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fxk18qppzkj30px0ds4hf.jpg" alt="1543107453608"><br><br><br><br>举个例子来说，上面的坐标图，横轴代表房屋的面积，纵轴表示可以卖到的价钱，小王手里有一个1250单位大小的房子，他想知道这间房子可以卖多少钱？<br><br>___<br><br>为了解决这个问题，我们<code>拟合</code>这些数据，就是把这些离散的数据近似成为一条连续的曲线，但是你可以看到，我们通过直线拟合或二次函数拟合，这两种情况下的结果显然是不同的，那么，我们该怎样选择呢？<br><br>此时此刻，我们正在解决一个<code>Regression problem</code>(回归问题)，意思就是我们想预测连续的数据输出，也就是价格。<br><br><br><img src="C:\Users\35.32\AppData\Roaming\Typora\typora-user-images\1543333273119.png" alt="1543333273119"><br><br><img src="C:\Users\35.32\AppData\Roaming\Typora\typora-user-images\1543333559831.png" alt="1543333559831"><br><br><font color="red"> 解释: </font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">其实很简单</span><br><span class="line"></span><br><span class="line">traing set : 是训练集，也就是你为了训练机器学习，而传入的样本数据集合</span><br><span class="line">m : 是数据的个数</span><br><span class="line">x ：是输入</span><br><span class="line">y ：是输出  //他俩右上角其实是个index索引而已，不是啥数学运算</span><br><span class="line">hypothesis ： 假设函数 // 就是我们假设存在一个函数h，输入个x，输出个y</span><br><span class="line">Hθ(x) = θ1X + θ0 : 是假设的函数，是个看起来吓人实际上就是个线性函数，θ1是斜率，θ0是截距</span><br></pre></td></tr></table></figure><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/mw690/6c3e6b13gy1fxjkkti8zwj21900u0qoe.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="httpsp://yoursite.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习日记_1</title>
    <link href="httpsp://yoursite.com/2018/11/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0(%E4%B8%80)/"/>
    <id>httpsp://yoursite.com/2018/11/24/机器学习日记(一)/</id>
    <published>2018-11-24T15:26:33.255Z</published>
    <updated>2018-11-27T15:39:39.300Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx1.sinaimg.cn/mw690/74cae32aly1fxbe1216zoj20u011ihdu.jpg" alt=""></p><a id="more"></a><p><strong>机器学习的定义:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tom Mitchell (1998) Well-posed Learning Problem:</span><br><span class="line">A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</span><br></pre></td></tr></table></figure><p><code>一个计算机程序从经验E中学习一些任务T和一些性能度量P，它在T上的性能，用P度量，将随着经验E的提高而提高。</code></p><p>比如我问你一个问题：</p><p>Suppose your email program watches which emails you do or do not mark as spam, and based on that learns how to better filter spam.  What is the task T in this setting? </p><p><code>假设您的电子邮件程序监视您标记哪些电子邮件为垃圾邮件，并在此基础上学习如何更好地过滤垃圾邮件。在这种情况下，任务T是什么?</code></p><p>​     A.  Classifying emails as spam or not spam. </p><p>​     B. Watching you label emails as spam or not spam. </p><p>​     C. The number (or fraction) of emails correctly classified as spam/not spam. </p><p>​     D. None of the above—this is not a machine learning problem.</p><p>答案是<code>A</code></p><p>A选项意思是<code>判别一封邮件是不是垃圾邮件</code>，这对应着我们的我们的<code>任务T</code></p><p>B选项意思是<code>看你把电子邮件标记为垃圾邮件或非垃圾邮件</code>这对应着<code>经验E</code></p><p>C选项意思是 <code>正确分类为垃圾邮件/非垃圾邮件的邮件数量(或比例)</code>显然这是效率<code>P</code></p><p>D选项意思是<code>以上全错</code></p><hr><h2 id="机器学习主要算法分类"><a href="#机器学习主要算法分类" class="headerlink" title="机器学习主要算法分类"></a>机器学习主要算法分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Machine learning algorithms:</span><br><span class="line"></span><br><span class="line">-Supervised learning    (监督学习)</span><br><span class="line"></span><br><span class="line">-Unsupervised learning  (无监督学习)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Reinforcement learning, recommender systems(强化学习，推荐系统)</span><br><span class="line">Also talk about: Practical advice for applying learning algorithms(实用的应用学习算法建议)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">监督学习算法:</span><br><span class="line">    我们给定了一个数据集，里面都是正确的数据，supervisedlearning的目的就是，依赖这些有限的数据，给出更多的正确数据，从而完成我们估价的目的。</span><br></pre></td></tr></table></figure><p>例如: 给了过去十年的所有肾病的病人的肾的大小，然后预测某一个大小的肾患病的几率是多大<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无监督学习算法:</span><br><span class="line">    无监督学习是指从不需要人为注释的样本的分布中抽取信息</span><br></pre></td></tr></table></figure></p><p>例如: 噪音分离</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/74cae32aly1fxbe1216zoj20u011ihdu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="httpsp://yoursite.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="httpsp://yoursite.com/2018/11/11/Re-NFA-DFA-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%BB%A3%E7%A0%81/"/>
    <id>httpsp://yoursite.com/2018/11/11/Re-NFA-DFA-词法分析器代码/</id>
    <published>2018-11-11T08:44:11.810Z</published>
    <updated>2018-11-25T00:51:09.542Z</updated>
    
    <content type="html"><![CDATA[<p>Re-&gt;NFA-&gt;DFA-&gt;词法分析器代码</p><p>thompson算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基于对re结构做优化(数学归纳法)</span><br><span class="line"> 1.基本的re直接构造</span><br><span class="line"> 2.复合的re递归构造</span><br><span class="line">递归算法，容易实现</span><br></pre></td></tr></table></figure><p>子集构造算法</p><p>hopcroft最小优化算法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Re-&amp;gt;NFA-&amp;gt;DFA-&amp;gt;词法分析器代码&lt;/p&gt;
&lt;p&gt;thompson算法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="complier" scheme="httpsp://yoursite.com/tags/complier/"/>
    
  </entry>
  
  <entry>
    <title>特殊的dp</title>
    <link href="httpsp://yoursite.com/2018/11/10/%E7%89%B9%E6%AE%8A%E7%9A%84dp/"/>
    <id>httpsp://yoursite.com/2018/11/10/特殊的dp/</id>
    <published>2018-11-10T08:24:47.165Z</published>
    <updated>2018-11-10T08:25:44.349Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>已经学过了动归的我，面对一些复杂dp题目，却仍然感觉到，无从下手。</p><p>我必须深刻知道，我所理解的只是皮毛罢了。</p><p>针对于这个题目来讲 #<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1421" target="_blank" rel="noopener">搬寝室</a></p><p>我被弄得很糊涂，自己只是掌握了一个空架子，几句话，几行代码，而真正的思想，可以说是根本没有触及到的。</p><p>分析这个问题，题目给定了<code>n个物品的重量</code>,并提出了这样一个要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给你k次(k正确)，你一次挑选两个，一次挑选两个，一共挑k次。</span><br><span class="line">要求最后，你挑的俩数差的绝对值，最后一共k个绝对值是吧，要求这些绝对值的总和最小。</span><br></pre></td></tr></table></figure><p>怎么办？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每次的抉择，必定会对以后的抉择产生影响</span><br></pre></td></tr></table></figure><p>如果是动态规划，要怎样想呢？</p><ol><li>把所有物品排序</li><li>只选一对，从1到n的最小dp组构建出来</li><li>选两对，建立在上一步的基础上, 帅气的一个转移，我是选择这对呢，还是不选呢</li><li>以此类推</li></ol><p>这个思路的梳理，真的使人头痛，真的好菜，多做吧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a[maxn];me(dp,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            </span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>); <span class="comment">//sort(a+1,a+n+1)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>*i&lt;=j)</span><br><span class="line">                    dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j<span class="number">-2</span>]+(a[j]-a[j<span class="number">-1</span>])*(a[j]-a[j<span class="number">-1</span>]));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j]=inf;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[k][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱到无力。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="httpsp://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>仓库</title>
    <link href="httpsp://yoursite.com/2018/11/10/%E4%BB%93%E5%BA%93/"/>
    <id>httpsp://yoursite.com/2018/11/10/仓库/</id>
    <published>2018-11-10T08:00:32.955Z</published>
    <updated>2018-12-03T12:28:52.442Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">const int maxn=2e3+5;</span><br><span class="line">const int mod=1e9+7;</span><br><span class="line">const int inf=1e9;</span><br><span class="line">#define me(a,b) memset(a,b,sizeof(a))</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">int dp[maxn][maxn];</span><br></pre></td></tr></table></figure><hr><p>LCA离线</p><p>LCA: Lowest Common Ancestors)即最近公共祖先,是指在有根树中,找出某两个结点u和v最近的公共祖先</p><p><a href="https://blog.csdn.net/lw277232240/article/details/77017517" target="_blank" rel="noopener">演练及解释</a> </p><p>我们以  <font color="blue">poj1470Closest Common Ancestors </font>为例，结合上面的解释，进行代码展示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">905</span>;</span><br><span class="line"><span class="keyword">int</span> father[MAXN],ancestor[MAXN];</span><br><span class="line"><span class="keyword">bool</span> visit[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">map</span>[MAXN];<span class="comment">//save the tree</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; query[MAXN];<span class="comment">//save the query</span></span><br><span class="line"><span class="keyword">int</span> n,t,root;</span><br><span class="line"><span class="keyword">bool</span> indegree[MAXN];<span class="comment">//the indegree to find the root</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//路径压缩</span></span><br><span class="line">    <span class="keyword">if</span>(father[v]==v)<span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">return</span> father[v]=getfather(father[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aunion</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//连接两个树</span></span><br><span class="line">    <span class="keyword">int</span> fv=getfather(v),fu=getfather(u);</span><br><span class="line">    father[fv]=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">map</span>[id].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> son=<span class="built_in">map</span>[id][i];</span><br><span class="line">        LCA(son);</span><br><span class="line">        aunion(id,son);</span><br><span class="line">    &#125;</span><br><span class="line">    visit[id]=<span class="number">1</span>;</span><br><span class="line">    len=query[id].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> son=query[id][i];</span><br><span class="line">        <span class="keyword">if</span>(visit[son])</span><br><span class="line">            ans[father[getfather(son)]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">map</span>[i].clear();</span><br><span class="line">        query[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="built_in">memset</span>(indegree,<span class="number">0</span>,<span class="keyword">sizeof</span>(indegree));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)father[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:(%d)"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;y;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">            indegree[z]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">map</span>[x].push_back(z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;<span class="comment">//this method of the init is really clever</span></span><br><span class="line">        <span class="keyword">while</span>(getchar()!=<span class="string">'('</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        query[x].push_back(y);</span><br><span class="line">        query[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">')'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!indegree[i])root=i;<span class="comment">//find the root;warning:the 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span>,i,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        init();</span><br><span class="line">        LCA(root);</span><br><span class="line">        output();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 迪杰斯特拉算法 ://我这相当于又复习一遍，有什么用呢？我不知道，只是感觉很有意思//</p><p>我劝我自己先把这个视频看一遍再分析—-<a href="https://www.youtube.com/watch?v=RFEqcXSo_Zg" target="_blank" rel="noopener">迪杰斯特拉演示</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt;pii;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dist[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cost[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> graph[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> price[maxn][maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt;&gt;Q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dist[i]=inf;</span><br><span class="line">cost[i]=inf;</span><br><span class="line">&#125;</span><br><span class="line">dist[start]=<span class="number">0</span>;</span><br><span class="line">cost[start]=<span class="number">0</span>;</span><br><span class="line">Q.push(make_pair(<span class="number">0</span>,start));</span><br><span class="line"><span class="comment">//循环开始 </span></span><br><span class="line"><span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=Q.top().second;  </span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[v]&gt;dist[u]+graph[v][u] ||(dist[v]==dist[u]+graph[v][u] &amp;&amp; cost[v]&gt;cost[u]+price[v][u]) )&#123;</span><br><span class="line">dist[v]=dist[u]+graph[v][u];</span><br><span class="line">    cost[v]=cost[u]+price[v][u];</span><br><span class="line">    Q.push(make_pair(dist[v],v)); <span class="comment">//可知道，一次循环可能不止向Q内加入一对数据，但是优先队列总是能够让找到顶部那个距离属性最小的 </span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dist[v]==dist[u]+graph[v][u] &amp;&amp; cost[v]&gt;cost[u]+price[v][u])&#123;</span><br><span class="line">cost[v]=cost[u]+price[v][u];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,a,b,c,d;</span><br><span class="line"><span class="keyword">int</span> begin , end;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)&amp;&amp; n)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">graph[i][j] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line"><span class="keyword">if</span> (graph[a][b] == inf ||   (graph[a][b] != inf &amp;&amp; (graph[a][b] &gt; c || (graph[a][b] == c &amp;&amp; price[a][b] &gt; d))))&#123;</span><br><span class="line">price[a][b] = d;</span><br><span class="line">price[b][a] = d;</span><br><span class="line">graph[a][b] = c;</span><br><span class="line">graph[b][a] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;begin,&amp;end);</span><br><span class="line">Dijkstra(begin);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, dist[end], cost[end]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="httpsp://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>三类背包</title>
    <link href="httpsp://yoursite.com/2018/11/09/%E4%B8%89%E7%B1%BB%E8%83%8C%E5%8C%85/"/>
    <id>httpsp://yoursite.com/2018/11/09/三类背包/</id>
    <published>2018-11-09T15:40:06.650Z</published>
    <updated>2018-11-26T16:25:32.030Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 01 背包，很直接很简单</span></span><br><span class="line"><span class="comment">//背包容量一定，一堆物品的 重量--价值 也知道了， 一个一个看，我是选还是不选呢？</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)  <span class="comment">//每次 考虑一个商品的时候，咱都要从 m 再开始 </span></span><br><span class="line">         <span class="keyword">if</span>(j&gt;=wet[i])</span><br><span class="line">         dp[j]=max(dp[j-wet[i]]+val[i],dp[j]);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[m];     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完全背包，你去看看01背包，完全背包和那个的唯一差别是 这里的物品是无限的 </span></span><br><span class="line"><span class="comment">// 这个完全背包 写起来 还是比 01背包简单点 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=wet[i];j&lt;=m;j++)</span><br><span class="line">      dp[j]=max( dp[j-wet[i]]+val[i] , dp[j]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多重背包 是啥呢， 就是 其他和01 背包一样，就是这物品数量，既不是一个，也不是无限个，是 不定数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> m,n;<span class="comment">//先读入背包最大容量和物品的个数</span></span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> dp[m+<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> wet[n+<span class="number">5</span>];<span class="comment">//记录物品重量</span></span><br><span class="line"> <span class="keyword">int</span> val[n+<span class="number">5</span>];<span class="comment">//记录物品价值</span></span><br><span class="line"> <span class="keyword">int</span> amt[n+<span class="number">5</span>];<span class="comment">//记录 每个物品的数量 </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;wet[i]&gt;&gt;val[i]&gt;&gt;amt[i];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;amt[i];j++) <span class="comment">//商品数目</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k=m;k&gt;=wet[i];k--)</span><br><span class="line">            dp[k]=max(dp[k-wet[i]]+val[i],dp[k]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m];     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>恶心</title>
    <link href="httpsp://yoursite.com/2018/11/09/%E6%81%B6%E5%BF%83/"/>
    <id>httpsp://yoursite.com/2018/11/09/恶心/</id>
    <published>2018-11-09T14:24:00.491Z</published>
    <updated>2018-11-09T14:24:00.495Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>这清楚地被人看到，A先生独自一个人在屋顶打转，他低着头看着自己的脚尖，他越走越快，地上被他用皮鞋明显地划出了一个圆，A先生甚至觉得，自己也跟不上自己。</p><p>A先生是一个陀螺。</p><p>我想解救A先生出来，我想让这个不停打转的A先生，停下来。</p><p>您可能会问，问我为什么，劝我不要这样做。</p><p>您对我讲，这个世界上有一条道理，就是千万不要碰一个，原地打转的陀螺。</p><p>但我要这样做，因为，我也是个陀螺。</p><p>只有我旋转到一个特定的角度里，我才用眼睛看见，和我一样打转的A先生。</p><p>“你好啊! “我边旋转边向A先生打招呼。</p><p>但这位A先生，似乎不情愿我这样做，我见他低着头，脚步规整。</p><p>于是我加速旋转，这下子啊，A先生的轮廓，就完完整整地呈现在了，我的眼珠里面。</p><p>“你为什么旋转呢?”我问A先生。</p><p>“为什么?”他轻声说。</p><p>“什么为什么?” 我回答他。</p><p>“为什么你看得见我?”  他的脸扭到了一团  “我却看不见自己?”</p><p>我笑着对他说，”哈哈，A先生，我们怎么可能看的到自己呢?” </p><p>”你” 他接着说道 “也是我的剥夺者之一，你属于，地狱，对，你是我的地狱，你看到我，但我却看不到我自己，我将存在于被存在之中，你无疑，是我的恶魔，我并不能时时刻刻都认识到这处，我已经受损。“ </p><p>听到这里，我立即恶心起来。</p><p>”先生！我怎么可能属于，地狱，这种词汇？ 您如果想看清自己，您想这样做的话，您完全不必旋转，您必须停下来!”</p><p>“ 那你呢? “ 他问我。</p><p>A先生是个陀螺，旋转的陀螺。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>基础:从数独看Dfs</title>
    <link href="httpsp://yoursite.com/2018/11/08/%E5%9F%BA%E7%A1%80%E4%BB%8E%E6%95%B0%E7%8B%AC%E7%9C%8BDfs/"/>
    <id>httpsp://yoursite.com/2018/11/08/基础从数独看Dfs/</id>
    <published>2018-11-08T14:12:12.396Z</published>
    <updated>2018-11-08T14:16:19.732Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>题目大意是:<br>玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个同色九宫内的数字均含1-9，不重复，输入如</p><p><code>005300000800000020070010500400005300010070006003200080060500009004000030000009700</code></p><p>要求输出</p><p><code>145327698839654127672918543496185372218473956753296481367542819984761235521839764</code></p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>1： 九宫格的规则我们直到，同行，同列，同宫，必须是不以一样的，所以筛选方向就有三个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_row_col_exist</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123; <span class="comment">//筛选同行同列，看看有没有一样的，否则返回1成功</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[row][i] == num)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[i][col] == num)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_part</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> num)</span></span>&#123;<span class="comment">//筛选同宫，看看传入的 num 在不在(row,col)所处的宫里面，不在的话返回1</span></span><br><span class="line"><span class="keyword">int</span> partx = (row<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> party = (col<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x= (partx)*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = party*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">    <span class="built_in">map</span>[x][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y] == num||</span><br><span class="line">    <span class="built_in">map</span>[x][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y+<span class="number">1</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x][y+<span class="number">2</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">1</span>][y+<span class="number">2</span>] == num||</span><br><span class="line">    <span class="built_in">map</span>[x+<span class="number">2</span>][y+<span class="number">2</span>] == num||</span><br><span class="line">)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，基本上，上面就解决了我们过滤的问题，接下里是<code>Dfs</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x.<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(row &gt; <span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[x][y] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(is_row_col_exist(x,y,i) &amp;&amp;  check_part(x,y,i) ) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y]=i;</span><br><span class="line">Dfs(x+(y+<span class="number">1</span>)/<span class="number">10</span>,(y+<span class="number">1</span>)%<span class="number">10</span>);</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Dfs(x+(y+<span class="number">1</span>)/<span class="number">10</span>,(y+<span class="number">1</span>)%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>第一问题·</em>： <strong>搜索搜索，从哪里开始呢？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是的，我们首先要找到一个入口，这个入口一般是什么？</span><br><span class="line">是矩阵的最边缘，是一个可以有能力通过循环跑遍所有情况的位置。</span><br></pre></td></tr></table></figure><p><em>第二问题</em>： <strong>回溯的必要性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">倘若没有回溯条件，必定爆栈</span><br><span class="line">而往往回溯条件不是那么的容易找到(至少对于我来讲是这样的)</span><br><span class="line">这个数独题存在：    Dfs(x+(y+1)/10,(y+1)%10)</span><br><span class="line"></span><br><span class="line">一号位参数 和 二号位参数 是存在递增的，但我们的9X9,所以条件就是： 行数不能超过了最大(我觉得不容易找到)</span><br></pre></td></tr></table></figure><p><em>第三问题</em> ： <strong>dfs的基本形状</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dfs&#123;</span><br><span class="line">    </span><br><span class="line">    /*跳出条件&#123;</span><br><span class="line">        成功了</span><br><span class="line">        return;</span><br><span class="line">    &#125;*/</span><br><span class="line">    </span><br><span class="line">    终止条件&#123;</span><br><span class="line">       不用再进行了，已经失败了</span><br><span class="line">       return</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">   循环&#123; </span><br><span class="line">    是符合条件的&#123;</span><br><span class="line">        信息改变</span><br><span class="line">        dfs(下一位) //向深处进行</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;   </span><br><span class="line">   信息恢复   //为什么呢？？ 因为这里的信息受到改变，且肯定是不满足条件的，那么为了使接下来的程序顺利执行，必须信息恢复，否则这个信息的影响会贯穿下去。这会让深度搜索进行不下去。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[10][10];//存储数字</span><br><span class="line">int is_row_col_repeat(int row,int col,int num)&#123;//判断行列是否重复</span><br><span class="line">    //判断行是否重复</span><br><span class="line">    for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">        if (a[row][i]==num) &#123;</span><br><span class="line">            return 0;//行重复，返回0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断列是否重复</span><br><span class="line">    for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">        if (a[i][col]==num) &#123;</span><br><span class="line">            return 0;//列重复，返回0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;//行列不重复，返回1</span><br><span class="line">&#125;</span><br><span class="line">int check_row_range(int row)&#123;//判断行的范围</span><br><span class="line">    if (row&gt;=1 &amp;&amp; row&lt;=3) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else if(row&gt;=4&amp;&amp;row&lt;=6)&#123;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return 7;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int check_col_range(int col)&#123;//判断列的范围</span><br><span class="line">    if(col&gt;=1&amp;&amp;col&lt;=3)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else if (col&gt;=4&amp;&amp;col&lt;=6) &#123;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return 7;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int is_block_repeat(int row,int col,int num)&#123;//判断同色九宫格是否重复</span><br><span class="line">    int x,y;</span><br><span class="line">    x=check_row_range(row);</span><br><span class="line">    y=check_col_range(col);</span><br><span class="line">    for (int i=x;i&lt;=x+2;i++) &#123;</span><br><span class="line">        for (int j=y;j&lt;=y+2;j++) &#123;</span><br><span class="line">            if (a[i][j]==num) &#123;</span><br><span class="line">                return 0;//重复，返回0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;//不重复，返回1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(int row,int col)&#123;</span><br><span class="line">    if (row&gt;9) &#123;//如果行超出9行，直接输出</span><br><span class="line">        for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">            for (int j=1;j&lt;=9;j++) &#123;</span><br><span class="line">                printf(&quot;%d&quot;,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (a[row][col]==0) &#123;//如果没有填数字</span><br><span class="line">        for (int i=1;i&lt;=9;i++) &#123;</span><br><span class="line">            if (is_row_col_repeat(row, col, i) &amp;&amp; is_block_repeat(row, col, i)) &#123;//如果行列九宫格不重复</span><br><span class="line">                a[row][col]=i;//填充数字</span><br><span class="line">                dfs(row+(col+1)/10, (col+1)%10);//继续搜索</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[row][col]=0;//重新置为0</span><br><span class="line">    &#125;else&#123;//如果已经填了，继续搜索</span><br><span class="line">        dfs(row+(col+1)/10, (col+1)%10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">    string s;</span><br><span class="line">    for(int i=1;i&lt;=9;i++)&#123;</span><br><span class="line">        cin &gt;&gt; s;//输入字符串</span><br><span class="line">        for(int j=1;j&lt;=9;j++)&#123;</span><br><span class="line">            char ss=s.at(j-1);//取s的第j-1的字符</span><br><span class="line">            a[i][j]=ss-&apos;0&apos;;//将ss转化为整数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(1,1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Berlekamp-Massey算法</title>
    <link href="httpsp://yoursite.com/2018/11/08/Berlekamp-Massey%E7%AE%97%E6%B3%95/"/>
    <id>httpsp://yoursite.com/2018/11/08/Berlekamp-Massey算法/</id>
    <published>2018-11-07T16:17:23.132Z</published>
    <updated>2018-11-07T16:17:23.134Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>坑在这</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速幂&amp;矩阵快速幂</title>
    <link href="httpsp://yoursite.com/2018/11/07/%E5%BF%AB%E9%80%9F%E5%B9%82&amp;%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>httpsp://yoursite.com/2018/11/07/快速幂&amp;矩阵快速幂/</id>
    <published>2018-11-07T15:42:47.605Z</published>
    <updated>2018-11-08T04:49:04.014Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>计算关于: p^n 问题，带入实例最易理解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">lli <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n )</span></span>&#123;  <span class="comment">//x^</span></span><br><span class="line">    lli snowball = x;</span><br><span class="line">lli ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans *=snowball;</span><br><span class="line">&#125;</span><br><span class="line">snowball*=snowball;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>矩阵快速幂是快速幂在矩阵连乘上的应用，快速幂是种思想，而矩阵快速幂指某算法在它内部可能有一部分是矩阵连乘，然后使用的了快速幂的模板，以此类推，我们可以有很多种的快速幂了。</p><p>也就是上面的代码。</p><p>针对这个问题</p><p><a href="http://poj.org/problem?id=3070" target="_blank" rel="noopener">Poj——-Fibonacci</a></p><p>我觉得这个题的精髓不在快速幂，而在从斐波那契数列 到 矩阵连乘的转化。四个字:  <strong>化加为乘</strong> ，使得我们能用快速幂。</p><p>图示如下：</p><p><img src="http://ww1.sinaimg.cn/large/006YPp6gly1fwzy5ggbiqj31hc140jw0.jpg" alt=""></p><p>存个模板先</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">multi</span><span class="params">(node s, node b)</span></span>&#123;</span><br><span class="line">    node temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">temp.a[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)&#123;</span><br><span class="line">temp.a[i][j]=(temp.a[i][j]+(s.a[i][k]*b.a[k][j]))%<span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">martix_quick</span><span class="params">(node snowball,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    snowball.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    snowball.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    node b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            b.a[i][j]=(i==j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">b=multi(b,snowball);</span><br><span class="line">&#125;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">snowball=multi(snowball,snowball);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b.a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/cmmdc/p/6936196.html" target="_blank" rel="noopener">解释好文</a></p><p><a href="https://paste.ubuntu.com/p/Fqkr3xV5NS/" target="_blank" rel="noopener">poj我的码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Kmp字符串匹配算法</title>
    <link href="httpsp://yoursite.com/2018/11/05/Kmp/"/>
    <id>httpsp://yoursite.com/2018/11/05/Kmp/</id>
    <published>2018-11-05T13:06:10.649Z</published>
    <updated>2018-11-05T13:11:00.091Z</updated>
    
    <content type="html"><![CDATA[<p>无参考意义</p><a id="more"></a><p>S: 等待被匹配的字符串     <code>abcabcabccabcd</code></p><p>C: 匹配字符串                    <code>abcc</code></p><hr><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>next 数组下标从<code>0</code>开始，<code>next[0] = -1</code>,</p><p>下标  1，2，3，4 · · · 代表:  <code>C这个字符串，长度到1,2,3,4··· 位置时候，我们究竟能够能找到多长的对称前后缀</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">比如对于这个next:</span><br><span class="line">next[0] = -1</span><br><span class="line">next[1] = 0</span><br><span class="line">next[2] = 0</span><br><span class="line">next[3] = 0 </span><br><span class="line">next[4] = 1</span><br></pre></td></tr></table></figure><p>代码实现：(不理解的时候，用笔写出来)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;      </span><br><span class="line"><span class="keyword">while</span>(j&lt;c_len)&#123;                        <span class="meta">#j代表着我们已经完成了几个</span></span><br><span class="line"><span class="keyword">if</span>( k==<span class="number">-1</span> || next[k]==next[j])&#123;   </span><br><span class="line">k+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">k=next[k];    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int Kmp(char *c,char *s)&#123;</span><br><span class="line">int i=0;</span><br><span class="line">int j=0;</span><br><span class="line">int sum=0;</span><br><span class="line">get_next();</span><br><span class="line">while(i &lt; s_len)&#123;  #大的串，不要越界了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(j==-1 || c[j]==s[i])&#123;  #核心</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(j==c_len)&#123;  #匹配完成了啊，就记录一个，j重新开始</span><br><span class="line">sum++;</span><br><span class="line">    j=0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxn 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>  c[maxn];</span><br><span class="line"><span class="keyword">char</span>  s[maxn];</span><br><span class="line"><span class="keyword">int</span>   next[maxn];</span><br><span class="line"><span class="keyword">int</span>  c_len,s_len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;c_len)&#123;</span><br><span class="line"><span class="keyword">if</span>( k==<span class="number">-1</span> || next[k]==next[j])&#123;</span><br><span class="line">k+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">k=next[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kmp</span><span class="params">(<span class="keyword">char</span> *c,<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">get_next();</span><br><span class="line"><span class="keyword">while</span>(i &lt; s_len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">-1</span> || c[j]==s[i])&#123;</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==c_len)&#123;</span><br><span class="line">sum++;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入待比较字符串:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入比较字符串:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">c_len = <span class="built_in">strlen</span>(c);<span class="comment">//sizeof(c)/sizeof(char);</span></span><br><span class="line">s_len = <span class="built_in">strlen</span>(s);<span class="comment">//sizeof(s)/sizeof(char);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,Kmp(c,s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无参考意义&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="httpsp://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>红龙</title>
    <link href="httpsp://yoursite.com/2018/11/05/%E7%BA%A2%E9%BE%99/"/>
    <id>httpsp://yoursite.com/2018/11/05/红龙/</id>
    <published>2018-11-04T16:23:49.354Z</published>
    <updated>2018-11-04T16:29:43.125Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>每当我认为，自己清醒的认识到，它的起因，经过，和结果时，我却无法集中注意力，我无权，站在这样一个高地。</p><p>我审视着它，我看到它吟唱出刺耳的密密麻麻的语句，我感觉得到它们融化，汇合，变为正常，变为我身边的椅子，水杯，台灯，我眼前的手掌的毛孔。</p><p>亲爱的，我不得不这样讲，我已由它组成，我不知该怎样做，因为，我已由它组成。</p><p>它是红龙，善良而邪恶的无形体现，黑色和白色融合，于我体内而逃于我身，赐予我悲伤和快乐的一切情绪，施加于我痛苦和狂热的次次混乱。</p><p>我望着红龙。</p><p>请你告诉我，为什么，我目光下的极限，仅仅是一个可笑无比的紫色的巨大矛盾体。</p><p>红龙，你是诱因，你早已彻彻底底的，屈服于这片土地和星辰，在这使人厌恶的距离里，无休止地接受我的祈祷。</p><p>它将会绽放出鲜艳的赤红色的花，它紧闭的嘴中必将发出人类一样的叫声，我已感受的到，红龙之下一切的复苏，</p><p>切断一切灌输后的大地，将会彻底区分于你的肌肤。</p><p>我必定要杀死它。</p><p>红龙。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="话" scheme="httpsp://yoursite.com/tags/%E8%AF%9D/"/>
    
  </entry>
  
</feed>
